<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>Functional programming - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Functional programming","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Functional_programming" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Functional+programming"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">Functional programming</h1>			<div class="dablink">For subroutine-oriented programming, see <a href="Procedural_programming" title="Procedural programming">Procedural programming</a>.</div>
<table class="vertical-navbox nowraplinks" cellspacing="5" style="float: right; clear: right; background-color: #f9f9f9; border: 1px solid #aaa; width:22em; margin: 0 0 1em 1em; padding: 0.2em; border-spacing: 0.4em 0; text-align: center; line-height: 1.4em; font-size: 88%;" cellpadding="0"><tr><th class="" style="padding: 0.2em 0.4em 0.2em; font-size: 145%; line-height: 1.2em;"><a href="Programming_paradigm" title="Programming paradigm">Programming paradigms</a></th>
</tr><tr><td class="" style="padding-top: 0.2em; padding-bottom: 0.2em; text-align: left;">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Action_language" title="Action language">Action</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Agent-oriented_programming" title="Agent-oriented programming">Agent-oriented</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Automata-based_programming" title="Automata-based programming">Automata-based</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Component-based_software_engineering" title="Component-based software engineering">Component-based</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Flow-based_programming" title="Flow-based programming">Flow-based</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Pipeline_programming" title="Pipeline programming">Pipelined</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Concurrent_computing" title="Concurrent computing">Concurrent computing</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Relativistic_programming" title="Relativistic programming">Relativistic programming</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Data-driven_programming" title="Data-driven programming">Data-driven</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Declarative_programming" title="Declarative programming">Declarative</a> (contrast: <a href="Imperative_programming" title="Imperative programming">Imperative</a>)
<ul><li><a href="http://en.m.wikipedia.org/wiki/Constraint_programming" title="Constraint programming">Constraint</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a>
<ul><li>Cell-oriented (<a href="http://en.m.wikipedia.org/wiki/Spreadsheet" title="Spreadsheet">spreadsheets</a>)</li>
<li><a href="http://en.m.wikipedia.org/wiki/Reactive_programming" title="Reactive programming">Reactive</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Category:Intensional_programming_languages" title="Category:Intensional programming languages">Intensional</a></li>
</ul></li>
<li><strong class="selflink">Functional</strong></li>
<li><a href="http://en.m.wikipedia.org/wiki/Logic_programming" title="Logic programming">Logic</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Abductive_logic_programming" title="Abductive logic programming">Abductive logic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Answer_set_programming" title="Answer set programming">Answer set</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Constraint_logic_programming" title="Constraint logic programming">Constraint logic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Functional_logic_programming" title="Functional logic programming">Functional logic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Inductive_logic_programming" title="Inductive logic programming">Inductive logic</a></li>
</ul></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/End-user_development" title="End-user development">End-user programming</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Service-oriented_architecture" title="Service-oriented architecture">Service-oriented</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Time-driven_programming" title="Time-driven programming">Time-driven</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Expression-oriented_programming_language" title="Expression-oriented programming language">Expression-oriented</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Feature_Oriented_Programming" title="Feature Oriented Programming" class="mw-redirect">Feature-oriented</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Function-level_programming" title="Function-level programming">Function-level</a> (contrast: <a href="http://en.m.wikipedia.org/wiki/Value-level_programming" title="Value-level programming">Value-level</a>)</li>
<li><a href="Generic_programming" title="Generic programming">Generic</a></li>
<li><a href="Imperative_programming" title="Imperative programming">Imperative</a> (contrast: <a href="http://en.m.wikipedia.org/wiki/Declarative_programming" title="Declarative programming">Declarative</a>)
<ul><li><a href="Procedural_programming" title="Procedural programming">Procedural</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Language-oriented_programming" title="Language-oriented programming">Language-oriented</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Service-oriented_modeling#Discipline-specific_modeling" title="Service-oriented modeling">Discipline-specific</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Domain-specific_language" title="Domain-specific language">Domain-specific</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Grammar-oriented_programming" title="Grammar-oriented programming">Grammar-oriented</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Dialecting" title="Dialecting">Dialecting</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Intentional_programming" title="Intentional programming">Intentional</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Automatic_programming" title="Automatic programming">Automatic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">Reflective</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Attribute-oriented_programming" title="Attribute-oriented programming">Attribute-oriented</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Policy-based_design" title="Policy-based design">Policy-based</a></li>
</ul></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Non-structured_programming" title="Non-structured programming">Non-structured</a> (contrast: <a href="Structured_programming" title="Structured programming">Structured</a>)
<ul><li><a href="http://en.m.wikipedia.org/wiki/Array_programming" title="Array programming">Array</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Nondeterministic_programming" title="Nondeterministic programming">Nondeterministic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Parallel_computing" title="Parallel computing">Parallel computing</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Process-oriented_programming" title="Process-oriented programming">Process-oriented</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Programming_in_the_large_and_programming_in_the_small" title="Programming in the large and programming in the small">Programming in the large and small</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Semantic-oriented_programming" title="Semantic-oriented programming">Semantic</a></li>
<li><a href="Structured_programming" title="Structured programming">Structured</a> (contrast: <a href="http://en.m.wikipedia.org/wiki/Non-structured_programming" title="Non-structured programming">Non-structured</a>)
<ul><li><a href="Modular_programming" title="Modular programming">Modular</a> (contrast: Monolithic)</li>
<li><a href="Object-oriented_programming" title="Object-oriented programming">Object-oriented</a>
<ul><li>By <a href="http://en.m.wikipedia.org/wiki/Separation_of_concerns" title="Separation of concerns">separation of concerns</a>:
<ul><li><a href="http://en.m.wikipedia.org/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Role-oriented_programming" title="Role-oriented programming">Role-oriented</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Subject-oriented_programming" title="Subject-oriented programming">Subject-oriented</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Value-level_programming" title="Value-level programming">Value-level</a> (contrast: <a href="http://en.m.wikipedia.org/wiki/Function-level_programming" title="Function-level programming">Function-level</a>)</li>
</ul></td>
</tr><tr><td style="text-align: right; font-size: 115%;">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul><li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Programming_paradigms" title="Template:Programming paradigms"><span title="View this template" style="">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Programming_paradigms" title="Template talk:Programming paradigms"><span title="Discuss this template" style="">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&amp;action=edit"><span title="Edit this template" style="">e</span></a></li>
</ul></div>
</td>
</tr></table><p>In <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, <b>functional programming</b> is a <a href="Programming_paradigm" title="Programming paradigm">programming paradigm</a> that treats <a href="http://en.m.wikipedia.org/wiki/Computation" title="Computation">computation</a> as the evaluation of <a href="http://en.m.wikipedia.org/wiki/Function_(mathematics)" title="Function (mathematics)">mathematical functions</a> and avoids <a href="http://en.m.wikipedia.org/wiki/Program_state" title="Program state" class="mw-redirect">state</a> and <a href="http://en.m.wikipedia.org/wiki/Immutable_object" title="Immutable object">mutable</a> data. It emphasizes the application of functions, in contrast to the <a href="Imperative_programming" title="Imperative programming">imperative programming</a> style, which emphasizes changes in state.<sup id="cite_ref-hudak1989_1-0" class="reference"><a href="Functional_programming#cite_note-hudak1989-1"><span>[</span>1<span>]</span></a></sup> Functional programming has its roots in <a href="http://en.m.wikipedia.org/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>, a <a href="http://en.m.wikipedia.org/wiki/Formal_system" title="Formal system">formal system</a> developed in the 1930s to investigate function definition, function application, and <a href="Recursion" title="Recursion">recursion</a>. Many functional <a href="Programming_language" title="Programming language">programming languages</a> can be viewed as elaborations on the lambda calculus.<sup id="cite_ref-hudak1989_1-1" class="reference"><a href="Functional_programming#cite_note-hudak1989-1"><span>[</span>1<span>]</span></a></sup></p>
<p>In practice, the difference between a mathematical function and the notion of a function used in imperative programming is that imperative functions can have <a href="http://en.m.wikipedia.org/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a> that may change the value of program state. Because of this, they lack <a href="http://en.m.wikipedia.org/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>, i.e. the same language expression can result in different values at different times depending on the state of the executing program. Conversely, in functional code, the output value of a function depends only on the arguments that are input to the function, so calling a function <i>f</i> twice with the same value for an argument <i>x</i> will produce the same result <i>f(x)</i> both times. Eliminating side effects can make it much easier to understand and predict the behavior of a program, which is one of the key motivations for the development of functional programming.<sup id="cite_ref-hudak1989_1-2" class="reference"><a href="Functional_programming#cite_note-hudak1989-1"><span>[</span>1<span>]</span></a></sup></p>
<p>Functional programming languages, especially <a href="http://en.m.wikipedia.org/wiki/Purely_functional" title="Purely functional">purely functional</a> ones such as the pioneering <a href="http://en.m.wikipedia.org/wiki/Hope_(programming_language)" title="Hope (programming language)">Hope</a>, have largely been emphasized in <a href="http://en.m.wikipedia.org/wiki/Academic" title="Academic" class="mw-redirect">academia</a> rather than in commercial software development. However, prominent functional programming languages such as <a href="http://en.m.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common</a> <a href="http://en.m.wikipedia.org/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, <a href="http://en.m.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>,<sup id="cite_ref-clinger1987_2-0" class="reference"><a href="Functional_programming#cite_note-clinger1987-2"><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-hartheimer1987_3-0" class="reference"><a href="Functional_programming#cite_note-hartheimer1987-3"><span>[</span>3<span>]</span></a></sup><sup id="cite_ref-kidd2007_4-0" class="reference"><a href="Functional_programming#cite_note-kidd2007-4"><span>[</span>4<span>]</span></a></sup><sup id="cite_ref-cleis2006_5-0" class="reference"><a href="Functional_programming#cite_note-cleis2006-5"><span>[</span>5<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/ISLISP" title="ISLISP">ISLISP</a>, <a href="http://en.m.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>, <a href="http://en.m.wikipedia.org/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a>,<sup id="cite_ref-racket-video-games_6-0" class="reference"><a href="Functional_programming#cite_note-racket-video-games-6"><span>[</span>6<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a>,<sup id="cite_ref-erlang-faq_7-0" class="reference"><a href="Functional_programming#cite_note-erlang-faq-7"><span>[</span>7<span>]</span></a></sup><sup id="cite_ref-armstrong2007_8-0" class="reference"><a href="Functional_programming#cite_note-armstrong2007-8"><span>[</span>8<span>]</span></a></sup><sup id="cite_ref-larson2009_9-0" class="reference"><a href="Functional_programming#cite_note-larson2009-9"><span>[</span>9<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/OCaml" title="OCaml">OCaml</a>,<sup id="cite_ref-minksy2008_10-0" class="reference"><a href="Functional_programming#cite_note-minksy2008-10"><span>[</span>10<span>]</span></a></sup><sup id="cite_ref-leroy2007_11-0" class="reference"><a href="Functional_programming#cite_note-leroy2007-11"><span>[</span>11<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>,<sup id="cite_ref-haskell-industry_12-0" class="reference"><a href="Functional_programming#cite_note-haskell-industry-12"><span>[</span>12<span>]</span></a></sup><sup id="cite_ref-hudak2007_13-0" class="reference"><a href="Functional_programming#cite_note-hudak2007-13"><span>[</span>13<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a><sup id="cite_ref-effective-scala_14-0" class="reference"><a href="Functional_programming#cite_note-effective-scala-14"><span>[</span>14<span>]</span></a></sup> and <a href="http://en.m.wikipedia.org/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a><sup id="cite_ref-quantFSharp_15-0" class="reference"><a href="Functional_programming#cite_note-quantFSharp-15"><span>[</span>15<span>]</span></a></sup><sup id="cite_ref-businessAppsFSharp_16-0" class="reference"><a href="Functional_programming#cite_note-businessAppsFSharp-16"><span>[</span>16<span>]</span></a></sup> have been used in industrial and commercial applications by a wide variety of organizations. Functional programming is also supported in some <a href="http://en.m.wikipedia.org/wiki/Domain-specific_programming_language" title="Domain-specific programming language" class="mw-redirect">domain-specific programming languages</a> like <a href="http://en.m.wikipedia.org/wiki/R_(programming_language)" title="R (programming language)">R</a> (statistics),<sup id="cite_ref-useR_17-0" class="reference"><a href="Functional_programming#cite_note-useR-17"><span>[</span>17<span>]</span></a></sup><sup id="cite_ref-Chambers_18-0" class="reference"><a href="Functional_programming#cite_note-Chambers-18"><span>[</span>18<span>]</span></a></sup><a href="Mathematica" title="Mathematica">Mathematica</a> (symbolic math),<sup id="cite_ref-Amath-CO_19-0" class="reference"><a href="Functional_programming#cite_note-Amath-CO-19"><span>[</span>19<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/J_(programming_language)" title="J (programming language)">J</a>, <a href="http://en.m.wikipedia.org/wiki/K_(programming_language)" title="K (programming language)">K</a> and <a href="http://en.m.wikipedia.org/wiki/Q_(programming_language_from_Kx_Systems)" title="Q (programming language from Kx Systems)">Q from Kx Systems</a> (financial analysis), <a href="http://en.m.wikipedia.org/wiki/XQuery" title="XQuery">XQuery</a>/<a href="http://en.m.wikipedia.org/wiki/XSLT" title="XSLT">XSLT</a> (<a href="http://en.m.wikipedia.org/wiki/XML" title="XML">XML</a>)<sup id="cite_ref-Novatchev_20-0" class="reference"><a href="Functional_programming#cite_note-Novatchev-20"><span>[</span>20<span>]</span></a></sup><sup id="cite_ref-Mertz_21-0" class="reference"><a href="Functional_programming#cite_note-Mertz-21"><span>[</span>21<span>]</span></a></sup> and Opal.<sup id="cite_ref-Opal_.28programming_language.29_22-0" class="reference"><a href="Functional_programming#cite_note-Opal_.28programming_language.29-22"><span>[</span>22<span>]</span></a></sup> Widespread domain-specific declarative languages like <a href="http://en.m.wikipedia.org/wiki/SQL" title="SQL">SQL</a> and <a href="http://en.m.wikipedia.org/wiki/Lex_(software)" title="Lex (software)">Lex</a>/<a href="http://en.m.wikipedia.org/wiki/Yacc" title="Yacc">Yacc</a> use some elements of functional programming, especially in eschewing <span class="new" title="Mutable value (page does not exist)">mutable values</span>.<sup id="cite_ref-Chamberlin_Boyce_23-0" class="reference"><a href="Functional_programming#cite_note-Chamberlin_Boyce-23"><span>[</span>23<span>]</span></a></sup></p>
<p>Programming in a functional style can also be accomplished in languages that aren't specifically designed for functional programming. For example, the imperative <a href="Perl" title="Perl">Perl</a> programming language has been the subject of a book describing how to apply functional programming concepts.<sup id="cite_ref-24" class="reference"><a href="Functional_programming#cite_note-24"><span>[</span>24<span>]</span></a></sup><a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> 3.0 added constructs to facilitate the functional style as well and even <a href="http://en.m.wikipedia.org/wiki/Apple_Computers" title="Apple Computers" class="mw-redirect">Apple</a>'s <a href="http://en.m.wikipedia.org/wiki/Objective-c" title="Objective-c" class="mw-redirect">Objective-c</a> uses blocks to provide a functional support.</p>
<h2> <span class="mw-headline" id="History">History</span></h2>
<p><a href="http://en.m.wikipedia.org/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a> provides a theoretical framework for describing functions and their evaluation. Although it is a mathematical abstraction rather than a programming language, it forms the basis of almost all functional programming languages today. An equivalent theoretical formulation, <a href="http://en.m.wikipedia.org/wiki/Combinatory_logic" title="Combinatory logic">combinatory logic</a>, is commonly perceived as more abstract than lambda calculus and preceded it in invention. It is used in some esoteric languages including <a href="http://en.m.wikipedia.org/wiki/Unlambda" title="Unlambda">Unlambda</a>. Combinatory logic and lambda calculus were both originally developed to achieve a clearer approach to the <a href="http://en.m.wikipedia.org/wiki/Foundations_of_mathematics" title="Foundations of mathematics">foundations of mathematics</a>.<sup id="cite_ref-25" class="reference"><a href="Functional_programming#cite_note-25"><span>[</span>25<span>]</span></a></sup></p>
<p>An early functional-flavored language was <a href="http://en.m.wikipedia.org/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, developed by <a href="http://en.m.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a> while at <a href="http://en.m.wikipedia.org/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">Massachusetts Institute of Technology</a> (MIT) for the <a href="http://en.m.wikipedia.org/wiki/IBM_700/7000_series#Scientific_Architecture" title="IBM 700/7000 series">IBM 700/7000 series</a> scientific computers in the late 1950s.<sup id="cite_ref-26" class="reference"><a href="Functional_programming#cite_note-26"><span>[</span>26<span>]</span></a></sup> Lisp introduced many features now found in functional languages, though Lisp is technically a multi-paradigm language. <a href="http://en.m.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> and <a href="http://en.m.wikipedia.org/wiki/Dylan_(programming_language)" title="Dylan (programming language)">Dylan</a> were later attempts to simplify and improve Lisp.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Information_Processing_Language" title="Information Processing Language">Information Processing Language</a> (IPL) is sometimes cited as the first computer-based functional programming language.<sup id="cite_ref-27" class="reference"><a href="Functional_programming#cite_note-27"><span>[</span>27<span>]</span></a></sup> It is an assembly-style language for manipulating lists of symbols. It does have a notion of "generator", which amounts to a function accepting a function as an argument, and, since it is an assembly-level language, code can be used as data, so IPL can be regarded as having higher-order functions. However, it relies heavily on mutating list structure and similar imperative features.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Kenneth_E._Iverson" title="Kenneth E. Iverson">Kenneth E. Iverson</a> developed <a href="http://en.m.wikipedia.org/wiki/APL_(programming_language)" title="APL (programming language)">APL</a> in the early 1960s, described in his 1962 book <i>A Programming Language</i> (<a href="http://en.m.wikipedia.org/wiki/Special:BookSources/9780471430148" class="internal mw-magiclink-isbn">ISBN 9780471430148</a>). APL was the primary influence on <a href="http://en.m.wikipedia.org/wiki/John_Backus" title="John Backus">John Backus</a>'s <a href="http://en.m.wikipedia.org/wiki/FP_(programming_language)" title="FP (programming language)">FP</a>. In the early 1990s, Iverson and <a href="http://en.m.wikipedia.org/wiki/Roger_Hui" title="Roger Hui">Roger Hui</a> created <a href="http://en.m.wikipedia.org/wiki/J_(programming_language)" title="J (programming language)">J</a>. In the mid 1990s, <a href="http://en.m.wikipedia.org/wiki/Arthur_Whitney_(computer_scientist)" title="Arthur Whitney (computer scientist)">Arthur Whitney</a>, who had previously worked with Iverson, created <a href="http://en.m.wikipedia.org/wiki/K_(programming_language)" title="K (programming language)">K</a>, which is used commercially in financial industries along with its descendant <a href="http://en.m.wikipedia.org/wiki/Q_(programming_language_from_Kx_Systems)" title="Q (programming language from Kx Systems)">Q</a>.</p>
<p><a href="http://en.m.wikipedia.org/wiki/John_Backus" title="John Backus">John Backus</a> presented <a href="http://en.m.wikipedia.org/wiki/FP_(programming_language)" title="FP (programming language)">FP</a> in his 1977 <a href="http://en.m.wikipedia.org/wiki/Turing_Award" title="Turing Award">Turing Award</a> lecture "Can Programming Be Liberated From the von Neumann Style? A Functional Style and its Algebra of Programs".<sup id="cite_ref-28" class="reference"><a href="Functional_programming#cite_note-28"><span>[</span>28<span>]</span></a></sup> He defines functional programs as being built up in a hierarchical way by means of "combining forms" that allow an "algebra of programs"; in modern language, this means that functional programs follow the <a href="http://en.m.wikipedia.org/wiki/Principle_of_compositionality" title="Principle of compositionality">principle of compositionality</a>. Backus's paper popularized research into functional programming, though it emphasized <a href="http://en.m.wikipedia.org/wiki/Function-level_programming" title="Function-level programming">function-level programming</a> rather than the lambda-calculus style which has come to be associated with functional programming.</p>
<p>In the 1970s, <a href="http://en.m.wikipedia.org/wiki/ML_(programming_language)" title="ML (programming language)">ML</a> was created by <a href="http://en.m.wikipedia.org/wiki/Robin_Milner" title="Robin Milner">Robin Milner</a> at the <a href="http://en.m.wikipedia.org/wiki/University_of_Edinburgh" title="University of Edinburgh">University of Edinburgh</a>, and <a href="http://en.m.wikipedia.org/wiki/David_Turner_(computer_scientist)" title="David Turner (computer scientist)">David Turner</a> developed initially the language <a href="http://en.m.wikipedia.org/wiki/SASL_(programming_language)" title="SASL (programming language)">SASL</a> at the <a href="http://en.m.wikipedia.org/wiki/University_of_St._Andrews" title="University of St. Andrews" class="mw-redirect">University of St. Andrews</a> and later the language <a href="http://en.m.wikipedia.org/wiki/Miranda_(programming_language)" title="Miranda (programming language)">Miranda</a> at the <a href="http://en.m.wikipedia.org/wiki/University_of_Kent" title="University of Kent">University of Kent</a>. ML eventually developed into several dialects, the most common of which are now <a href="http://en.m.wikipedia.org/wiki/OCaml" title="OCaml">OCaml</a> and <a href="http://en.m.wikipedia.org/wiki/Standard_ML" title="Standard ML">Standard ML</a>. Also in the 1970s, the development of <a href="http://en.m.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> (a partly functional dialect of Lisp), as described in the influential <a href="http://en.m.wikipedia.org/wiki/Lambda_Papers" title="Lambda Papers" class="mw-redirect">Lambda Papers</a> and the 1985 textbook <i><a href="http://en.m.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>, brought awareness of the power of functional programming to the wider programming-languages community.</p>
<p>In the 1980s, <a href="http://en.m.wikipedia.org/wiki/Per_Martin-L%C3%B6f" title="Per Martin-Löf">Per Martin-Löf</a> developed <a href="http://en.m.wikipedia.org/wiki/Intuitionistic_type_theory" title="Intuitionistic type theory">intuitionistic type theory</a> (also called <i>constructive</i> type theory), which associated functional programs with <a href="http://en.m.wikipedia.org/wiki/Constructive_proof" title="Constructive proof">constructive proofs</a> of arbitrarily complex mathematical propositions expressed as <a href="http://en.m.wikipedia.org/wiki/Dependent_type" title="Dependent type">dependent types</a>. This led to powerful new approaches to <a href="http://en.m.wikipedia.org/wiki/Interactive_theorem_proving" title="Interactive theorem proving" class="mw-redirect">interactive theorem proving</a> and has influenced the development of many subsequent functional programming languages.</p>
<p>The <a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell language</a> began with a consensus in 1987 to form an <a href="http://en.m.wikipedia.org/wiki/Open_standard" title="Open standard">open standard</a> for functional programming research; implementation releases have been ongoing since 1990.</p>
<h2> <span class="mw-headline" id="Concepts">Concepts</span></h2>
<p>A number of concepts and paradigms are specific to functional programming, and generally foreign to <a href="Imperative_programming" title="Imperative programming">imperative programming</a> (including <a href="Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>). However, programming languages are often hybrids of several programming paradigms, so programmers using "mostly imperative" languages may have utilized some of these concepts.<sup id="cite_ref-29" class="reference"><a href="Functional_programming#cite_note-29"><span>[</span>29<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="First-class_and_higher-order_functions">First-class and higher-order functions</span></h3>
<div class="rellink relarticle mainarticle">Main articles: <a href="http://en.m.wikipedia.org/wiki/First-class_function" title="First-class function">First-class function</a> and <a href="Higher-order_function" title="Higher-order function">Higher-order function</a></div>
<p><a href="Higher-order_function" title="Higher-order function">Higher-order functions</a> are functions that can either take other functions as arguments or return them as results. In calculus, an example of a higher-order function is the <a href="http://en.m.wikipedia.org/wiki/Differential_operator" title="Differential operator">differential operator</a> <img class="tex" alt="d/dx" src="http://upload.wikimedia.org/math/1/1/4/1140b8095b48ecf78f052a86c1afe555.png">, which returns the <a href="http://en.m.wikipedia.org/wiki/Derivative" title="Derivative">derivative</a> of a function <img class="tex" alt="f" src="http://upload.wikimedia.org/math/8/f/a/8fa14cdd754f91cc6554c9e71929cce7.png">.</p>
<p>Higher-order functions are closely related to <a href="http://en.m.wikipedia.org/wiki/First-class_function" title="First-class function">first-class functions</a> in that higher-order functions and first-class functions both allow functions as arguments and results of other functions. The distinction between the two is subtle: "higher-order" describes a mathematical concept of functions that operate on other functions, while "first-class" is a computer science term that describes programming language entities that have no restriction on their use (thus first-class functions can appear anywhere in the program that other first-class entities like numbers can, including as arguments to other functions and as their return values).</p>
<p>Higher-order functions enable <a href="http://en.m.wikipedia.org/wiki/Partial_application" title="Partial application">partial application</a> or <a href="http://en.m.wikipedia.org/wiki/Currying" title="Currying">currying</a>, a technique in which a function is applied to its arguments one at a time, with each application returning a new function that accepts the next argument. This allows one to succinctly express, for example, the successor function as the addition operator partially applied to the natural number one.</p>
<h3> <span class="mw-headline" id="Pure_functions">Pure functions</span></h3>
<p><a href="http://en.m.wikipedia.org/wiki/Purely_functional" title="Purely functional">Purely functional</a> functions (or expressions) have no memory or I/O <a href="http://en.m.wikipedia.org/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>. This means that pure functions have several useful properties, many of which can be used to optimize the code:</p>
<ul><li>If the result of a pure expression is not used, it can be removed without affecting other expressions.</li>
<li>If a pure function is called with parameters that cause no side-effects, the result is constant with respect to that parameter list (sometimes called <a href="http://en.m.wikipedia.org/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>), i.e. if the pure function is again called with the same parameters, the same result will be returned (this can enable caching optimizations such as <a href="http://en.m.wikipedia.org/wiki/Memoization" title="Memoization">memoization</a>).</li>
<li>If there is no data dependency between two pure expressions, then their order can be reversed, or they can be performed in <a href="http://en.m.wikipedia.org/wiki/Parallelization" title="Parallelization" class="mw-redirect">parallel</a> and they cannot interfere with one another (in other terms, the evaluation of any pure expression is <a href="http://en.m.wikipedia.org/wiki/Thread-safe" title="Thread-safe" class="mw-redirect">thread-safe</a>).</li>
<li>If the entire language does not allow side-effects, then any evaluation strategy can be used; this gives the compiler freedom to reorder or combine the evaluation of expressions in a program (for example, using <a href="http://en.m.wikipedia.org/wiki/Deforestation_(computer_science)" title="Deforestation (computer science)">deforestation</a>).</li>
</ul><p>While most compilers for imperative programming languages detect pure functions and perform common-subexpression elimination for pure function calls, they cannot always do this for pre-compiled libraries, which generally do not expose this information, thus preventing optimizations that involve those external functions. Some compilers, such as <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a>, add extra keywords for a programmer to explicitly mark external functions as pure, to enable such optimizations. <a href="http://en.m.wikipedia.org/wiki/Fortran_95" title="Fortran 95" class="mw-redirect">Fortran 95</a> also allows functions to be designated "pure".</p>
<h3> <span class="mw-headline" id="Recursion">Recursion</span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursion (computer science)</a></div>
<p><a href="http://en.m.wikipedia.org/wiki/Iteration" title="Iteration">Iteration</a> (looping) in functional languages is usually accomplished via <a href="Recursion" title="Recursion">recursion</a>. <a href="http://en.m.wikipedia.org/wiki/Recursion_(computer_science)" title="Recursion (computer science)">Recursive functions</a> invoke themselves, allowing an operation to be performed over and over. Recursion may require maintaining a stack, but <a href="http://en.m.wikipedia.org/wiki/Tail_recursion" title="Tail recursion" class="mw-redirect">tail recursion</a> can be recognized and optimized by a compiler into the same code used to implement iteration in imperative languages. The <a href="http://en.m.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> language standard requires implementations to recognize and optimize tail recursion. Tail recursion optimization can be implemented by transforming the program into <a href="http://en.m.wikipedia.org/wiki/Continuation_passing_style" title="Continuation passing style" class="mw-redirect">continuation passing style</a> during compiling, among other approaches.</p>
<p>Common patterns of recursion can be factored out using higher order functions, with <a href="http://en.m.wikipedia.org/wiki/Catamorphism" title="Catamorphism">catamorphisms</a> and <a href="http://en.m.wikipedia.org/wiki/Anamorphism" title="Anamorphism">anamorphisms</a> (or "folds" and "unfolds") being the most obvious examples. Such higher order functions play a role analogous to built-in control structures such as <a href="http://en.m.wikipedia.org/wiki/Program_loops" title="Program loops" class="mw-redirect">loops</a> in <a href="http://en.m.wikipedia.org/wiki/Imperative_languages" title="Imperative languages" class="mw-redirect">imperative languages</a>.</p>
<p>Most general purpose functional programming languages allow unrestricted recursion and are <a href="http://en.m.wikipedia.org/wiki/Turing_complete" title="Turing complete" class="mw-redirect">Turing complete</a>, which makes the <a href="http://en.m.wikipedia.org/wiki/Halting_problem" title="Halting problem">halting problem</a> <a href="http://en.m.wikipedia.org/wiki/Undecidable_problem" title="Undecidable problem">undecidable</a>, can cause unsoundness of <a href="http://en.m.wikipedia.org/wiki/Equational_reasoning" title="Equational reasoning" class="mw-redirect">equational reasoning</a>, and generally requires the introduction of <a href="http://en.m.wikipedia.org/wiki/Inconsistency" title="Inconsistency" class="mw-redirect">inconsistency</a> into the logic expressed by the language's <a href="Type_system" title="Type system">type system</a>. Some special purpose languages such as <a href="http://en.m.wikipedia.org/wiki/Coq" title="Coq">Coq</a> allow only <a href="http://en.m.wikipedia.org/wiki/Well-founded" title="Well-founded" class="mw-redirect">well-founded</a> recursion and are <a href="http://en.m.wikipedia.org/wiki/Strongly_normalizing" title="Strongly normalizing" class="mw-redirect">strongly normalizing</a> (nonterminating computations can be expressed only with infinite streams of values called <a href="http://en.m.wikipedia.org/wiki/Codata" title="Codata" class="mw-redirect">codata</a>). As a consequence, these languages fail to be Turing complete and expressing certain functions in them is impossible, but they can still express a wide class of interesting computations while avoiding the problems introduced by unrestricted recursion. Functional programming limited to well-founded recursion with a few other constraints is called <a href="http://en.m.wikipedia.org/wiki/Total_functional_programming" title="Total functional programming">total functional programming</a>. See Turner 2004 for more discussion.<sup id="cite_ref-totalfp_30-0" class="reference"><a href="Functional_programming#cite_note-totalfp-30"><span>[</span>30<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Strict_versus_non-strict_evaluation">Strict versus non-strict evaluation</span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Evaluation_strategy" title="Evaluation strategy">Evaluation strategy</a></div>
<p>Functional languages can be categorized by whether they use <i>strict (eager)</i> or <i>non-strict (lazy)</i> evaluation, concepts that refer to how function arguments are processed when an expression is being evaluated. The technical difference is in the <a href="http://en.m.wikipedia.org/wiki/Denotational_semantics" title="Denotational semantics">denotational semantics</a> of expressions containing failing or divergent computations. Under strict evaluation, the evaluation of any term containing a failing subterm will itself fail. For example, the expression:</p>
<pre>
print length([2+1, 3*2, 1/0, 5-4])
</pre>
<p>will fail under strict evaluation because of the division by zero in the third element of the list. Under nonstrict evaluation, the length function will return the value 4 (i.e., the number of items in the list), since evaluating it will not attempt to evaluate the terms making up the list. In brief, strict evaluation always fully evaluates function arguments before invoking the function. Non-strict evaluation does not evaluate function arguments unless their values are required to evaluate the function call itself.</p>
<p>The usual implementation strategy for non-strict evaluation in functional languages is <a href="http://en.m.wikipedia.org/wiki/Graph_reduction" title="Graph reduction">graph reduction</a>.<sup id="cite_ref-31" class="reference"><a href="Functional_programming#cite_note-31"><span>[</span>31<span>]</span></a></sup> Non-strict evaluation is used by default in several pure functional languages, including <a href="http://en.m.wikipedia.org/wiki/Miranda_(programming_language)" title="Miranda (programming language)">Miranda</a>, <a href="http://en.m.wikipedia.org/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a>, and <a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>.</p>
<p><a href="Functional_programming#CITEREFHughes1984">Hughes 1984</a> argues for non-strict evaluation as a mechanism for improving program modularity through <a href="http://en.m.wikipedia.org/wiki/Separation_of_concerns" title="Separation of concerns">separation of concerns</a>, by easing independent implementation of producers and consumers of data streams.<sup id="cite_ref-32" class="reference"><a href="Functional_programming#cite_note-32"><span>[</span>32<span>]</span></a></sup> Launchbury 1993 describes some difficulties that lazy evaluation introduces, particularly in analyzing a program's storage requirements, and proposes an <a href="http://en.m.wikipedia.org/wiki/Operational_semantics" title="Operational semantics">operational semantics</a> to aid in such analysis.<sup id="cite_ref-launchbury1993_33-0" class="reference"><a href="Functional_programming#cite_note-launchbury1993-33"><span>[</span>33<span>]</span></a></sup> Harper 2009 proposes including both strict and nonstrict evaluation in the same language, using the language's type system to distinguish them.<sup id="cite_ref-34" class="reference"><a href="Functional_programming#cite_note-34"><span>[</span>34<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Type_systems">Type systems</span></h3>
<p>Especially since the development of <a href="http://en.m.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_inference" title="Hindley–Milner type inference" class="mw-redirect">Hindley–Milner type inference</a> in the 1970s, functional programming languages have tended to use <a href="http://en.m.wikipedia.org/wiki/Typed_lambda_calculus" title="Typed lambda calculus">typed lambda calculus</a>, as opposed to the <a href="http://en.m.wikipedia.org/wiki/Untyped_lambda_calculus" title="Untyped lambda calculus" class="mw-redirect">untyped lambda calculus</a> used in Lisp and its variants (such as Scheme). The use of <a href="http://en.m.wikipedia.org/wiki/Algebraic_datatypes" title="Algebraic datatypes" class="mw-redirect">algebraic datatypes</a> and <a href="http://en.m.wikipedia.org/wiki/Pattern_matching" title="Pattern matching">pattern matching</a> makes manipulation of complex data structures convenient and expressive; the presence of strong compile-time type checking makes programs more reliable, while <a href="http://en.m.wikipedia.org/wiki/Type_inference" title="Type inference">type inference</a> frees the programmer from the need to manually declare types to the compiler.</p>
<p>Some research-oriented functional languages such as <a href="http://en.m.wikipedia.org/wiki/Coq" title="Coq">Coq</a>, <a href="http://en.m.wikipedia.org/wiki/Agda_(theorem_prover)" title="Agda (theorem prover)" class="mw-redirect">Agda</a>, <a href="http://en.m.wikipedia.org/wiki/Cayenne_(programming_language)" title="Cayenne (programming language)">Cayenne</a>, and <a href="http://en.m.wikipedia.org/wiki/Epigram_(programming_language)" title="Epigram (programming language)">Epigram</a> are based on <a href="http://en.m.wikipedia.org/wiki/Intuitionistic_type_theory" title="Intuitionistic type theory">intuitionistic type theory</a>, which allows types to depend on terms. Such types are called <a href="http://en.m.wikipedia.org/wiki/Dependent_type" title="Dependent type">dependent types</a>. These type systems do not have decidable type inference and are difficult to understand and program with<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from December 2011">citation needed</span></a></i>]</sup>. But dependent types can express arbitrary propositions in <a href="http://en.m.wikipedia.org/wiki/Predicate_logic" title="Predicate logic">predicate logic</a>. Through the <a href="http://en.m.wikipedia.org/wiki/Curry%E2%80%93Howard_isomorphism" title="Curry–Howard isomorphism" class="mw-redirect">Curry–Howard isomorphism</a>, then, well-typed programs in these languages become a means of writing formal <a href="http://en.m.wikipedia.org/wiki/Mathematical_proof" title="Mathematical proof">mathematical proofs</a> from which a compiler can generate <a href="http://en.m.wikipedia.org/wiki/Formal_verification" title="Formal verification">certified code</a>. While these languages are mainly of interest in academic research (including in <a href="http://en.m.wikipedia.org/wiki/Formalized_mathematics" title="Formalized mathematics" class="mw-redirect">formalized mathematics</a>), they have begun to be used in engineering as well. <a href="http://en.m.wikipedia.org/wiki/Compcert" title="Compcert" class="mw-redirect">Compcert</a> is a <a href="Compiler" title="Compiler">compiler</a> for a subset of the <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C programming language</a> that is written in Coq and formally verified.<sup id="cite_ref-35" class="reference"><a href="Functional_programming#cite_note-35"><span>[</span>35<span>]</span></a></sup></p>
<p>A limited form of dependent types called <a href="http://en.m.wikipedia.org/wiki/Generalized_algebraic_data_type" title="Generalized algebraic data type">generalized algebraic data types</a> (GADT's) can be implemented in a way that provides some of the benefits of dependently typed programming while avoiding most of its inconvenience.<sup id="cite_ref-36" class="reference"><a href="Functional_programming#cite_note-36"><span>[</span>36<span>]</span></a></sup> GADT's are available in the <a href="http://en.m.wikipedia.org/wiki/Glasgow_Haskell_Compiler" title="Glasgow Haskell Compiler">Glasgow Haskell Compiler</a> and in <a href="http://en.m.wikipedia.org/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a> (as "case classes"), and have been proposed as additions to other languages including Java and C#.<sup id="cite_ref-37" class="reference"><a href="Functional_programming#cite_note-37"><span>[</span>37<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Functional_programming_in_non-functional_languages">Functional programming in non-functional languages</span></h3>
<p>It is possible to use a functional style of programming in languages that are not traditionally considered functional languages.<sup id="cite_ref-38" class="reference"><a href="Functional_programming#cite_note-38"><span>[</span>38<span>]</span></a></sup> For example, both <a href="D_(programming_language)" title="D (programming language)">D</a> and <a href="http://en.m.wikipedia.org/wiki/Fortran_95" title="Fortran 95" class="mw-redirect">Fortran 95</a> explicitly support pure functions.<sup id="cite_ref-39" class="reference"><a href="Functional_programming#cite_note-39"><span>[</span>39<span>]</span></a></sup></p>
<p>First class functions have slowly been added to mainstream languages. For example, in early 1994, support for lambda, filter, map, and reduce was added to <a href="Python_(programming_language)" title="Python (programming language)">Python</a>. Then during the development of Python 3000, <a href="http://en.m.wikipedia.org/wiki/Guido_van_Rossum" title="Guido van Rossum">Guido van Rossum</a> called for the removal of these features.<sup id="cite_ref-40" class="reference"><a href="Functional_programming#cite_note-40"><span>[</span>40<span>]</span></a></sup><sup id="cite_ref-41" class="reference"><a href="Functional_programming#cite_note-41"><span>[</span>41<span>]</span></a></sup> So far, only the <code>reduce</code> function has been removed, and it remains accessible via the <code>functools</code> standard library module.<sup id="cite_ref-42" class="reference"><a href="Functional_programming#cite_note-42"><span>[</span>42<span>]</span></a></sup> First class functions were also introduced in <a href="PHP" title="PHP">PHP</a> 5.3, <a href="http://en.m.wikipedia.org/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a> 9, <a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> 3.0, and <a href="http://en.m.wikipedia.org/wiki/C%2B%2B11" title="C++11">C++11</a>.</p>
<p>The <a href="http://en.m.wikipedia.org/wiki/Language_Integrated_Query" title="Language Integrated Query">Language Integrated Query</a> (LINQ) feature, with its many incarnations, is an obvious and powerful use of functional programming in <a href="http://en.m.wikipedia.org/wiki/.NET_Framework" title=".NET Framework">.NET</a>.</p>
<p>In <a href="Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="http://en.m.wikipedia.org/wiki/Anonymous_class" title="Anonymous class" class="mw-redirect">anonymous classes</a> can sometimes be used to simulate <a href="http://en.m.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)">closures</a>;<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from January 2009">citation needed</span></a></i>]</sup> however, anonymous classes are not always proper replacements to <a href="http://en.m.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)">closures</a> because they have more limited capabilities.</p>
<p>Many <a href="http://en.m.wikipedia.org/wiki/Object-oriented" title="Object-oriented" class="mw-redirect">object-oriented</a> <a href="http://en.m.wikipedia.org/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)" class="mw-redirect">design patterns</a> are expressible in functional programming terms: for example, the <a href="http://en.m.wikipedia.org/wiki/Strategy_pattern" title="Strategy pattern">strategy pattern</a> simply dictates use of a higher-order function, and the <a href="http://en.m.wikipedia.org/wiki/Visitor_(design_pattern)" title="Visitor (design pattern)" class="mw-redirect">visitor</a> pattern roughly corresponds to a <a href="http://en.m.wikipedia.org/wiki/Catamorphism" title="Catamorphism">catamorphism</a>, or <a href="http://en.m.wikipedia.org/wiki/Fold_(higher-order_function)" title="Fold (higher-order function)">fold</a>.</p>
<p>Similarly, the idea of immutable data from functional programming is often included in imperative programming languages,<sup id="cite_ref-43" class="reference"><a href="Functional_programming#cite_note-43"><span>[</span>43<span>]</span></a></sup> for example the tuple in Python, which is an immutable array.</p>
<h2> <span class="mw-headline" id="Comparison_to_imperative_programming">Comparison to imperative programming</span></h2>
<p>Functional programming is very different from <a href="Imperative_programming" title="Imperative programming">imperative programming</a>. The most significant differences stem from the fact that functional programming avoids <a href="http://en.m.wikipedia.org/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>, which are used in imperative programming to implement state and I/O. Pure functional programming disallows side effects completely and so provides <a href="http://en.m.wikipedia.org/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>, which makes it easier to verify, optimize, and parallelize programs, and easier to write automated tools to perform those tasks.</p>
<p>Higher-order functions are rarely used in older imperative programming. Where a traditional imperative program might use a loop to traverse a list, a functional program would use a different technique. It would use a higher-order function that takes as arguments a function and a list. The higher-order function would then apply the given function to each element of the given list and then return a new list with the results.</p>
<h3> <span class="mw-headline" id="Simulating_state">Simulating state</span></h3>
<p>There are tasks (for example, maintaining a bank account balance) that often seem most naturally implemented with state. Pure functional programming performs these tasks, and I/O tasks such as accepting user input and printing to the screen, in a different way.</p>
<p>The pure functional programming language <a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> implements them using <a href="http://en.m.wikipedia.org/wiki/Monad_(functional_programming)" title="Monad (functional programming)">monads</a>, derived from <a href="http://en.m.wikipedia.org/wiki/Category_theory" title="Category theory">category theory</a>. Monads offer a way to abstract certain types of computational patterns, including (but not limited to) modeling of computations with mutable state (and other side effects such as I/O) in an imperative manner without losing purity. While existing monads may be easy to apply in a program, given appropriate templates and examples, many students find them difficult to understand conceptually, e.g., when asked to define new monads (which is sometimes needed for certain types of libraries).<sup id="cite_ref-44" class="reference"><a href="Functional_programming#cite_note-44"><span>[</span>44<span>]</span></a></sup></p>
<p>Another way in which functional languages can simulate state is by passing around a <a href="http://en.m.wikipedia.org/wiki/Data_structure" title="Data structure">data structure</a> that represents the current state as a parameter to function calls. On each function call, a copy of this data structure is created with whatever differences are the result of the function. This is referred to as '<span class="new" title="State-passing style (page does not exist)">state-passing style</span>'.</p>
<p>Impure functional languages usually include a more direct method of managing mutable state. <a href="http://en.m.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>, for example, uses managed references that can be updated by applying pure functions to the current state. This kind of approach enables mutability while still promoting the use of pure functions as the preferred way to express computations.</p>
<p>Alternative methods such as <a href="http://en.m.wikipedia.org/wiki/Hoare_logic" title="Hoare logic">Hoare logic</a> and <a href="http://en.m.wikipedia.org/wiki/Uniqueness_type" title="Uniqueness type">uniqueness</a> have been developed to track side effects in programs. Some modern research languages use <a href="http://en.m.wikipedia.org/wiki/Effect_system" title="Effect system">effect systems</a> to make explicit the presence of side effects.</p>
<h3> <span class="mw-headline" id="Efficiency_issues">Efficiency issues</span></h3>
<table class="metadata plainlinks ambox ambox-content ambox-Original_research" style=""><tr><td class="mbox-image">
<div style="width: 52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/f/f4/Ambox_content.png" width="40" height="40"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This section <b>may contain <a href="http://en.m.wikipedia.org/wiki/Wikipedia:No_original_research" title="Wikipedia:No original research">original research</a></b>. <span class="hide-when-compact">Please <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Functional_programming&amp;action=edit">improve it</a> by <a href="Wikipedia:Verifiability" title="Wikipedia:Verifiability">verifying</a> the claims made and adding <a href="http://en.m.wikipedia.org/wiki/Wikipedia:References" title="Wikipedia:References" class="mw-redirect">references</a>. Statements consisting only of original research may be removed.</span> <small><i>(May 2009)</i></small> </span></td>
</tr></table><p>Functional programming languages are typically less efficient in their use of <a href="http://en.m.wikipedia.org/wiki/Central_processing_unit" title="Central processing unit">CPU</a> and memory than imperative languages such as <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>.<sup id="cite_ref-45" class="reference"><a href="Functional_programming#cite_note-45"><span>[</span>45<span>]</span></a></sup> This is related to the fact that some mutable data structures like arrays have a very straightforward implementation using present hardware (which is a highly evolved Turing machine). Flat arrays may be accessed very efficiently with deeply pipelined CPUs, prefetched efficiently through caches (with no complex pointer-chasing), or handled with SIMD instructions. And it is not easy to create their equally efficient general-purpose immutable counterparts. For purely functional languages, the worst-case slowdown is logarithmic in the number of memory cells used, because mutable memory can be represented by a purely functional data structure with logarithmic access time (such as a balanced tree).<sup id="cite_ref-Spiewak_46-0" class="reference"><a href="Functional_programming#cite_note-Spiewak-46"><span>[</span>46<span>]</span></a></sup> However, such slowdowns are not universal. For programs that perform intensive numerical computations, functional languages such as <a href="http://en.m.wikipedia.org/wiki/OCaml" title="OCaml">OCaml</a> and <a href="http://en.m.wikipedia.org/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a> are only slightly slower than C.<sup id="cite_ref-47" class="reference"><a href="Functional_programming#cite_note-47"><span>[</span>47<span>]</span></a></sup> For programs that handle large <a href="http://en.m.wikipedia.org/wiki/Matrix_(mathematics)" title="Matrix (mathematics)">matrices</a> and multidimensional <a href="http://en.m.wikipedia.org/wiki/Database" title="Database">databases</a>, <a href="http://en.m.wikipedia.org/wiki/Array_programming" title="Array programming">array</a> functional languages (such as <a href="http://en.m.wikipedia.org/wiki/J_(programming_language)" title="J (programming language)">J</a> and <a href="http://en.m.wikipedia.org/wiki/K_(programming_language)" title="K (programming language)">K</a>) were designed with speed optimization.</p>
<p>Immutability of data can, in many cases, lead to execution efficiency, by allowing the compiler to make assumptions that are unsafe in an imperative language, thus increasing opportunities for <a href="http://en.m.wikipedia.org/wiki/Inline_expansion" title="Inline expansion">inline expansion</a>.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from October 2008">citation needed</span></a></i>]</sup></p>
<p><a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> may also speed up the program, even asymptotically, whereas it may slow it down at most by a constant factor (however, it may introduce memory leaks when used improperly). Launchbury 1993<sup id="cite_ref-launchbury1993_33-1" class="reference"><a href="Functional_programming#cite_note-launchbury1993-33"><span>[</span>33<span>]</span></a></sup> discusses theoretical issues related to memory leaks from lazy evaluation, and O'Sullivan <i>et al.</i> 2008<sup id="cite_ref-48" class="reference"><a href="Functional_programming#cite_note-48"><span>[</span>48<span>]</span></a></sup> give some practical advice for analyzing and fixing them. However, the most general implementations of lazy evaluation making extensive use of dereferenced code and data perform poorly on modern processors with deep pipelines and multi-level caches (where a cache miss may cost hundreds of cycles)</p>
<h3> <span class="mw-headline" id="Coding_styles">Coding styles</span></h3>
<p>Imperative programs tend to emphasize the series of steps taken by a program in carrying out an action, while functional programs tend to emphasize the composition and arrangement of functions, often without specifying explicit <i>steps</i>. A simple example illustrates this with two solutions to the same programming goal (calculating <a href="http://en.m.wikipedia.org/wiki/Fibonacci_number" title="Fibonacci number">Fibonacci numbers</a>). The imperative example is in <a href="C++" title="C++">C++</a>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#include &lt;iostream&gt;</span>
 
<span class="co1">// Fibonacci numbers, imperative style</span>
<span class="kw4">int</span> fibonacci<span class="br0">(</span><span class="kw4">int</span> iterations<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> first <span class="sy1">=</span> <span class="nu0">0</span>, second <span class="sy1">=</span> <span class="nu0">1</span><span class="sy4">;</span> <span class="co1">// seed values</span>
 
    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> iterations <span class="sy2">-</span> <span class="nu0">1</span><span class="sy4">;</span> <span class="sy2">++</span>i<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw4">int</span> sum <span class="sy1">=</span> first <span class="sy2">+</span> second<span class="sy4">;</span>
        first <span class="sy1">=</span> second<span class="sy4">;</span>
        second <span class="sy1">=</span> sum<span class="sy4">;</span>
    <span class="br0">}</span>
 
    <span class="kw1">return</span> first<span class="sy4">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> fibonacci<span class="br0">(</span><span class="nu0">10</span><span class="br0">)</span> <span class="sy1">&lt;&lt;</span> <span class="st0">"<span class="es1">\n</span>"</span><span class="sy4">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<h4> <span class="mw-headline" id="Haskell">Haskell</span></h4>
<p>A functional version (in <a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>) has a different feel to it:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="haskell source-haskell">
<pre class="de1">
<span class="co1">-- Fibonacci numbers, functional style</span>
 
<span class="co1">-- describe an infinite list based on the recurrence relation for Fibonacci numbers</span>
fibRecurrence first second <span class="sy0">=</span> first : fibRecurrence second <span class="br0">(</span>first <span class="sy0">+</span> second<span class="br0">)</span>
 
<span class="co1">-- describe fibonacci list as fibRecurrence with initial values 0 and 1</span>
fibonacci <span class="sy0">=</span> fibRecurrence <span class="nu0">0</span> <span class="nu0">1</span>
 
<span class="co1">-- describe action to print the 10th element of the fibonacci list</span>
main <span class="sy0">=</span> <span class="kw3">print</span> <span class="br0">(</span>fibonacci <span class="sy0">!!</span> <span class="nu0">10</span><span class="br0">)</span>
</pre></div>
</div>
<p>Or, more concisely:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="haskell source-haskell">
<pre class="de1">
fibonacci2 <span class="sy0">=</span> <span class="nu0">0</span>:<span class="nu0">1</span>:zipwith <span class="br0">(</span><span class="sy0">+</span><span class="br0">)</span> fibonacci2 <span class="br0">(</span><span class="kw3">tail</span> fibonacci2<span class="br0">)</span>
</pre></div>
</div>
<p>The imperative style describes the intermediate steps involved in calculating <code>fibonacci(N)</code>, and places those steps inside a <a href="http://en.m.wikipedia.org/wiki/Program_loops" title="Program loops" class="mw-redirect">loop statement</a>. In contrast, the functional implementation shown here states the mathematical <a href="http://en.m.wikipedia.org/wiki/Recurrence_relation" title="Recurrence relation">recurrence relation</a> that defines the entire Fibonacci sequence, then selects an element from the sequence (see also <a href="http://en.m.wikipedia.org/wiki/Recursion_(computer_science)" title="Recursion (computer science)">recursion</a>). This example relies on Haskell's <a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a> to create an "infinite" list of which only as much as needed (the first 10 elements in this case) will actually be computed. That computation happens when the runtime system carries out the action described by "main".</p>
<h4> <span class="mw-headline" id="Erlang">Erlang</span></h4>
<p>The same program in <a href="http://en.m.wikipedia.org/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a> provides a simple example of how functional languages in general do not require their syntax to contain an "<a href="http://en.m.wikipedia.org/wiki/If_statement" title="If statement" class="mw-redirect">if</a>" statement.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="erlang source-erlang">
<pre class="de1">
<span class="sy3">-</span><span class="re2">module</span><span class="br0">(</span>fibonacci<span class="br0">)</span><span class="sy1">.</span>
<span class="sy3">-</span><span class="re2">export</span><span class="br0">(</span><span class="br0">[</span>start<span class="sy3">/</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy1">.</span>
 
<span class="co1">%% Fibonacci numbers in Erlang</span>
<span class="re3">start</span><span class="br0">(</span><span class="re5">N</span><span class="br0">)</span> <span class="sy1">-&gt;</span> <span class="re3">do_fib</span><span class="br0">(</span><span class="nu0">0</span><span class="sy1">,</span><span class="nu0">1</span><span class="sy1">,</span><span class="re5">N</span><span class="br0">)</span><span class="sy1">.</span>
 
<span class="re3">do_fib</span><span class="br0">(</span><span class="re5">_</span><span class="sy1">,</span><span class="re5">B</span><span class="sy1">,</span><span class="nu0">1</span><span class="br0">)</span> <span class="sy1">-&gt;</span> <span class="re5">B</span><span class="sy1">;</span>
<span class="re3">do_fib</span><span class="br0">(</span><span class="re5">A</span><span class="sy1">,</span><span class="re5">B</span><span class="sy1">,</span><span class="re5">N</span><span class="br0">)</span> <span class="sy1">-&gt;</span> <span class="re3">do_fib</span><span class="br0">(</span><span class="re5">B</span><span class="sy1">,</span><span class="re5">A</span><span class="sy3">+</span><span class="re5">B</span><span class="sy1">,</span><span class="re5">N</span><span class="sy3">-</span><span class="nu0">1</span><span class="br0">)</span><span class="sy1">.</span>
</pre></div>
</div>
<p>This program is contained within a module called "fibonacci" and declares that the start/1 function will be visible from outside the scope of this module.</p>
<p>The function start/1 accepts a single parameter (as denoted by the "/1" syntax) and then calls an internal function called do_fib/3.</p>
<p>In direct contrast to the imperative coding style, Erlang does not need an "if" statement because the Erlang runtime will examine the parameters being passed to a function, and call the first function having a signature that matches the current pattern of parameters. (Erlang syntax does provide an "if" statement, but it is considered syntactic sugar and, compared to its usage in imperative languages, plays only a minor role in application logic design).</p>
<p>In this case, it is unnecessary to test for a parameter value within the body of the function because such a test is implicitly performed by providing a set of function signatures that describe the different patterns of values that could be received by a function.</p>
<p>In the case above, the first version of do_fib/3 will only be called when the third parameter has the precise value of 1. In all other cases, the second version of do_fib/3 will be called.</p>
<p>This example demonstrates that functional programming languages often implement conditional logic <i>implicitly</i> by matching parameter patterns rather than <i>explicitly</i> by means of an "if" statement.</p>
<h4> <span class="mw-headline" id="Lisp">Lisp</span></h4>
<p>The Fibonacci function can be written in <a href="http://en.m.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> as follows:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
<span class="br0">(</span><span class="kw1">defun</span> fib <span class="br0">(</span>n <span class="sy0">&amp;</span>optional <span class="br0">(</span>a <span class="nu0">0</span><span class="br0">)</span> <span class="br0">(</span>b <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">=</span> n <span class="nu0">0</span><span class="br0">)</span>
       a
    <span class="br0">(</span>fib <span class="br0">(</span>- n <span class="nu0">1</span><span class="br0">)</span> b <span class="br0">(</span>+ a b<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>The program can then be called as</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
<span class="br0">(</span>fib <span class="nu0">10</span><span class="br0">)</span>
</pre></div>
</div>
<h2> <span class="mw-headline" id="Use_in_industry">Use in industry</span></h2>
<p>Functional programming has long been popular in academia, but with few industrial applications.<sup id="cite_ref-programmingScala_49-0" class="reference"><a href="Functional_programming#cite_note-programmingScala-49"><span>[</span>49<span>]</span></a></sup><sup class="reference" style="white-space:nowrap;">:page 11</sup> However, recently several prominent functional programming languages have been used in commercial or industrial systems. For example, the <a href="http://en.m.wikipedia.org/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a> programming language, which was developed by the <a href="http://en.m.wikipedia.org/wiki/Sweden" title="Sweden">Swedish</a> company <a href="http://en.m.wikipedia.org/wiki/Ericsson" title="Ericsson">Ericsson</a> in the late 1980s, was originally used to implement fault-tolerant telecommunications systems.<sup id="cite_ref-armstrong2007_8-1" class="reference"><a href="Functional_programming#cite_note-armstrong2007-8"><span>[</span>8<span>]</span></a></sup> It has since become popular for building a range of applications at companies such as <a href="http://en.m.wikipedia.org/wiki/T-Mobile" title="T-Mobile">T-Mobile</a>, <a href="http://en.m.wikipedia.org/wiki/Nortel" title="Nortel">Nortel</a>, <a href="http://en.m.wikipedia.org/wiki/Facebook" title="Facebook">Facebook</a> and <a href="http://en.m.wikipedia.org/wiki/%C3%89lectricit%C3%A9_de_France" title="Électricité de France">EDF</a>.<sup id="cite_ref-erlang-faq_7-1" class="reference"><a href="Functional_programming#cite_note-erlang-faq-7"><span>[</span>7<span>]</span></a></sup><sup id="cite_ref-larson2009_9-1" class="reference"><a href="Functional_programming#cite_note-larson2009-9"><span>[</span>9<span>]</span></a></sup><sup id="cite_ref-50" class="reference"><a href="Functional_programming#cite_note-50"><span>[</span>50<span>]</span></a></sup><sup id="cite_ref-Sim-Diasca_51-0" class="reference"><a href="Functional_programming#cite_note-Sim-Diasca-51"><span>[</span>51<span>]</span></a></sup> The <a href="http://en.m.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> dialect of <a href="http://en.m.wikipedia.org/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> was used as the basis for several applications on early <a href="http://en.m.wikipedia.org/wiki/Apple_Macintosh" title="Apple Macintosh" class="mw-redirect">Apple Macintosh</a> computers,<sup id="cite_ref-clinger1987_2-1" class="reference"><a href="Functional_programming#cite_note-clinger1987-2"><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-hartheimer1987_3-1" class="reference"><a href="Functional_programming#cite_note-hartheimer1987-3"><span>[</span>3<span>]</span></a></sup> and has more recently been applied to problems such as training <span class="new" title="Software simulation (page does not exist)">simulation software</span><sup id="cite_ref-kidd2007_4-1" class="reference"><a href="Functional_programming#cite_note-kidd2007-4"><span>[</span>4<span>]</span></a></sup> and <a href="http://en.m.wikipedia.org/wiki/Telescope" title="Telescope">telescope</a> control.<sup id="cite_ref-cleis2006_5-1" class="reference"><a href="Functional_programming#cite_note-cleis2006-5"><span>[</span>5<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/OCaml" title="OCaml">OCaml</a>, which was introduced in the mid 1990s, has seen commercial use in areas such as financial analysis,<sup id="cite_ref-minksy2008_10-1" class="reference"><a href="Functional_programming#cite_note-minksy2008-10"><span>[</span>10<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Software_driver" title="Software driver" class="mw-redirect">driver</a> verification, industrial <a href="http://en.m.wikipedia.org/wiki/Robot" title="Robot">robot</a> programming, and static analysis of <a href="http://en.m.wikipedia.org/wiki/Embedded_software" title="Embedded software">embedded software</a>.<sup id="cite_ref-leroy2007_11-1" class="reference"><a href="Functional_programming#cite_note-leroy2007-11"><span>[</span>11<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, although initially intended as a research language,<sup id="cite_ref-hudak2007_13-1" class="reference"><a href="Functional_programming#cite_note-hudak2007-13"><span>[</span>13<span>]</span></a></sup> has also been applied by a range of companies, in areas such as aerospace systems, hardware design, and web programming.<sup id="cite_ref-haskell-industry_12-1" class="reference"><a href="Functional_programming#cite_note-haskell-industry-12"><span>[</span>12<span>]</span></a></sup><sup id="cite_ref-hudak2007_13-2" class="reference"><a href="Functional_programming#cite_note-hudak2007-13"><span>[</span>13<span>]</span></a></sup></p>
<p>Other functional programming languages that have seen use in industry include <a href="http://en.m.wikipedia.org/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>,<sup id="cite_ref-52" class="reference"><a href="Functional_programming#cite_note-52"><span>[</span>52<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a>,<sup id="cite_ref-quantFSharp_15-1" class="reference"><a href="Functional_programming#cite_note-quantFSharp-15"><span>[</span>15<span>]</span></a></sup><sup id="cite_ref-businessAppsFSharp_16-1" class="reference"><a href="Functional_programming#cite_note-businessAppsFSharp-16"><span>[</span>16<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>,<sup id="cite_ref-53" class="reference"><a href="Functional_programming#cite_note-53"><span>[</span>53<span>]</span></a></sup> Standard ML,<sup id="cite_ref-54" class="reference"><a href="Functional_programming#cite_note-54"><span>[</span>54<span>]</span></a></sup><sup id="cite_ref-55" class="reference"><a href="Functional_programming#cite_note-55"><span>[</span>55<span>]</span></a></sup> and <a href="http://en.m.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>.<sup id="cite_ref-56" class="reference"><a href="Functional_programming#cite_note-56"><span>[</span>56<span>]</span></a></sup></p>
<h2> <span class="mw-headline" id="See_also">See also</span></h2>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Comparison_of_programming_paradigms" title="Comparison of programming paradigms">Comparison of programming paradigms</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Eager_evaluation" title="Eager evaluation">Eager evaluation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/List_of_functional_programming_topics" title="List of functional programming topics">List of functional programming topics</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Nested_function" title="Nested function">Nested function</a></li>
</ul><h2> <span class="mw-headline" id="References">References</span></h2>
<div class="reflist references-column-width" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;">
<ol class="references"><li id="cite_note-hudak1989-1"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-hudak1989_1-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-hudak1989_1-1"><sup><i><b>b</b></i></sup></a> <a href="Functional_programming#cite_ref-hudak1989_1-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/Paul_Hudak" title="Paul Hudak">Hudak, Paul</a> (September 1989). <a rel="nofollow" class="external text" href="http://www.cs.berkeley.edu/~jcondit/pl-prelim/hudak89functional.pdf">"Conception, evolution, and application of functional programming languages"</a> (PDF). <i><a href="Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> Computing Surveys</i> <b>21</b> (3): 359–411. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F72551.72554">10.1145/72551.72554</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.cs.berkeley.edu/~jcondit/pl-prelim/hudak89functional.pdf">http://www.cs.berkeley.edu/~jcondit/pl-prelim/hudak89functional.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Conception%2C+evolution%2C+and+application+of+functional+programming+languages&amp;rft.jtitle=%5B%5BAssociation+for+Computing+Machinery%7CACM%5D%5D+Computing+Surveys&amp;rft.aulast=Hudak&amp;rft.aufirst=Paul&amp;rft.au=Hudak%2C%26%2332%3BPaul&amp;rft.date=September+1989&amp;rft.volume=21&amp;rft.issue=3&amp;rft.pages=359%E2%80%93411&amp;rft_id=info:doi/10.1145%2F72551.72554&amp;rft_id=http%3A%2F%2Fwww.cs.berkeley.edu%2F%7Ejcondit%2Fpl-prelim%2Fhudak89functional.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-clinger1987-2"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-clinger1987_2-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-clinger1987_2-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation Journal">Clinger, Will (1987). <a rel="nofollow" class="external text" href="http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html">"MultiTasking and MacScheme"</a>. <i>MacTech</i> <b>3</b> (12)<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html">http://www.mactech.com/articles/mactech/Vol.03/03.12/Multitasking/index.html</a></span><span class="reference-accessdate">. Retrieved 2008-08-28</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=MultiTasking+and+MacScheme&amp;rft.jtitle=MacTech&amp;rft.aulast=Clinger&amp;rft.aufirst=Will&amp;rft.au=Clinger%2C%26%2332%3BWill&amp;rft.date=1987&amp;rft.volume=3&amp;rft.issue=12&amp;rft_id=http%3A%2F%2Fwww.mactech.com%2Farticles%2Fmactech%2FVol.03%2F03.12%2FMultitasking%2Findex.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-hartheimer1987-3"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-hartheimer1987_3-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-hartheimer1987_3-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation Journal">Hartheimer, Anne (1987). <a rel="nofollow" class="external text" href="http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html">"Programming a Text Editor in MacScheme+Toolsmith"</a>. <i>MacTech</i> <b>3</b> (1)<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html">http://www.mactech.com/articles/mactech/Vol.03/03.1/SchemeWindows/index.html</a></span><span class="reference-accessdate">. Retrieved 2008-08-28</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Programming+a+Text+Editor+in+MacScheme%2BToolsmith&amp;rft.jtitle=MacTech&amp;rft.aulast=Hartheimer&amp;rft.aufirst=Anne&amp;rft.au=Hartheimer%2C%26%2332%3BAnne&amp;rft.date=1987&amp;rft.volume=3&amp;rft.issue=1&amp;rft_id=http%3A%2F%2Fwww.mactech.com%2Farticles%2Fmactech%2FVol.03%2F03.1%2FSchemeWindows%2Findex.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-kidd2007-4"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-kidd2007_4-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-kidd2007_4-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book">Kidd, Eric. <a rel="nofollow" class="external text" href="http://cufp.galois.com/2007/abstracts.html#EricKidd">"Terrorism Response Training in Scheme"</a>. CUFP 2007<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2007/abstracts.html#EricKidd">http://cufp.galois.com/2007/abstracts.html#EricKidd</a></span><span class="reference-accessdate">. Retrieved 2009-08-26</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Terrorism+Response+Training+in+Scheme&amp;rft.atitle=&amp;rft.aulast=Kidd&amp;rft.aufirst=Eric&amp;rft.au=Kidd%2C%26%2332%3BEric&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2007%2Fabstracts.html%23EricKidd&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-cleis2006-5"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-cleis2006_5-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-cleis2006_5-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book">Cleis, Richard. <a rel="nofollow" class="external text" href="http://cufp.galois.com/2006/abstracts.html#RichardCleis">"Scheme in Space"</a>. CUFP 2006<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2006/abstracts.html#RichardCleis">http://cufp.galois.com/2006/abstracts.html#RichardCleis</a></span><span class="reference-accessdate">. Retrieved 2009-08-26</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Scheme+in+Space&amp;rft.atitle=&amp;rft.aulast=Cleis&amp;rft.aufirst=Richard&amp;rft.au=Cleis%2C%26%2332%3BRichard&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2006%2Fabstracts.html%23RichardCleis&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-racket-video-games-6"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-racket-video-games_6-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.gameenginebook.com/gdc09-statescripting-uncharted2.pdf">"State-Based Scripting in Uncharted 2"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.gameenginebook.com/gdc09-statescripting-uncharted2.pdf">http://www.gameenginebook.com/gdc09-statescripting-uncharted2.pdf</a></span><span class="reference-accessdate">. Retrieved 2011-08-08</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=State-Based+Scripting+in+Uncharted+2&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.gameenginebook.com%2Fgdc09-statescripting-uncharted2.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-erlang-faq-7"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-erlang-faq_7-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-erlang-faq_7-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.erlang.org/faq/faq.html#AEN50">"Who uses Erlang for product development?"</a>. <i>Frequently asked questions about Erlang</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.erlang.org/faq/faq.html#AEN50">http://www.erlang.org/faq/faq.html#AEN50</a></span><span class="reference-accessdate">. Retrieved 2007-08-05</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Who+uses+Erlang+for+product+development%3F&amp;rft.atitle=Frequently+asked+questions+about+Erlang&amp;rft_id=http%3A%2F%2Fwww.erlang.org%2Ffaq%2Ffaq.html%23AEN50&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-armstrong2007-8"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-armstrong2007_8-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-armstrong2007_8-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book">Armstrong, Joe (June 2007). <a rel="nofollow" class="external text" href="http://doi.acm.org/10.1145/1238844.1238850">"A history of Erlang"</a>. Third ACM SIGPLAN Conference on History of Programming Languages. San Diego, California<span class="printonly">. <a rel="nofollow" class="external free" href="http://doi.acm.org/10.1145/1238844.1238850">http://doi.acm.org/10.1145/1238844.1238850</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+history+of+Erlang&amp;rft.atitle=&amp;rft.aulast=Armstrong&amp;rft.aufirst=Joe&amp;rft.au=Armstrong%2C%26%2332%3BJoe&amp;rft.date=June+2007&amp;rft.place=San+Diego%2C+California&amp;rft_id=http%3A%2F%2Fdoi.acm.org%2F10.1145%2F1238844.1238850&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-larson2009-9"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-larson2009_9-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-larson2009_9-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation Journal">Larson, Jim (March 2009). <a rel="nofollow" class="external text" href="http://doi.acm.org/10.1145/1467247.1467263">"Erlang for concurrent programming"</a>. <i>Communications of the ACM</i> <b>52</b> (3): 48. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F1467247.1467263">10.1145/1467247.1467263</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://doi.acm.org/10.1145/1467247.1467263">http://doi.acm.org/10.1145/1467247.1467263</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Erlang+for+concurrent+programming&amp;rft.jtitle=Communications+of+the+ACM&amp;rft.aulast=Larson&amp;rft.aufirst=Jim&amp;rft.au=Larson%2C%26%2332%3BJim&amp;rft.date=March+2009&amp;rft.volume=52&amp;rft.issue=3&amp;rft.pages=48&amp;rft_id=info:doi/10.1145%2F1467247.1467263&amp;rft_id=http%3A%2F%2Fdoi.acm.org%2F10.1145%2F1467247.1467263&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-minksy2008-10"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-minksy2008_10-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-minksy2008_10-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation Journal">Minsky, Yaron; Weeks, Stephen (July 2008). <a rel="nofollow" class="external text" href="http://journals.cambridge.org/action/displayAbstract?aid=1899164">"Caml Trading — experiences with functional programming on Wall Street"</a>. <i>Journal of Functional Programming</i> (Cambridge University Press) <b>18</b> (4): 553–564. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1017%2FS095679680800676X">10.1017/S095679680800676X</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://journals.cambridge.org/action/displayAbstract?aid=1899164">http://journals.cambridge.org/action/displayAbstract?aid=1899164</a></span><span class="reference-accessdate">. Retrieved 2008-08-27</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Caml+Trading%26nbsp%3B%E2%80%94+experiences+with+functional+programming+on+Wall+Street&amp;rft.jtitle=Journal+of+Functional+Programming&amp;rft.aulast=Minsky&amp;rft.aufirst=Yaron&amp;rft.au=Minsky%2C%26%2332%3BYaron&amp;rft.au=Weeks%2C%26%2332%3BStephen&amp;rft.date=July+2008&amp;rft.volume=18&amp;rft.issue=4&amp;rft.pages=553%E2%80%93564&amp;rft.pub=Cambridge+University+Press&amp;rft_id=info:doi/10.1017%2FS095679680800676X&amp;rft_id=http%3A%2F%2Fjournals.cambridge.org%2Faction%2FdisplayAbstract%3Faid%3D1899164&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-leroy2007-11"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-leroy2007_11-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-leroy2007_11-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book">Leroy, Xavier. <a rel="nofollow" class="external text" href="http://cufp.galois.com/2007/slides/XavierLeroy.pdf">"Some uses of Caml in Industry"</a>. CUFP 2007<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2007/slides/XavierLeroy.pdf">http://cufp.galois.com/2007/slides/XavierLeroy.pdf</a></span><span class="reference-accessdate">. Retrieved 2009-08-26</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Some+uses+of+Caml+in+Industry&amp;rft.atitle=&amp;rft.aulast=Leroy&amp;rft.aufirst=Xavier&amp;rft.au=Leroy%2C%26%2332%3BXavier&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2007%2Fslides%2FXavierLeroy.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-haskell-industry-12"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-haskell-industry_12-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-haskell-industry_12-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.haskell.org/haskellwiki/Haskell_in_industry">"Haskell in industry"</a>. <i>Haskell Wiki</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.haskell.org/haskellwiki/Haskell_in_industry">http://www.haskell.org/haskellwiki/Haskell_in_industry</a></span><span class="reference-accessdate">. Retrieved 2009-08-26</span>. "Haskell has a diverse range of use commercially, from aerospace and defense, to finance, to web startups, hardware design firms and lawnmower manufacturers."</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Haskell+in+industry&amp;rft.atitle=Haskell+Wiki&amp;rft_id=http%3A%2F%2Fwww.haskell.org%2Fhaskellwiki%2FHaskell_in_industry&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-hudak2007-13"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-hudak2007_13-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-hudak2007_13-1"><sup><i><b>b</b></i></sup></a> <a href="Functional_programming#cite_ref-hudak2007_13-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Paul_Hudak" title="Paul Hudak">Hudak, Paul</a>; Hughes, J., Jones, S. P., and Wadler, P. (June 2007). <a rel="nofollow" class="external text" href="http://doi.acm.org/10.1145/1238844.1238856">"A history of Haskell: being lazy with class"</a>. Third ACM SIGPLAN Conference on History of Programming Languages. San Diego, California<span class="printonly">. <a rel="nofollow" class="external free" href="http://doi.acm.org/10.1145/1238844.1238856">http://doi.acm.org/10.1145/1238844.1238856</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+history+of+Haskell%3A+being+lazy+with+class&amp;rft.atitle=&amp;rft.aulast=Hudak&amp;rft.aufirst=Paul&amp;rft.au=Hudak%2C%26%2332%3BPaul&amp;rft.date=June+2007&amp;rft.place=San+Diego%2C+California&amp;rft_id=http%3A%2F%2Fdoi.acm.org%2F10.1145%2F1238844.1238856&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-effective-scala-14"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-effective-scala_14-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://twitter.github.com/effectivescala/?sd">"Effective Scala"</a>. <i>Scala Wiki</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://twitter.github.com/effectivescala/?sd">http://twitter.github.com/effectivescala/?sd</a></span><span class="reference-accessdate">. Retrieved 2012-02-21</span>. "Effective Scala."</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Effective+Scala&amp;rft.atitle=Scala+Wiki&amp;rft_id=http%3A%2F%2Ftwitter.github.com%2Feffectivescala%2F%3Fsd&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-quantFSharp-15"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-quantFSharp_15-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-quantFSharp_15-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book">Mansell, Howard (2008). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2008/abstracts.html#MansellHoward">"Quantitative Finance in F#"</a>. CUFP 2008<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2008/abstracts.html#MansellHoward">http://cufp.galois.com/2008/abstracts.html#MansellHoward</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Quantitative+Finance+in+F%23&amp;rft.atitle=&amp;rft.aulast=Mansell&amp;rft.aufirst=Howard&amp;rft.au=Mansell%2C%26%2332%3BHoward&amp;rft.date=2008&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2008%2Fabstracts.html%23MansellHoward&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-businessAppsFSharp-16"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-businessAppsFSharp_16-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-businessAppsFSharp_16-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book">Peake, Alex (2009). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2009/abstracts.html#AlexPeakeAdamGranicz">"The First Substantial Line of Business Application in F#"</a>. CUFP 2009<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2009/abstracts.html#AlexPeakeAdamGranicz">http://cufp.galois.com/2009/abstracts.html#AlexPeakeAdamGranicz</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+First+Substantial+Line+of+Business+Application+in+F%23&amp;rft.atitle=&amp;rft.aulast=Peake&amp;rft.aufirst=Alex&amp;rft.au=Peake%2C%26%2332%3BAlex&amp;rft.date=2009&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2009%2Fabstracts.html%23AlexPeakeAdamGranicz&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-useR-17"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-useR_17-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.r-project.org/useR-2006/program.html">"The useR! 2006 conference schedule includes papers on the commercial use of R"</a>. R-project.org. 2006-06-08<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.r-project.org/useR-2006/program.html">http://www.r-project.org/useR-2006/program.html</a></span><span class="reference-accessdate">. Retrieved 2011-06-20</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+useR%21+2006+conference+schedule+includes+papers+on+the+commercial+use+of+R&amp;rft.atitle=&amp;rft.date=2006-06-08&amp;rft.pub=R-project.org&amp;rft_id=http%3A%2F%2Fwww.r-project.org%2FuseR-2006%2Fprogram.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-Chambers-18"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-Chambers_18-0">^</a></b></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/John_Chambers_(programmer)" title="John Chambers (programmer)" class="mw-redirect">Chambers, John M.</a> (1998). <i>Programming with Data: A Guide to the S Language</i>. Springer Verlag. pp. 67–70. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-387-98503-9" title="Special:BookSources/978-0-387-98503-9">978-0-387-98503-9</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Programming+with+Data%3A+A+Guide+to+the+S+Language&amp;rft.aulast=Chambers&amp;rft.aufirst=John+M.&amp;rft.au=Chambers%2C%26%2332%3BJohn+M.&amp;rft.date=1998&amp;rft.pages=pp.%26nbsp%3B67%E2%80%9370&amp;rft.pub=Springer+Verlag&amp;rft.isbn=978-0-387-98503-9&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-Amath-CO-19"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-Amath-CO_19-0">^</a></b></span> <span class="reference-text"><span class="citation web">Department of Applied Math, University of Colorado. <a rel="nofollow" class="external text" href="http://amath.colorado.edu/computing/mmm/funcproc.html">"Functional vs. Procedural Programming Language"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://amath.colorado.edu/computing/mmm/funcproc.html">http://amath.colorado.edu/computing/mmm/funcproc.html</a></span><span class="reference-accessdate">. Retrieved 2006-08-28</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functional+vs.+Procedural+Programming+Language&amp;rft.atitle=&amp;rft.aulast=Department+of+Applied+Math%2C+University+of+Colorado&amp;rft.au=Department+of+Applied+Math%2C+University+of+Colorado&amp;rft_id=http%3A%2F%2Famath.colorado.edu%2Fcomputing%2Fmmm%2Ffuncproc.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-Novatchev-20"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-Novatchev_20-0">^</a></b></span> <span class="reference-text"><span class="citation web">Dimitre Novatchev. <a rel="nofollow" class="external text" href="http://www.topxml.com/xsl/articles/fp/">"The Functional Programming Language XSLT — A proof through examples"</a>. <i>TopXML</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.topxml.com/xsl/articles/fp/">http://www.topxml.com/xsl/articles/fp/</a></span><span class="reference-accessdate">. Retrieved May 27, 2006</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Functional+Programming+Language+XSLT%26nbsp%3B%E2%80%94+A+proof+through+examples&amp;rft.atitle=TopXML&amp;rft.aulast=Dimitre+Novatchev&amp;rft.au=Dimitre+Novatchev&amp;rft_id=http%3A%2F%2Fwww.topxml.com%2Fxsl%2Farticles%2Ffp%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-Mertz-21"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-Mertz_21-0">^</a></b></span> <span class="reference-text"><span class="citation web">David Mertz. <a rel="nofollow" class="external text" href="http://gnosis.cx/publish/programming/xml_models_fp.html">"XML Programming Paradigms (part four): Functional Programming approached to XML processing"</a>. <i>IBM developerWorks</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://gnosis.cx/publish/programming/xml_models_fp.html">http://gnosis.cx/publish/programming/xml_models_fp.html</a></span><span class="reference-accessdate">. Retrieved May 27, 2006</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=XML+Programming+Paradigms+%28part+four%29%3A+Functional+Programming+approached+to+XML+processing&amp;rft.atitle=IBM+developerWorks&amp;rft.aulast=David+Mertz&amp;rft.au=David+Mertz&amp;rft_id=http%3A%2F%2Fgnosis.cx%2Fpublish%2Fprogramming%2Fxml_models_fp.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-Opal_.28programming_language.29-22"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-Opal_.28programming_language.29_22-0">^</a></b></span> <span class="reference-text"><a href="http://en.m.wikipedia.org/wiki/Opal_(programming_language)" title="Opal (programming language)">OPtimized Applicative Language</a></span></li>
<li id="cite_note-Chamberlin_Boyce-23"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-Chamberlin_Boyce_23-0">^</a></b></span> <span class="reference-text"><span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/Donald_D._Chamberlin" title="Donald D. Chamberlin">Donald D. Chamberlin</a> and <a href="http://en.m.wikipedia.org/wiki/Raymond_F._Boyce" title="Raymond F. Boyce">Raymond F. Boyce</a> (1974). "SEQUEL: A structured English query language". <i>Proceedings of the 1974 ACM SIGFIDET</i>: 249–264.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=SEQUEL%3A+A+structured+English+query+language&amp;rft.jtitle=Proceedings+of+the+1974+ACM+SIGFIDET&amp;rft.aulast=%5B%5BDonald+D.+Chamberlin%5D%5D+and+%5B%5BRaymond+F.+Boyce%5D%5D&amp;rft.au=%5B%5BDonald+D.+Chamberlin%5D%5D+and+%5B%5BRaymond+F.+Boyce%5D%5D&amp;rft.date=1974&amp;rft.pages=249%E2%80%93264&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-24"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-24">^</a></b></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Mark_Jason_Dominus" title="Mark Jason Dominus">Dominus, Mark J.</a> (2005). <i><a href="http://en.m.wikipedia.org/wiki/Higher-Order_Perl" title="Higher-Order Perl">Higher-Order Perl</a></i>. <a href="http://en.m.wikipedia.org/wiki/Morgan_Kaufmann" title="Morgan Kaufmann" class="mw-redirect">Morgan Kaufmann</a>. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/1-55860-701-3" title="Special:BookSources/1-55860-701-3">1-55860-701-3</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BHigher-Order+Perl%5D%5D&amp;rft.aulast=Dominus&amp;rft.aufirst=Mark+J.&amp;rft.au=Dominus%2C%26%2332%3BMark+J.&amp;rft.date=2005&amp;rft.pub=%5B%5BMorgan+Kaufmann%5D%5D&amp;rft.isbn=1-55860-701-3&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-25"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-25">^</a></b></span> <span class="reference-text"><span class="citation book">Curry, Haskell Brooks; Robert Feys and Craig, William (1958). <i>Combinatory Logic. Volume I</i>. Amsterdam: North-Holland Publishing Company.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Combinatory+Logic.+Volume+I&amp;rft.aulast=Curry&amp;rft.aufirst=Haskell+Brooks&amp;rft.au=Curry%2C%26%2332%3BHaskell+Brooks&amp;rft.date=1958&amp;rft.place=Amsterdam&amp;rft.pub=North-Holland+Publishing+Company&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-26"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-26">^</a></b></span> <span class="reference-text"><span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">McCarthy, John</a> (June 1978). <a rel="nofollow" class="external text" href="http://citeseer.ist.psu.edu/mccarthy78history.html">"History of Lisp"</a>. <i>In <a href="Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a> SIGPLAN History of Programming Languages Conference</i>: 217–223. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F800025.808387">10.1145/800025.808387</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://citeseer.ist.psu.edu/mccarthy78history.html">http://citeseer.ist.psu.edu/mccarthy78history.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=History+of+Lisp&amp;rft.jtitle=In+%5B%5BAssociation+for+Computing+Machinery%7CACM%5D%5D+SIGPLAN+History+of+Programming+Languages+Conference&amp;rft.aulast=McCarthy&amp;rft.aufirst=John&amp;rft.au=McCarthy%2C%26%2332%3BJohn&amp;rft.date=June+1978&amp;rft.pages=217%E2%80%93223&amp;rft_id=info:doi/10.1145%2F800025.808387&amp;rft_id=http%3A%2F%2Fciteseer.ist.psu.edu%2Fmccarthy78history.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-27"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-27">^</a></b></span> <span class="reference-text">The memoir of <a href="http://en.m.wikipedia.org/wiki/Herbert_A._Simon" title="Herbert A. Simon">Herbert A. Simon</a> (1991), <i>Models of My Life</i> pp.189-190 <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0465046401" class="internal mw-magiclink-isbn">ISBN 0-465-04640-1</a> claims that he, Al Newell, and Cliff Shaw are "commonly adjudged to be the parents of [the] artificial intelligence [field]", for writing <a href="http://en.m.wikipedia.org/wiki/Logic_Theorist" title="Logic Theorist">Logic Theorist</a>, a program which proved theorems from <i><a href="http://en.m.wikipedia.org/wiki/Principia_Mathematica" title="Principia Mathematica">Principia Mathematica</a></i> automatically. In order to accomplish this, they had to invent a language and a paradigm which, which viewed retrospectively, embeds functional programming.</span></li>
<li id="cite_note-28"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-28">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://www.stanford.edu/class/cs242/readings/backus.pdf">http://www.stanford.edu/class/cs242/readings/backus.pdf</a></span></li>
<li id="cite_note-29"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-29">^</a></b></span> <span class="reference-text"><span class="citation web">Dick Pountain. <a rel="nofollow" class="external text" href="http://www.byte.com/art/9408/sec11/art1.htm">"Functional Programming Comes of Age"</a>. <i>BYTE.com (August 1994)</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.byte.com/art/9408/sec11/art1.htm">http://www.byte.com/art/9408/sec11/art1.htm</a></span><span class="reference-accessdate">. Retrieved August 31, 2006</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functional+Programming+Comes+of+Age&amp;rft.atitle=BYTE.com+%28August+1994%29&amp;rft.aulast=Dick+Pountain&amp;rft.au=Dick+Pountain&amp;rft_id=http%3A%2F%2Fwww.byte.com%2Fart%2F9408%2Fsec11%2Fart1.htm&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-totalfp-30"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-totalfp_30-0">^</a></b></span> <span class="reference-text"><span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/David_Turner_(computer_scientist)" title="David Turner (computer scientist)">Turner, D.A.</a> (2004-07-28). <a rel="nofollow" class="external text" href="http://www.jucs.org/jucs_10_7/total_functional_programming">"Total Functional Programming"</a>. <i>Journal of Universal Computer Science</i> <b>10</b> (7): 751–768. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.3217%2Fjucs-010-07-0751">10.3217/jucs-010-07-0751</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.jucs.org/jucs_10_7/total_functional_programming">http://www.jucs.org/jucs_10_7/total_functional_programming</a></span></span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Total+Functional+Programming&amp;rft.jtitle=Journal+of+Universal+Computer+Science&amp;rft.aulast=Turner&amp;rft.aufirst=D.A.&amp;rft.au=Turner%2C%26%2332%3BD.A.&amp;rft.date=2004-07-28&amp;rft.volume=10&amp;rft.issue=7&amp;rft.pages=751%E2%80%93768&amp;rft_id=info:doi/10.3217%2Fjucs-010-07-0751&amp;rft_id=http%3A%2F%2Fwww.jucs.org%2Fjucs_10_7%2Ftotal_functional_programming&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-31"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-31">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://research.microsoft.com/~simonpj/papers/slpj-book-1987/index.htm">The Implementation of Functional Programming Languages. Simon Peyton Jones, published by Prentice Hall, 1987</a></span></li>
<li id="cite_note-32"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-32">^</a></b></span> <span class="reference-text"><span class="citation web" id="CITEREFHughes1984"><a href="http://en.m.wikipedia.org/wiki/John_Hughes_(computer_scientist)" title="John Hughes (computer scientist)">Hughes, John</a> (1984). <a rel="nofollow" class="external text" href="http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html">"Why Functional Programming Matters"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html">http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Why+Functional+Programming+Matters&amp;rft.atitle=&amp;rft.aulast=Hughes&amp;rft.aufirst=John&amp;rft.au=Hughes%2C%26%2332%3BJohn&amp;rft.date=1984&amp;rft_id=http%3A%2F%2Fwww.cse.chalmers.se%2F%7Erjmh%2FPapers%2Fwhyfp.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-launchbury1993-33"><span class="mw-cite-backlink">^ <a href="Functional_programming#cite_ref-launchbury1993_33-0"><sup><i><b>a</b></i></sup></a> <a href="Functional_programming#cite_ref-launchbury1993_33-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation web">John Launchbury (1993). <a rel="nofollow" class="external text" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016">"A Natural Semantics for Lazy Evaluation"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.2016</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+Natural+Semantics+for+Lazy+Evaluation&amp;rft.atitle=&amp;rft.aulast=John+Launchbury&amp;rft.au=John+Launchbury&amp;rft.date=1993&amp;rft_id=http%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.35.2016&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-34"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-34">^</a></b></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Robert_Harper_(computer_scientist)" title="Robert Harper (computer scientist)">Robert W. Harper</a> (2009). <a rel="nofollow" class="external text" href="http://www.cs.cmu.edu/~rwh/plbook/book.pdf"><i>Practical Foundations for Programming Languages</i></a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.cs.cmu.edu/~rwh/plbook/book.pdf">http://www.cs.cmu.edu/~rwh/plbook/book.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Practical+Foundations+for+Programming+Languages&amp;rft.aulast=Robert+W.+Harper&amp;rft.au=Robert+W.+Harper&amp;rft.date=2009&amp;rft_id=http%3A%2F%2Fwww.cs.cmu.edu%2F%7Erwh%2Fplbook%2Fbook.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-35"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-35">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://compcert.inria.fr/doc/index.html">"The Compcert verified compiler"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://compcert.inria.fr/doc/index.html">http://compcert.inria.fr/doc/index.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Compcert+verified+compiler&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fcompcert.inria.fr%2Fdoc%2Findex.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-36"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-36">^</a></b></span> <span class="reference-text"><span class="citation web">Simon Peyton Jones, Dimitrios Vytiniotis, Stephanie Weirich, and Geoffrey Washburn. <a rel="nofollow" class="external text" href="http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/">"Simple unification-based type inference for GADTs"</a>. <i>ICFP 2006</i>. pp. 50–61<span class="printonly">. <a rel="nofollow" class="external free" href="http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/">http://research.microsoft.com/en-us/um/people/simonpj/papers/gadt/</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Simple+unification-based+type+inference+for+GADTs&amp;rft.atitle=ICFP+2006&amp;rft.aulast=Simon+Peyton+Jones%2C+Dimitrios+Vytiniotis%2C+Stephanie+Weirich%2C+and+Geoffrey+Washburn&amp;rft.au=Simon+Peyton+Jones%2C+Dimitrios+Vytiniotis%2C+Stephanie+Weirich%2C+and+Geoffrey+Washburn&amp;rft.pages=pp.%26nbsp%3B50%E2%80%9361&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2Fpapers%2Fgadt%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-37"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-37">^</a></b></span> <span class="reference-text"><span class="citation web">Andrew Kennedy and Claudio Russo (October 2005). <a rel="nofollow" class="external text" href="http://research.microsoft.com/~akenn/generics/gadtoop.pdf">"Generalized Algebraic Data Types and Object-Oriented Programming"</a>. <i>OOPSLA</i>. San Diego, California<span class="printonly">. <a rel="nofollow" class="external free" href="http://research.microsoft.com/~akenn/generics/gadtoop.pdf">http://research.microsoft.com/~akenn/generics/gadtoop.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Generalized+Algebraic+Data+Types+and+Object-Oriented+Programming&amp;rft.atitle=OOPSLA&amp;rft.aulast=Andrew+Kennedy+and+Claudio+Russo&amp;rft.au=Andrew+Kennedy+and+Claudio+Russo&amp;rft.date=October+2005&amp;rft.place=San+Diego%2C+California&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2F%7Eakenn%2Fgenerics%2Fgadtoop.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span> <a rel="nofollow" class="external text" href="http://lambda-the-ultimate.org/node/1134">source of citation</a></span></li>
<li id="cite_note-38"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-38">^</a></b></span> <span class="reference-text"><span class="citation Journal">Hartel, Pieter; Henk Muller and Hugh Glaser (March 2004). <a rel="nofollow" class="external text" href="http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf">"The Functional C experience"</a> (PDF). <i>The Journal of Functional Programming</i> <b>14</b> (2): 129–135. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1017%2FS0956796803004817">10.1017/S0956796803004817</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf">http://www.ub.utwente.nl/webdocs/ctit/1/00000084.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+Functional+C+experience&amp;rft.jtitle=The+Journal+of+Functional+Programming&amp;rft.aulast=Hartel&amp;rft.aufirst=Pieter&amp;rft.au=Hartel%2C%26%2332%3BPieter&amp;rft.date=March+2004&amp;rft.volume=14&amp;rft.issue=2&amp;rft.pages=129%E2%80%93135&amp;rft_id=info:doi/10.1017%2FS0956796803004817&amp;rft_id=http%3A%2F%2Fwww.ub.utwente.nl%2Fwebdocs%2Fctit%2F1%2F00000084.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span>; <span class="citation web">David Mertz. <a rel="nofollow" class="external text" href="http://www-128.ibm.com/developerworks/linux/library/l-prog3.html">"Functional programming in Python, Part 3"</a>. <i>IBM developerWorks</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://www-128.ibm.com/developerworks/linux/library/l-prog3.html">http://www-128.ibm.com/developerworks/linux/library/l-prog3.html</a></span><span class="reference-accessdate">. Retrieved 2006-09-17</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functional+programming+in+Python%2C+Part+3&amp;rft.atitle=IBM+developerWorks&amp;rft.aulast=David+Mertz&amp;rft.au=David+Mertz&amp;rft_id=http%3A%2F%2Fwww-128.ibm.com%2Fdeveloperworks%2Flinux%2Flibrary%2Fl-prog3.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span>(<a rel="nofollow" class="external text" href="http://www-128.ibm.com/developerworks/library/l-prog.html">Part 1</a>, <a rel="nofollow" class="external text" href="http://www-128.ibm.com/developerworks/library/l-prog2.html">Part 2</a>)</span></li>
<li id="cite_note-39"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-39">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.digitalmars.com/d/2.0/function.html#pure-functions">"Functions — D Programming Language 2.0"</a>. Digital Mars<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.digitalmars.com/d/2.0/function.html#pure-functions">http://www.digitalmars.com/d/2.0/function.html#pure-functions</a></span><span class="reference-accessdate">. Retrieved 2011-06-20</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functions%26nbsp%3B%E2%80%94+D+Programming+Language+2.0&amp;rft.atitle=&amp;rft.pub=Digital+Mars&amp;rft_id=http%3A%2F%2Fwww.digitalmars.com%2Fd%2F2.0%2Ffunction.html%23pure-functions&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-40"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-40">^</a></b></span> <span class="reference-text"><span class="citation web"><a href="http://en.m.wikipedia.org/wiki/Guido_van_Rossum" title="Guido van Rossum">van Rossum, Guido</a> (2005-03-10). <a rel="nofollow" class="external text" href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196">"The fate of reduce() in Python 3000"</a>. Artima.com<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196">http://www.artima.com/weblogs/viewpost.jsp?thread=98196</a></span><span class="reference-accessdate">. Retrieved 2012-09-27</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+fate+of+reduce%28%29+in+Python+3000&amp;rft.atitle=&amp;rft.aulast=van+Rossum&amp;rft.aufirst=Guido&amp;rft.au=van+Rossum%2C%26%2332%3BGuido&amp;rft.date=2005-03-10&amp;rft.pub=Artima.com&amp;rft_id=http%3A%2F%2Fwww.artima.com%2Fweblogs%2Fviewpost.jsp%3Fthread%3D98196&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-41"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-41">^</a></b></span> <span class="reference-text"><span class="citation web"><a href="http://en.m.wikipedia.org/wiki/Guido_van_Rossum" title="Guido van Rossum">van Rossum, Guido</a> (2009-04-21). <a rel="nofollow" class="external text" href="http://python-history.blogspot.de/2009/04/origins-of-pythons-functional-features.html">"Origins of Python's "Functional" Features"</a>. <a rel="nofollow" class="external text" href="http://python-history.blogspot.de/">The History of Python</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://python-history.blogspot.de/2009/04/origins-of-pythons-functional-features.html">http://python-history.blogspot.de/2009/04/origins-of-pythons-functional-features.html</a></span><span class="reference-accessdate">. Retrieved 2012-09-27</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Origins+of+Python%27s+%22Functional%22+Features&amp;rft.atitle=&amp;rft.aulast=van+Rossum&amp;rft.aufirst=Guido&amp;rft.au=van+Rossum%2C%26%2332%3BGuido&amp;rft.date=2009-04-21&amp;rft.pub=%5Bhttp%3A%2F%2Fpython-history.blogspot.de%2F+The+History+of+Python%5D&amp;rft_id=http%3A%2F%2Fpython-history.blogspot.de%2F2009%2F04%2Forigins-of-pythons-functional-features.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-42"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-42">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://docs.python.org/dev/library/functools.html#functools.reduce">"functools — Higher order functions and operations on callable objects"</a>. Python Software Foundation. 2011-07-31<span class="printonly">. <a rel="nofollow" class="external free" href="http://docs.python.org/dev/library/functools.html#functools.reduce">http://docs.python.org/dev/library/functools.html#functools.reduce</a></span><span class="reference-accessdate">. Retrieved 2011-07-31</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=functools+%E2%80%94+Higher+order+functions+and+operations+on+callable+objects&amp;rft.atitle=&amp;rft.date=2011-07-31&amp;rft.pub=Python+Software+Foundation&amp;rft_id=http%3A%2F%2Fdocs.python.org%2Fdev%2Flibrary%2Ffunctools.html%23functools.reduce&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-43"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-43">^</a></b></span> <span class="reference-text"><span class="citation book">Bloch, Joshua. <i>Effective Java</i> (Second ed.). pp. Item 15.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Effective+Java&amp;rft.aulast=Bloch&amp;rft.aufirst=Joshua&amp;rft.au=Bloch%2C%26%2332%3BJoshua&amp;rft.pages=pp.%26nbsp%3BItem+15&amp;rft.edition=Second&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-44"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-44">^</a></b></span> <span class="reference-text"><span class="citation web">Newbern, J.. <a rel="nofollow" class="external text" href="http://monads.haskell.cz/html/index.html/html/">"All About Monads: A comprehensive guide to the theory and practice of monadic programming in Haskell"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://monads.haskell.cz/html/index.html/html/">http://monads.haskell.cz/html/index.html/html/</a></span><span class="reference-accessdate">. Retrieved 2008-02-14</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=All+About+Monads%3A+A+comprehensive+guide+to+the+theory+and+practice+of+monadic+programming+in+Haskell&amp;rft.atitle=&amp;rft.aulast=Newbern&amp;rft.aufirst=J.&amp;rft.au=Newbern%2C%26%2332%3BJ.&amp;rft_id=http%3A%2F%2Fmonads.haskell.cz%2Fhtml%2Findex.html%2Fhtml%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-45"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-45">^</a></b></span> <span class="reference-text"><a href="http://en.m.wikipedia.org/wiki/Lawrence_Paulson" title="Lawrence Paulson">Lawrence C. Paulson</a>, <i>ML for the Working Programmer</i>. Cambridge UP, 1996. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/052156543X" class="internal mw-magiclink-isbn">ISBN 0-521-56543-X</a>.</span></li>
<li id="cite_note-Spiewak-46"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-Spiewak_46-0">^</a></b></span> <span class="reference-text"><span class="citation web">Pawel Spiewak. <a rel="nofollow" class="external text" href="http://www.codecommit.com/blog/scala/implementing-persistent-vectors-in-scala">"Implementing Persistent Vectors in Scala"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.codecommit.com/blog/scala/implementing-persistent-vectors-in-scala">http://www.codecommit.com/blog/scala/implementing-persistent-vectors-in-scala</a></span><span class="reference-accessdate">. Retrieved Apr 17, 2012</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Implementing+Persistent+Vectors+in+Scala&amp;rft.atitle=&amp;rft.aulast=Pawel+Spiewak&amp;rft.au=Pawel+Spiewak&amp;rft_id=http%3A%2F%2Fwww.codecommit.com%2Fblog%2Fscala%2Fimplementing-persistent-vectors-in-scala&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-47"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-47">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://shootout.alioth.debian.org/u32/benchmark.php?test=all&amp;lang=all&amp;d=data&amp;calc=calculate&amp;gcc=on&amp;clean=on&amp;sbcl=on&amp;ocaml=on&amp;ghc=on&amp;fsharp=on&amp;hipe=on&amp;mzscheme=on">"Boxplot Summary | Computer Language Benchmarks Game"</a>. Shootout.alioth.debian.org<span class="printonly">. <a rel="nofollow" class="external free" href="http://shootout.alioth.debian.org/u32/benchmark.php?test=all&amp;lang=all&amp;d=data&amp;calc=calculate&amp;gcc=on&amp;clean=on&amp;sbcl=on&amp;ocaml=on&amp;ghc=on&amp;fsharp=on&amp;hipe=on&amp;mzscheme=on">http://shootout.alioth.debian.org/u32/benchmark.php?test=all&amp;lang=all&amp;d=data&amp;calc=calculate&amp;gcc=on&amp;clean=on&amp;sbcl=on&amp;ocaml=on&amp;ghc=on&amp;fsharp=on&amp;hipe=on&amp;mzscheme=on</a></span><span class="reference-accessdate">. Retrieved 2011-06-20</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Boxplot+Summary+%26%23124%3B+Computer+Language+Benchmarks+Game&amp;rft.atitle=&amp;rft.pub=Shootout.alioth.debian.org&amp;rft_id=http%3A%2F%2Fshootout.alioth.debian.org%2Fu32%2Fbenchmark.php%3Ftest%3Dall%26lang%3Dall%26d%3Ddata%26calc%3Dcalculate%26gcc%3Don%26clean%3Don%26sbcl%3Don%26ocaml%3Don%26ghc%3Don%26fsharp%3Don%26hipe%3Don%26mzscheme%3Don&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-48"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-48">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://book.realworldhaskell.org/read/profiling-and-optimization.html#x_eK1">"Chapter 25. Profiling and optimization"</a>. Book.realworldhaskell.org<span class="printonly">. <a rel="nofollow" class="external free" href="http://book.realworldhaskell.org/read/profiling-and-optimization.html#x_eK1">http://book.realworldhaskell.org/read/profiling-and-optimization.html#x_eK1</a></span><span class="reference-accessdate">. Retrieved 2011-06-20</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Chapter+25.+Profiling+and+optimization&amp;rft.atitle=&amp;rft.pub=Book.realworldhaskell.org&amp;rft_id=http%3A%2F%2Fbook.realworldhaskell.org%2Fread%2Fprofiling-and-optimization.html%23x_eK1&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-programmingScala-49"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-programmingScala_49-0">^</a></b></span> <span class="reference-text"><span class="citation book">Odersky, Martin; Spoon, Lex; Venners, Bill (December 13, 2010). <a rel="nofollow" class="external text" href="http://www.artima.com/shop/programming_in_scala_2ed"><i>Programming in Scala: A Comprehensive Step-by-step Guide</i></a> (2nd ed.). <span class="new" title="Artima Inc (page does not exist)">Artima Inc</span>. pp. 883/852. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-9815316-4-9" title="Special:BookSources/978-0-9815316-4-9">978-0-9815316-4-9</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.artima.com/shop/programming_in_scala_2ed">http://www.artima.com/shop/programming_in_scala_2ed</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Programming+in+Scala%3A+A+Comprehensive+Step-by-step+Guide&amp;rft.aulast=Odersky&amp;rft.aufirst=Martin&amp;rft.au=Odersky%2C%26%2332%3BMartin&amp;rft.au=Spoon%2C%26%2332%3BLex&amp;rft.au=Venners%2C%26%2332%3BBill&amp;rft.date=December+13%2C+2010&amp;rft.pages=pp.%26nbsp%3B883%2F852&amp;rft.edition=2nd&amp;rft.pub=%5B%5BArtima+Inc%5D%5D&amp;rft.isbn=978-0-9815316-4-9&amp;rft_id=http%3A%2F%2Fwww.artima.com%2Fshop%2Fprogramming_in_scala_2ed&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-50"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-50">^</a></b></span> <span class="reference-text"><span class="citation book">Piro, Christopher (2009). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2009/abstracts.html#ChristopherPiroEugeneLetuchy">"Functional Programming at Facebook"</a>. CUFP 2009<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2009/abstracts.html#ChristopherPiroEugeneLetuchy">http://cufp.galois.com/2009/abstracts.html#ChristopherPiroEugeneLetuchy</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functional+Programming+at+Facebook&amp;rft.atitle=&amp;rft.aulast=Piro&amp;rft.aufirst=Christopher&amp;rft.au=Piro%2C%26%2332%3BChristopher&amp;rft.date=2009&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2009%2Fabstracts.html%23ChristopherPiroEugeneLetuchy&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-Sim-Diasca-51"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-Sim-Diasca_51-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://research.edf.com/research-and-the-scientific-community/software/sim-diasca-80704.html">"Sim-Diasca: a large-scale discrete event concurrent simulation engine in Erlang"</a>. November 2011<span class="printonly">. <a rel="nofollow" class="external free" href="http://research.edf.com/research-and-the-scientific-community/software/sim-diasca-80704.html">http://research.edf.com/research-and-the-scientific-community/software/sim-diasca-80704.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Sim-Diasca%3A+a+large-scale+discrete+event+concurrent+simulation+engine+in+Erlang&amp;rft.atitle=&amp;rft.date=November+2011&amp;rft_id=http%3A%2F%2Fresearch.edf.com%2Fresearch-and-the-scientific-community%2Fsoftware%2Fsim-diasca-80704.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-52"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-52">^</a></b></span> <span class="reference-text"><span class="citation book">Momtahan, Lee (2009). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2009/abstracts.html#LeeMomtahan">"Scala at EDF Trading: Implementing a Domain-Specific Language for Derivative Pricing with Scala"</a>. CUFP 2009<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2009/abstracts.html#LeeMomtahan">http://cufp.galois.com/2009/abstracts.html#LeeMomtahan</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Scala+at+EDF+Trading%3A+Implementing+a+Domain-Specific+Language+for+Derivative+Pricing+with+Scala&amp;rft.atitle=&amp;rft.aulast=Momtahan&amp;rft.aufirst=Lee&amp;rft.au=Momtahan%2C%26%2332%3BLee&amp;rft.date=2009&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2009%2Fabstracts.html%23LeeMomtahan&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-53"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-53">^</a></b></span> <span class="reference-text"><span class="citation web">Graham, Paul (2003). <a rel="nofollow" class="external text" href="http://www.paulgraham.com/avg.html">"Beating the Averages"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.paulgraham.com/avg.html">http://www.paulgraham.com/avg.html</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Beating+the+Averages&amp;rft.atitle=&amp;rft.aulast=Graham&amp;rft.aufirst=Paul&amp;rft.au=Graham%2C%26%2332%3BPaul&amp;rft.date=2003&amp;rft_id=http%3A%2F%2Fwww.paulgraham.com%2Favg.html&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-54"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-54">^</a></b></span> <span class="reference-text"><span class="citation book">Sims, Steve (2006). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2006/slides/SteveSims.pdf">"Building a Startup with Standard ML"</a>. CUFP 2006<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2006/slides/SteveSims.pdf">http://cufp.galois.com/2006/slides/SteveSims.pdf</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Building+a+Startup+with+Standard+ML&amp;rft.atitle=&amp;rft.aulast=Sims&amp;rft.aufirst=Steve&amp;rft.au=Sims%2C%26%2332%3BSteve&amp;rft.date=2006&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2006%2Fslides%2FSteveSims.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-55"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-55">^</a></b></span> <span class="reference-text"><span class="citation book">Laurikari, Ville (2007). <a rel="nofollow" class="external text" href="http://cufp.galois.com/2007/abstracts.html#VilleLaurikari">"Functional Programming in Communications Security."</a>. CUFP 2007<span class="printonly">. <a rel="nofollow" class="external free" href="http://cufp.galois.com/2007/abstracts.html#VilleLaurikari">http://cufp.galois.com/2007/abstracts.html#VilleLaurikari</a></span><span class="reference-accessdate">. Retrieved 2009-08-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Functional+Programming+in+Communications+Security.&amp;rft.atitle=&amp;rft.aulast=Laurikari&amp;rft.aufirst=Ville&amp;rft.au=Laurikari%2C%26%2332%3BVille&amp;rft.date=2007&amp;rft_id=http%3A%2F%2Fcufp.galois.com%2F2007%2Fabstracts.html%23VilleLaurikari&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
<li id="cite_note-56"><span class="mw-cite-backlink"><b><a href="Functional_programming#cite_ref-56">^</a></b></span> <span class="reference-text"><span class="citation web">Lorimer, R. J.. <a rel="nofollow" class="external text" href="http://www.infoq.com/news/2009/01/clojure_production">"Live Production Clojure Application Announced"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.infoq.com/news/2009/01/clojure_production">http://www.infoq.com/news/2009/01/clojure_production</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Live+Production+Clojure+Application+Announced&amp;rft.atitle=&amp;rft.aulast=Lorimer&amp;rft.aufirst=R.+J.&amp;rft.au=Lorimer%2C%26%2332%3BR.+J.&amp;rft_id=http%3A%2F%2Fwww.infoq.com%2Fnews%2F2009%2F01%2Fclojure_production&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></span></li>
</ol></div>
<h2> <span class="mw-headline" id="Further_reading">Further reading</span></h2>
<ul><li><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Hal_Abelson" title="Hal Abelson">Abelson, Hal</a>; <a href="http://en.m.wikipedia.org/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Sussman, Gerald Jay</a> (1985). <a rel="nofollow" class="external text" href="http://mitpress.mit.edu/sicp/"></a><a href="http://en.m.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></span>. MIT Press<span class="printonly">. <a rel="nofollow" class="external free" href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a></span>.<span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BStructure+and+Interpretation+of+Computer+Programs%5D%5D&amp;rft.aulast=Abelson&amp;rft.aufirst=Hal&amp;rft.au=Abelson%2C%26%2332%3BHal&amp;rft.au=Sussman%2C%26%2332%3BGerald+Jay&amp;rft.date=1985&amp;rft.pub=MIT+Press&amp;rft_id=http%3A%2F%2Fmitpress.mit.edu%2Fsicp%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></li>
<li>Cousineau, Guy and Michel Mauny. <i>The Functional Approach to Programming</i>. Cambridge, UK: <a href="http://en.m.wikipedia.org/wiki/Cambridge_University_Press" title="Cambridge University Press">Cambridge University Press</a>, 1998.</li>
<li>Curry, Haskell Brooks and Feys, Robert and Craig, William. <i>Combinatory Logic</i>. Volume I. North-Holland Publishing Company, Amsterdam, 1958.</li>
<li><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Haskell_Curry" title="Haskell Curry">Curry, Haskell B.</a>; <a href="http://en.m.wikipedia.org/wiki/J._Roger_Hindley" title="J. Roger Hindley">Hindley, J. Roger</a>; <span class="new" title="Jonathan P. Seldin (page does not exist)">Seldin, Jonathan P.</span> (1972). <i>Combinatory Logic</i>. <b>Vol. II</b>. Amsterdam: North Holland. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-7204-2208-6" title="Special:BookSources/0-7204-2208-6">0-7204-2208-6</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Combinatory+Logic&amp;rft.aulast=Curry&amp;rft.aufirst=Haskell+B.&amp;rft.au=Curry%2C%26%2332%3BHaskell+B.&amp;rft.au=Hindley%2C%26%2332%3BJ.+Roger&amp;rft.au=Seldin%2C%26%2332%3BJonathan+P.&amp;rft.date=1972&amp;rft.volume=Vol.+II&amp;rft.place=Amsterdam&amp;rft.pub=North+Holland&amp;rft.isbn=0-7204-2208-6&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></li>
<li><a href="http://en.m.wikipedia.org/wiki/Mark_Jason_Dominus" title="Mark Jason Dominus">Dominus, Mark Jason</a>. <i><a href="http://en.m.wikipedia.org/wiki/Higher-Order_Perl" title="Higher-Order Perl">Higher-Order Perl</a></i>. <a href="http://en.m.wikipedia.org/wiki/Morgan_Kaufmann" title="Morgan Kaufmann" class="mw-redirect">Morgan Kaufmann</a>. 2005.</li>
<li><span class="citation book">Felleisen, Matthias; Findler, Robert; Flatt, Matthew; Krishnamurthi, Shriram (2001). <a rel="nofollow" class="external text" href="http://www.htdp.org"></a><a href="http://en.m.wikipedia.org/wiki/How_to_Design_Programs" title="How to Design Programs">How to Design Programs</a></span>. MIT Press<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.htdp.org">http://www.htdp.org</a></span>.<span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BHow+to+Design+Programs%5D%5D&amp;rft.aulast=Felleisen&amp;rft.aufirst=Matthias&amp;rft.au=Felleisen%2C%26%2332%3BMatthias&amp;rft.au=Findler%2C%26%2332%3BRobert&amp;rft.au=Flatt%2C%26%2332%3BMatthew&amp;rft.au=Krishnamurthi%2C%26%2332%3BShriram&amp;rft.date=2001&amp;rft.pub=MIT+Press&amp;rft_id=http%3A%2F%2Fwww.htdp.org&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></li>
<li>Graham, Paul. <i>ANSI Common LISP</i>. Englewood Cliffs, New Jersey: <a href="Prentice_Hall" title="Prentice Hall">Prentice Hall</a>, 1996.</li>
<li>MacLennan, Bruce J. <i>Functional Programming: Practice and Theory</i>. Addison-Wesley, 1990.</li>
<li><span class="citation book">O'Sullivan, Brian; Stewart, Don; Goerzen, John (2008). <a rel="nofollow" class="external text" href="http://book.realworldhaskell.org/read/"><i>Real World Haskell</i></a>. O'Reilly<span class="printonly">. <a rel="nofollow" class="external free" href="http://book.realworldhaskell.org/read/">http://book.realworldhaskell.org/read/</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Real+World+Haskell&amp;rft.aulast=O%27Sullivan&amp;rft.aufirst=Brian&amp;rft.au=O%27Sullivan%2C%26%2332%3BBrian&amp;rft.au=Stewart%2C%26%2332%3BDon&amp;rft.au=Goerzen%2C%26%2332%3BJohn&amp;rft.date=2008&amp;rft.pub=O%27Reilly&amp;rft_id=http%3A%2F%2Fbook.realworldhaskell.org%2Fread%2F&amp;rfr_id=info:sid/en.wikipedia.org:Functional_programming"><span style="display: none;"> </span></span></li>
<li>Pratt, Terrence, W. and Marvin V. Zelkowitz. <i>Programming Languages: Design and Implementation</i>. 3rd ed. Englewood Cliffs, New Jersey: <a href="Prentice_Hall" title="Prentice Hall">Prentice Hall</a>, 1996.</li>
<li>Salus, Peter H. <i>Functional and Logic Programming Languages</i>. Vol. 4 of Handbook of Programming Languages. Indianapolis, Indiana: <span class="new" title="Macmillan Technical Publishing (page does not exist)">Macmillan Technical Publishing</span>, 1998.</li>
<li>Thompson, Simon. <i>Haskell: The Craft of Functional Programming</i>. Harlow, England: <span class="new" title="Addison-Wesley Longman Limited (page does not exist)">Addison-Wesley Longman Limited</span>, 1996.</li>
</ul><h2> <span class="mw-headline" id="External_links">External links</span></h2>
<div id="section_SpokenWikipedia" class="infobox sisterproject plainlinks haudio">
<div style="text-align: center; white-space:nowrap"><b>Listen to this article</b> (<a href="http://en.m.wikipedia.org/wiki/File:En-Functional_programming.ogg" title="File:En-Functional programming.ogg">info/dl</a>)
<div class="center">
<div class="floatnone">
<div class="mediaContainer" style="position:relative;display:block;width:200px"><audio id="mwe_player_0" style="width:200px;height:23px" poster="//bits.wikimedia.org/static-1.21wmf3/skins/common/images/icons/fileicon-ogg.png" controls="" preload="none" class="kskin" data-durationhint="1678.0480725624" data-startoffset="0" data-mwtitle="En-Functional_programming.ogg" data-mwprovider="wikimediacommons"><source src="//upload.wikimedia.org/wikipedia/commons/8/83/En-Functional_programming.ogg" data-title="Original ogg, 0 × 0 (69kbps)" data-shorttitle="Ogg source" data-width="0" data-height="0" data-bandwidth="69182"></source>Sorry, your browser either has JavaScript disabled or does not have any supported player.<br>
You can <a href="http://upload.wikimedia.org/wikipedia/commons/8/83/En-Functional_programming.ogg">download the clip</a> or <a href="http://www.mediawiki.org/wiki/Extension:TimedMediaHandler/Client_download">download a player</a> to play the clip in your browser.</audio></div>
</div>
</div>
</div>
<div style="float: left; margin-left: 5px;">
<div class="floatnone"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/45px-Sound-icon.svg.png" width="45" height="34" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/68px-Sound-icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/90px-Sound-icon.svg.png 2x"></div>
</div>
<div style="font-size: xx-small; line-height: 1.6em; margin-left: 60px;">This audio file was created from a revision of the "<span class="fn">Functional programming</span>" article dated 2011-08-25, and does not reflect subsequent edits to the article. (<a href="http://en.m.wikipedia.org/wiki/Wikipedia:Media_help" title="Wikipedia:Media help">Audio help</a>)</div>
<div style="text-align: center; clear: both"><b><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Spoken_articles" title="Wikipedia:Spoken articles">More spoken articles</a></b></div>
</div>
<div style="right:30px; display:none;" class="metadata topicon" id="spoken-icon"><a href="http://en.m.wikipedia.org/wiki/File:En-Functional_programming.ogg" title="File:En-Functional programming.ogg"><img alt="Sound-icon.svg" src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/15px-Sound-icon.svg.png" width="15" height="11" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/23px-Sound-icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/30px-Sound-icon.svg.png 2x"></a></div>
<ul><li><a rel="nofollow" class="external text" href="http://www.defmacro.org/ramblings/fp.html">Functional Programming for the Rest of Us</a> An introduction by Slava Akhmechet</li>
<li><i>Functional programming in Python</i> (by David Mertz): <a rel="nofollow" class="external text" href="http://gnosis.cx/publish/programming/charming_python_13.html">part 1</a>, <a rel="nofollow" class="external text" href="http://gnosis.cx/publish/programming/charming_python_16.html">part 2</a>, <a rel="nofollow" class="external text" href="http://gnosis.cx/publish/programming/charming_python_19.html">part 3</a></li>
</ul><table cellspacing="0" class="navbox" style="border-spacing:0;;"><tr><td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;;"><tr><th scope="col" style=";" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul><li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Types_of_programming_languages" title="Template:Types of programming languages"><span title="View this template" style=";;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Types_of_programming_languages" title="Template talk:Types of programming languages"><span title="Discuss this template" style=";;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Types_of_programming_languages&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;">e</span></a></li>
</ul></div>
<div class="" style="font-size:110%;"><a href="Programming_paradigm" title="Programming paradigm">Types of programming languages</a></div>
</th>
</tr><tr style="height:2px;"><td></td>
</tr><tr><td colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Array_programming" title="Array programming">Array</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="Assembly_language" title="Assembly language">Assembly</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Compiled_language" title="Compiled language">Compiled</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Concurrent_computing" title="Concurrent computing">Concurrent</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Data-structured_language" title="Data-structured language">Data-structured</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Declarative_programming" title="Declarative programming">Declarative</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Domain-specific_language" title="Domain-specific language">Domain-specific</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Esoteric_programming_language" title="Esoteric programming language">Esoteric</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Extensible_programming" title="Extensible programming">Extensible</a></li>
<li><strong class="selflink">Functional</strong></li>
<li><a href="http://en.m.wikipedia.org/wiki/High-level_programming_language" title="High-level programming language">High-level</a></li>
<li><a href="Imperative_programming" title="Imperative programming">Imperative</a></li>
<li><a href="Interpreted_language" title="Interpreted language">Interpreted</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Logic_programming" title="Logic programming">Logic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Low-level_programming_language" title="Low-level programming language">Low-level</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Machine_code" title="Machine code">Machine</a></li>
<li><a href="Macro_(computer_science)" title="Macro (computer science)">Macro</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language" class="mw-redirect">Multi-paradigm</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Non-English-based_programming_languages" title="Non-English-based programming languages">Non-English-based</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Object-based_language" title="Object-based language">Object-based</a></li>
<li><a href="Object-oriented_programming" title="Object-oriented programming">Object-oriented</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Off-side_rule" title="Off-side rule">Off-side rule</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Pipeline_programming" title="Pipeline programming">Pipeline</a></li>
<li><a href="Procedural_programming" title="Procedural programming">Procedural</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">Reflective</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Rule-based_system" title="Rule-based system">Rule-based</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Scripting_language" title="Scripting language">Scripting</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Synchronous_programming_language" title="Synchronous programming language">Synchronous</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Very_high-level_programming_language" title="Very high-level programming language">Very high-level</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Visual_programming_language" title="Visual programming language">Visual</a></li>
</ul></div>
</td>
</tr></table></td>
</tr></table>						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 37 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://ar.m.wikipedia.org/wiki/%D8%A8%D8%B1%D9%85%D8%AC%D8%A9_%D9%88%D8%B8%D9%8A%D9%81%D9%8A%D8%A9" lang="ar" hreflang="ar">العربية</a></li><li><a href="http://bn.m.wikipedia.org/wiki/%E0%A6%AB%E0%A6%BE%E0%A6%82%E0%A6%B6%E0%A6%A8%E0%A6%AD%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%A4%E0%A6%BF%E0%A6%95_%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A7%8B%E0%A6%97%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%AE%E0%A6%BF%E0%A6%82" lang="bn" hreflang="bn">বাংলা</a></li><li><a href="http://bg.m.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D0%BD%D0%BE_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D0%BD%D0%B5" lang="bg" hreflang="bg">български</a></li><li><a href="http://bs.m.wikipedia.org/wiki/Funkcionalno_programiranje" lang="bs" hreflang="bs">bosanski</a></li><li><a href="http://ca.m.wikipedia.org/wiki/Programaci%C3%B3_funcional" lang="ca" hreflang="ca">català</a></li><li><a href="http://cs.m.wikipedia.org/wiki/Funkcion%C3%A1ln%C3%AD_programov%C3%A1n%C3%AD" lang="cs" hreflang="cs">česky</a></li><li><a href="http://da.m.wikipedia.org/wiki/Funktionsprogrammering" lang="da" hreflang="da">dansk</a></li><li><a href="http://de.m.wikipedia.org/wiki/Funktionale_Programmierung" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://et.m.wikipedia.org/wiki/Funktsionaalne_programmeerimine" lang="et" hreflang="et">eesti</a></li><li><a href="http://el.m.wikipedia.org/wiki/%CE%A3%CF%85%CE%BD%CE%B1%CF%81%CF%84%CE%B7%CF%83%CE%B9%CE%B1%CE%BA%CF%8C%CF%82_%CF%80%CF%81%CE%BF%CE%B3%CF%81%CE%B1%CE%BC%CE%BC%CE%B1%CF%84%CE%B9%CF%83%CE%BC%CF%8C%CF%82" lang="el" hreflang="el">Ελληνικά</a></li><li><a href="http://es.m.wikipedia.org/wiki/Programaci%C3%B3n_funcional" lang="es" hreflang="es">español</a></li><li><a href="http://fa.m.wikipedia.org/wiki/%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87%E2%80%8C%D9%86%D9%88%DB%8C%D8%B3%DB%8C_%D8%AA%D8%A7%D8%A8%D8%B9%DB%8C" lang="fa" hreflang="fa">فارسی</a></li><li><a href="http://fr.m.wikipedia.org/wiki/Programmation_fonctionnelle" lang="fr" hreflang="fr">français</a></li><li><a href="http://gl.m.wikipedia.org/wiki/Programaci%C3%B3n_funcional" lang="gl" hreflang="gl">galego</a></li><li><a href="http://ko.m.wikipedia.org/wiki/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D" lang="ko" hreflang="ko">한국어</a></li><li><a href="http://hr.m.wikipedia.org/wiki/Funkcijsko_programiranje" lang="hr" hreflang="hr">hrvatski</a></li><li><a href="http://id.m.wikipedia.org/wiki/Pemrograman_Fungsional" lang="id" hreflang="id">Bahasa Indonesia</a></li><li><a href="http://it.m.wikipedia.org/wiki/Programmazione_funzionale" lang="it" hreflang="it">italiano</a></li><li><a href="http://he.m.wikipedia.org/wiki/%D7%AA%D7%9B%D7%A0%D7%95%D7%AA_%D7%A4%D7%95%D7%A0%D7%A7%D7%A6%D7%99%D7%95%D7%A0%D7%9C%D7%99" lang="he" hreflang="he">עברית</a></li><li><a href="http://ms.m.wikipedia.org/wiki/Pengaturcaraan_kefungsian" lang="ms" hreflang="ms">Bahasa Melayu</a></li><li><a href="http://nl.m.wikipedia.org/wiki/Functioneel_programmeren" lang="nl" hreflang="nl">Nederlands</a></li><li><a href="http://ja.m.wikipedia.org/wiki/%E9%96%A2%E6%95%B0%E5%9E%8B%E8%A8%80%E8%AA%9E" lang="ja" hreflang="ja">日本語</a></li><li><a href="http://pl.m.wikipedia.org/wiki/Programowanie_funkcyjne" lang="pl" hreflang="pl">polski</a></li><li><a href="http://pt.m.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_funcional" lang="pt" hreflang="pt">português</a></li><li><a href="http://ro.m.wikipedia.org/wiki/Programare_func%C8%9Bional%C4%83" lang="ro" hreflang="ro">română</a></li><li><a href="http://rue.m.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D1%96%D0%BE%D0%BD%D0%B0%D0%BB%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D2%91%D1%80%D0%B0%D0%BC%D0%BE%D0%B2%D0%B0%D0%BD%D1%8F" lang="rue" hreflang="rue">русиньскый</a></li><li><a href="http://ru.m.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" lang="ru" hreflang="ru">русский</a></li><li><a href="http://sk.m.wikipedia.org/wiki/Funkcion%C3%A1lne_programovanie" lang="sk" hreflang="sk">slovenčina</a></li><li><a href="http://sr.m.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D0%BD%D0%BE_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%B8%D1%80%D0%B0%D1%9A%D0%B5" lang="sr" hreflang="sr">српски / srpski</a></li><li><a href="http://sh.m.wikipedia.org/wiki/Funkcijsko_programiranje" lang="sh" hreflang="sh">srpskohrvatski / српскохрватски</a></li><li><a href="http://fi.m.wikipedia.org/wiki/Funktionaalinen_ohjelmointi" lang="fi" hreflang="fi">suomi</a></li><li><a href="http://sv.m.wikipedia.org/wiki/Funktionell_programmering" lang="sv" hreflang="sv">svenska</a></li><li><a href="http://ta.m.wikipedia.org/wiki/%E0%AE%AA%E0%AE%A3%E0%AE%BF%E0%AE%AE%E0%AF%81%E0%AE%B1%E0%AF%88_%E0%AE%A8%E0%AE%BF%E0%AE%B0%E0%AE%B2%E0%AF%8D_%E0%AE%AE%E0%AF%8A%E0%AE%B4%E0%AE%BF" lang="ta" hreflang="ta">தமிழ்</a></li><li><a href="http://tr.m.wikipedia.org/wiki/Fonksiyonel_programlama" lang="tr" hreflang="tr">Türkçe</a></li><li><a href="http://uk.m.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D1%96%D0%B9%D0%BD%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F" lang="uk" hreflang="uk">українська</a></li><li><a href="http://vi.m.wikipedia.org/wiki/L%E1%BA%ADp_tr%C3%ACnh_h%C3%A0m" lang="vi" hreflang="vi">Tiếng Việt</a></li><li><a href="http://zh.m.wikipedia.org/wiki/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80" lang="zh" hreflang="zh">中文</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia ®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Functional_programming&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Functional_programming&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Functional+programming&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>