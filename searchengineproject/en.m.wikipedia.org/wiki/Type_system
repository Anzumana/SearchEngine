<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>Type system - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Type system","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Type_system" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Type+system"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">Type system</h1>			
<table class="metadata plainlinks ambox ambox-style ambox-technical" style=""><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/60px-Edit-clear.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/80px-Edit-clear.svg.png 2x"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article <b>may be too <a href="http://en.wiktionary.org/wiki/technical#Adjective" class="extiw" title="wikt:technical">technical</a> for most readers to understand</b>. <span class="hide-when-compact">Please help <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit">improve</a> this article to <a href="http://en.m.wikipedia.org/wiki/Wikipedia:Make_technical_articles_understandable" title="Wikipedia:Make technical articles understandable">make it understandable to non-experts</a>, without removing the technical details. The <a href="http://en.m.wikipedia.org/wiki/Talk:Type_system" title="Talk:Type system">talk page</a> may contain suggestions.</span> <small><i>(October 2010)</i></small> </span></td>
</tr></table>
<table class="metadata plainlinks ambox ambox-style ambox-More_footnotes" style=""><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/60px-Text_document_with_red_question_mark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/80px-Text_document_with_red_question_mark.svg.png 2x"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article includes a <a href="Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, but <b>its sources remain unclear because it has insufficient <a href="http://en.m.wikipedia.org/wiki/Wikipedia:INCITE" title="Wikipedia:INCITE" class="mw-redirect">inline citations</a></b>. <span class="hide-when-compact">Please help to <a href="http://en.m.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by <a href="http://en.m.wikipedia.org/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">introducing</a> more precise citations.</span> <small><i>(October 2010)</i></small> </span></td>
</tr></table>
<table class="vertical-navbox nowraplinks" cellspacing="5" style="float: right; clear: right; background-color: #f9f9f9; border: 1px solid #aaa; width:auto; margin: 0 0 1em 1em; padding: 0.2em; border-spacing: 0.4em 0; text-align: center; line-height: 1.4em; font-size: 88%;" cellpadding="0">
<tr>
<th class="" style="padding: 0.2em 0.4em 0.2em; font-size: 145%; line-height: 1.2em; background:#CCCCFF"><strong class="selflink">Type systems</strong></th>
</tr>
<tr>
<td class="plainlist" style="padding-top: 0.2em; padding-bottom: 0.2em; text-align:left;">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Type_safety" title="Type safety">Type safety</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Type_inference" title="Type inference">Inferred</a> vs. <a href="Manifest_typing" title="Manifest typing">Manifest</a>
</li>
<li>
<a href="Type_system#Dynamic_typing" title="Type system">Dynamic</a> vs. <a href="Type_system#Static_typing" title="Type system">Static</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Strong_typing" title="Strong typing">Strong</a> vs. <a href="Weak_typing" title="Weak typing">Weak</a>
</li>
<li>
<a href="Nominative_type_system" title="Nominative type system">Nominal</a> vs. <a href="http://en.m.wikipedia.org/wiki/Structural_type_system" title="Structural type system">Structural</a>
</li>
<li><a href="http://en.m.wikipedia.org/wiki/Dependent_type" title="Dependent type">Dependent typing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Duck_typing" title="Duck typing">Duck typing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Latent_typing" title="Latent typing">Latent typing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Substructural_type_systems" title="Substructural type systems" class="mw-redirect">Substructural typing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Uniqueness_type" title="Uniqueness type">Uniqueness typing</a></li>
</ul>
</td>
</tr>
<tr>
<td style="text-align: right; font-size: 115%;">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Type_systems" title="Template:Type systems"><span title="View this template" style="">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Type_systems" title="Template talk:Type systems"><span title="Discuss this template" style="">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Type_systems&amp;action=edit"><span title="Edit this template" style="">e</span></a></li>
</ul>
</div>
</td>
</tr>
</table>
<p>A <b>type system</b> associates a <i><a href="http://en.m.wikipedia.org/wiki/Datatype" title="Datatype" class="mw-redirect">type</a></i> with each computed value. By examining the flow of these values, a type system attempts to ensure or prove that no <i><a href="http://en.m.wikipedia.org/wiki/Type_error" title="Type error" class="mw-redirect">type errors</a></i> can occur. The particular type system in question determines exactly what constitutes a type error, but in general the aim is to prevent operations expecting a certain kind of value from being used with values for which that operation does not make sense (<a href="http://en.m.wikipedia.org/wiki/Logic_error" title="Logic error">logic errors</a>); <a href="http://en.m.wikipedia.org/wiki/Memory_error" title="Memory error" class="mw-redirect">memory errors</a> will also be prevented. Type systems are often specified as part of <a href="Programming_language" title="Programming language">programming languages</a>, and built into the interpreters and compilers for them; although they can also be implemented as <a href="http://en.m.wikipedia.org/wiki/Extended_static_checking" title="Extended static checking">optional tools</a>.</p>
<p>In <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, a <b>type system</b> may be defined as "a tractable <a href="Syntax_(programming_languages)" title="Syntax (programming languages)">syntactic</a> framework for classifying phrases according to the kinds of <a href="http://en.m.wikipedia.org/wiki/Value_(computer_science)" title="Value (computer science)">values</a> they compute".<sup id="cite_ref-pierce2002_1-0" class="reference"><a href="Type_system#cite_note-pierce2002-1"><span>[</span>1<span>]</span></a></sup></p>
<p>A <a href="Compiler" title="Compiler">compiler</a> may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> compilers the <i>float</i> <a href="Data_type" title="Data type">data type</a>, for example, is represented in 32 <a href="Bit" title="Bit">bits</a>, in accord with the <a href="http://en.m.wikipedia.org/wiki/IEEE_754-2008" title="IEEE 754-2008" class="mw-redirect">IEEE specification for single-precision floating point numbers</a>. They will thus use floating-point-specific <a href="http://en.m.wikipedia.org/wiki/Instruction_set" title="Instruction set">microprocessor operations</a> on those values (floating-point addition, multiplication, etc.).</p>
<p>The depth of type constraints and the manner of their evaluation affect the <i>typing</i> of the language. A <a href="Programming_language" title="Programming language">programming language</a> may further associate an operation with varying concrete algorithms on each type in the case of <a href="Type_polymorphism" title="Type polymorphism" class="mw-redirect">type polymorphism</a>. <a href="http://en.m.wikipedia.org/wiki/Type_theory" title="Type theory">Type theory</a> is the study of type systems, although the concrete type systems of programming languages originate from practical issues of computer architecture, compiler implementation, and language design.</p>
<h2> <span class="mw-headline" id="Fundamentals">Fundamentals</span>
</h2>
<p>Formally, <a href="http://en.m.wikipedia.org/wiki/Type_theory" title="Type theory">type theory</a> studies type systems. A programming language must have occurrence to type check using the <i>type system</i> whether at compiler time or runtime, manually annotated or automatically inferred. As <span class="new" title="Mark Manasse (page does not exist)">Mark Manasse</span> concisely put it:<sup id="cite_ref-2" class="reference"><a href="Type_system#cite_note-2"><span>[</span>2<span>]</span></a></sup></p>
<blockquote class="templatequote">
<div class="Bug6200">The fundamental problem addressed by a type theory is to ensure that programs have meaning. The fundamental problem caused by a type theory is that meaningful programs may not have meanings ascribed to them. The quest for richer type systems results from this tension.</div>
</blockquote>
<p>Assigning a data type, what is called <i>typing</i>, gives meaning to a sequences of <a href="Bit" title="Bit">bits</a> such as a value in <a href="Computer_memory" title="Computer memory">memory</a> or some <a href="http://en.m.wikipedia.org/wiki/Object_(computer_science)" title="Object (computer science)">object</a> such as a <a href="http://en.m.wikipedia.org/wiki/Variable_(computer_science)" title="Variable (computer science)">variable</a>. The hardware of a <a href="http://en.m.wikipedia.org/wiki/General_purpose_computer" title="General purpose computer" class="mw-redirect">general purpose computer</a> is unable to discriminate between for example a <a href="http://en.m.wikipedia.org/wiki/Memory_address" title="Memory address">memory address</a> and an <a href="http://en.m.wikipedia.org/wiki/Instruction_code_(programming)" title="Instruction code (programming)" class="mw-redirect">instruction code</a>, or between a <a href="http://en.m.wikipedia.org/wiki/Character_(computing)" title="Character (computing)">character</a>, an <a href="http://en.m.wikipedia.org/wiki/Integer" title="Integer">integer</a>, or a <a href="Floating-point_number" title="Floating-point number" class="mw-redirect">floating-point number</a>, because it makes no intrinsic distinction between any of the possible values of a sequence of bits might <i>mean</i>. Associating a sequence of bits with a type conveys that <a href="http://en.wiktionary.org/wiki/meaning" class="extiw" title="wikt:meaning">meaning</a> to the programmable hardware to form a <i><a href="http://en.m.wikipedia.org/wiki/Symbolic_system" title="Symbolic system">symbolic system</a></i> composed of that hardware and some programmer.</p>
<p>A program associates each value with at least one particular type, but it also occurs also that a one value is associated with many <a href="http://en.m.wikipedia.org/wiki/Subtype" title="Subtype" class="mw-redirect">subtypes</a>. Other entities, such as <a href="http://en.m.wikipedia.org/wiki/Object_(computer_science)" title="Object (computer science)">objects</a>, <a href="http://en.m.wikipedia.org/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modules</a>, communication channels, <a href="http://en.m.wikipedia.org/wiki/Dependency_(computer_science)" title="Dependency (computer science)" class="mw-redirect">dependencies</a> can become associated with a type. Even a type can become associated with a type. An implementation of some <i>type system</i> could in theory associate some identifications named this way:</p>
<ul>
<li>
<a href="Data_type" title="Data type">data type</a> – a type of a value</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Class_(computer_science)" title="Class (computer science)" class="mw-redirect">class</a> – a type of an object</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Kind_(type_theory)" title="Kind (type theory)">kind (type theory)</a> – a <i>type of a type</i>, or metatype</li>
</ul>
<p>These are the kinds of abstractions typing can go through on a hierarchy of levels contained in a system.</p>
<p>When a programming language evolves a more elaborate type system, it gains a more finely-grained rule set than basic type checking, but this comes at a price when the type inferences (and other properties) become <a href="http://en.m.wikipedia.org/wiki/Undecidable_problem" title="Undecidable problem">undecidable</a>, and when more attention must be paid by the programmer to annotate code or to consider computer-related operations and functioning. It is challenging to find a sufficiently expressive type system that satisfies all programming practices in <a href="http://en.m.wikipedia.org/wiki/Type_safe" title="Type safe" class="mw-redirect">type safe</a> manner.</p>
<p>The more type restrictions that are imposed by the compiler, the more <i>strongly typed</i> a programming language is. Strongly typed languages often require the programmer to make explicit conversions in contexts where an implicit conversion would cause no harm. Pascal's type system has been described as "too strong" because, for example, the size of an array or string is part of its type, making some programming tasks difficult.<sup id="cite_ref-3" class="reference"><a href="Type_system#cite_note-3"><span>[</span>3<span>]</span></a></sup><sup id="cite_ref-4" class="reference"><a href="Type_system#cite_note-4"><span>[</span>4<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> is also strongly typed but its types are automatically inferred so that explicit conversions are unnecessary.</p>
<p>A programming language compiler can also implement a <i><a href="http://en.m.wikipedia.org/wiki/Dependent_type" title="Dependent type">dependent type</a></i> or an <i><a href="http://en.m.wikipedia.org/wiki/Effect_system" title="Effect system">effect system</a></i>, which enables even more program specifications to be verified by a type checker. Beyond simple value-type pairs, a virtual "region" of code is associated with an "effect" component describing <i>what</i> is being done <i>with what</i>, and enabling for example to "throw" an error report. Thus the symbolic system may be a <i>type and effect system</i>, which endows it with more safety checking than type checking alone.</p>
<p>Whether automated by the compiler or specified by a programmer, a type system makes program behavior illegal that is outside the type-system rules. Advantages provided by programmer-specified type systems include:</p>
<ul>
<li>
<i>Abstraction</i> (or <i>modularity</i>) – Types enable programmers to think at a higher level than the bit or byte, not bothering with low-level implementation. For example, programmers can begin to think of a string as a collection of character values instead of as a mere array of bytes. Higher still, types enable programmers to think about and express <a href="http://en.m.wikipedia.org/wiki/Interface_(computer_science)" title="Interface (computer science)" class="mw-redirect">interfaces</a> between two of <i>any</i>-sized subsystems. This enables more levels of localization so that the definitions required for interoperability of the subsystems remain consistent when those two subsystems communicate.</li>
<li>
<i>Documentation</i> – In more expressive type systems, types can serve as a form of <a href="http://en.m.wikipedia.org/wiki/Documentation" title="Documentation">documentation</a> clarifying the intent of the programmer. For instance, if a programmer declares a function as returning a timestamp type, this documents the function when the timestamp type can be explicitly declared deeper in the code to be integer type.</li>
</ul>
<p>Advantages provided by compiler-specified type systems include:</p>
<ul>
<li>
<i>Optimization</i> – Static type-checking may provide useful compile-time information. For example, if a type requires that a value must align in memory at a multiple of four bytes, the compiler may be able to use more efficient machine instructions.</li>
<li>
<i>Safety</i> – A type system enables the <a href="Compiler" title="Compiler">compiler</a> to detect meaningless or probably invalid code. For example, we can identify an expression <code>3 / "Hello, World"</code> as invalid, when the rules do not specify how to divide an <a href="http://en.m.wikipedia.org/wiki/Integer" title="Integer">integer</a> by a <a href="String_(computer_science)" title="String (computer science)">string</a>. Strong typing offers more safety, but cannot guarantee complete <i><a href="http://en.m.wikipedia.org/wiki/Type_safety" title="Type safety">type safety</a></i>.</li>
</ul>
<p>Type safety contributes to <a href="http://en.m.wikipedia.org/wiki/Program_correctness" title="Program correctness" class="mw-redirect">program correctness</a>, but can only guarantee correctness at the expense of making the type checking itself an <a href="http://en.m.wikipedia.org/wiki/Undecidable_problem" title="Undecidable problem">undecidable problem</a>. In a <i>type system</i> with automated type checking a program may prove to run incorrectly yet be safely typed, and produce no compiler errors. Division by zero is an unsafe and incorrect operation, but a type checker running only at <a href="http://en.m.wikipedia.org/wiki/Compile_time" title="Compile time">compile time</a> doesn't scan for <a href="http://en.m.wikipedia.org/wiki/Division_by_zero" title="Division by zero">division by zero</a> in most programming languages, and then it is left as a <a href="http://en.m.wikipedia.org/wiki/Runtime_error" title="Runtime error" class="mw-redirect">runtime error</a>. To prove the absence of these more-general-than-types defects, other kinds of <a href="http://en.m.wikipedia.org/wiki/Formal_method" title="Formal method" class="mw-redirect">formal methods</a>, collectively known as <a href="http://en.m.wikipedia.org/wiki/Program_analysis_(computer_science)" title="Program analysis (computer science)" class="mw-redirect">program analyses</a>, are in common use. In addition <a href="http://en.m.wikipedia.org/wiki/Software_testing" title="Software testing">software testing</a> is an <a href="http://en.m.wikipedia.org/wiki/Empirical" title="Empirical">empirical</a> method for finding errors that the type checker cannot detect.</p>
<h2> <span class="mw-headline" id="Type_checking">Type checking</span>
</h2>
<p>The process of verifying and enforcing the constraints of types – <i>type checking</i> – may occur either at <a href="http://en.m.wikipedia.org/wiki/Compile-time" title="Compile-time" class="mw-redirect">compile-time</a> (a static check) or <a href="Run_time_(program_lifecycle_phase)" title="Run time (program lifecycle phase)">run-time</a> (a dynamic check). If a language specification requires its typing rules strongly (i.e., more or less allowing only those automatic type conversions that do not lose information), one can refer to the process as <i>strongly typed</i>, if not, as <i>weakly typed</i>. The terms are not usually used in a strict sense.</p>
<h3> <span class="mw-headline" id="Static_typing">Static typing</span>
</h3>
<p>A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time. Statically typed languages include <a href="http://en.m.wikipedia.org/wiki/ActionScript" title="ActionScript">ActionScript</a> 3, <a href="http://en.m.wikipedia.org/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a>, <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a>, <a href="D_(programming_language)" title="D (programming language)">D</a>, <a href="http://en.m.wikipedia.org/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a>, <a href="http://en.m.wikipedia.org/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a>, <a href="Fortran" title="Fortran">Fortran</a>, <a href="Go_(programming_language)" title="Go (programming language)">Go</a>, <a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="http://en.m.wikipedia.org/wiki/HaXe" title="HaXe" class="mw-redirect">haXe</a>, <a href="http://en.m.wikipedia.org/wiki/JADE_(programming_language)" title="JADE (programming language)">JADE</a>, <a href="Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="http://en.m.wikipedia.org/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, <a href="Objective-C" title="Objective-C">Objective-C</a>, <a href="http://en.m.wikipedia.org/wiki/OCaml" title="OCaml">OCaml</a>, <a href="Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>, <a href="Seed7" title="Seed7">Seed7</a> and <a href="http://en.m.wikipedia.org/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>. <a href="C++" title="C++">C++</a> is statically typed, aside from its <a href="http://en.m.wikipedia.org/wiki/Run-time_type_information" title="Run-time type information">run-time type information</a> system. The <a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> type system performs static-like compile-time type checking, but also includes full runtime type checking. <a href="Perl" title="Perl">Perl</a> is statically typed with respect to distinguishing arrays, hashes, scalars, and subroutines.</p>
<p>Static typing is a limited form of <a href="http://en.m.wikipedia.org/wiki/Program_verification" title="Program verification" class="mw-redirect">program verification</a> (see <a href="http://en.m.wikipedia.org/wiki/Type_safety" title="Type safety">type safety</a>): accordingly, it allows many type errors to be <a href="http://en.m.wikipedia.org/wiki/Fail-fast" title="Fail-fast">caught early</a> in the development cycle. Static type checkers evaluate only the type information that can be determined at compile time, but are able to verify that the checked conditions hold for all possible executions of the program, which eliminates the need to repeat type checks every time the program is executed. Program execution may also be made more efficient (e.g. faster or taking reduced memory) by omitting runtime type checks and enabling other optimizations.</p>
<p>Because they evaluate type information during compilation and therefore lack type information that is only available at run-time, static type checkers are conservative. They will reject some programs that may be well-behaved at run-time, but that cannot be statically determined to be well-typed. For example, even if an expression <code>&lt;complex test&gt;</code> always evaluates to <code>true</code> at run-time, a program containing the code</p>
<dl>
<dd><code>if &lt;complex test&gt; then &lt;do something&gt; else &lt;type error&gt;</code></dd>
</dl>
<p>will be rejected as ill-typed, because a static analysis cannot determine that the <code>else</code> branch won't be taken.<sup id="cite_ref-pierce2002_1-1" class="reference"><a href="Type_system#cite_note-pierce2002-1"><span>[</span>1<span>]</span></a></sup> The conservative behaviour of static type checkers is advantageous when <code>&lt;complex test&gt;</code> evaluates to <code>false</code> infrequently: A static type checker can detect type errors in rarely used code paths. Without static type checking, even <a href="http://en.m.wikipedia.org/wiki/Code_coverage" title="Code coverage">code coverage</a> tests with 100% coverage may be unable to find such type errors. The tests may fail to detect such type errors, because the combination of all places where values are created and all places where a certain value is used must be taken into account.</p>
<p>The most widely <a href="http://en.m.wikipedia.org/wiki/Tiobe_index" title="Tiobe index" class="mw-redirect">used</a> statically typed languages are not formally <a href="http://en.m.wikipedia.org/wiki/Type_safety" title="Type safety">type safe</a>. They have "<a href="http://en.m.wikipedia.org/wiki/Loopholes" title="Loopholes" class="mw-redirect">loopholes</a>" in the <a href="http://en.m.wikipedia.org/wiki/Programming_language_specification" title="Programming language specification">programming language specification</a> enabling programmers to write code that circumvents the verification performed by a static type checker and so address a wider range of problems. For example, most C-style languages have <a href="Type_punning" title="Type punning">type punning</a>, and Haskell has such features as <code>unsafePerformIO</code>: such operations may be unsafe at runtime, in that they can cause unwanted behaviour due to incorrect typing of values when the program runs.</p>
<h3> <span class="mw-headline" id="Dynamic_typing">Dynamic typing</span>
</h3>
<p>A programming language is said to be dynamically typed when the majority of its type checking is performed at run-time as opposed to at compile-time. In dynamic typing values have types, but variables do not; that is, a variable can refer to a value of any type. Dynamically typed languages include <a href="http://en.m.wikipedia.org/wiki/APL_(programming_language)" title="APL (programming language)">APL</a>, <a href="http://en.m.wikipedia.org/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a>, <a href="http://en.m.wikipedia.org/wiki/Groovy_(programming_language)" title="Groovy (programming language)">Groovy</a>, <a href="JavaScript" title="JavaScript">JavaScript</a>, <a href="http://en.m.wikipedia.org/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, <a href="http://en.m.wikipedia.org/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a>, <a href="MATLAB" title="MATLAB">MATLAB</a>, <a href="http://en.m.wikipedia.org/wiki/GNU_Octave" title="GNU Octave">GNU Octave</a>, <a href="Perl" title="Perl">Perl</a> (for user-defined types, but not built-in types), <a href="PHP" title="PHP">PHP</a>, <a href="http://en.m.wikipedia.org/wiki/Pick_operating_system" title="Pick operating system">Pick BASIC</a>, <a href="http://en.m.wikipedia.org/wiki/Prolog_(programming_language)" title="Prolog (programming language)" class="mw-redirect">Prolog</a>, <a href="Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="http://en.m.wikipedia.org/wiki/R_(programming_language)" title="R (programming language)">R</a>, <a href="http://en.m.wikipedia.org/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, <a href="Smalltalk" title="Smalltalk">Smalltalk</a> and <a href="http://en.m.wikipedia.org/wiki/Tcl" title="Tcl">Tcl</a>.</p>
<p>Implementations of dynamically typed languages generally associate run-time objects with "tags" containing their type information. This run-time classification is then used to implement type checks and dispatch <a href="http://en.m.wikipedia.org/wiki/Function_overloading" title="Function overloading">overloaded</a> functions, but can also enable pervasive uses of <a href="http://en.m.wikipedia.org/wiki/Dynamic_dispatch" title="Dynamic dispatch">dynamic dispatch</a>, <a href="http://en.m.wikipedia.org/wiki/Late_binding" title="Late binding">late binding</a> and similar idioms that would be cumbersome at best in a statically typed language, requiring the use of <a href="http://en.m.wikipedia.org/wiki/Variant_type" title="Variant type">variant types</a> or similar features.</p>
<p>More broadly, as explained <a href="Type_system#Static_and_dynamic_type_checking_in_practice">below</a>, dynamic typing can improve support for <a href="http://en.m.wikipedia.org/wiki/Dynamic_programming_language" title="Dynamic programming language">dynamic programming language</a> features, such as generating types and functionality based on run-time data. (Nevertheless, dynamically typed languages need not support any or all such features, and some <i>dynamic programming languages</i> are statically typed.) On the other hand, dynamic typing provides fewer <i>a priori</i> guarantees: a dynamically typed language accepts and attempts to execute some programs that would be ruled as invalid by a static type checker, either due to errors in the program or due to static type checking being too conservative.</p>
<p>Dynamic typing may result in runtime type errors—that is, at runtime, a value may have an unexpected type, and an operation nonsensical for that type is applied. Such errors may occur long after the place where the programming mistake was made—that is, the place where the wrong type of data passed into a place it should not have. This may make the bug difficult to locate.</p>
<p>Dynamically typed language systems' run-time checks can potentially be more sophisticated than those of statically typed languages, as they can use dynamic information as well as any information from the source code. On the other hand, runtime checks only assert that conditions hold in a particular execution of the program, and the checks are repeated for every execution of the program.</p>
<p>Development in dynamically typed languages is often supported by programming practices such as <a href="http://en.m.wikipedia.org/wiki/Unit_testing" title="Unit testing">unit testing</a>. Testing is a key practice in professional software development, and is particularly important in dynamically typed languages. In practice, the testing done to ensure correct program operation can detect a much wider range of errors than static type-checking, but full test coverage over all possible executions of a program (including timing, user inputs, etc.), if even possible, would be extremely costly and impractical. Static typing helps by providing strong guarantees of a particular subset of commonly made errors never occurring.</p>
<h3> <span class="mw-headline" id="Combinations_of_dynamic_and_static_typing">Combinations of dynamic and static typing</span>
</h3>
<p>The presence of static typing in a programming language does not necessarily imply the absence of all dynamic typing mechanisms. For example, Java and some other ostensibly statically typed languages support <a href="http://en.m.wikipedia.org/wiki/Downcasting" title="Downcasting">downcasting</a> and other type operations that depend on runtime type checks, a form of dynamic typing. More generally, most programming languages include mechanisms for dispatching over different 'kinds' of data, such as <a href="http://en.m.wikipedia.org/wiki/Disjoint_union" title="Disjoint union">disjoint unions</a>, <a href="http://en.m.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming">polymorphic objects</a>, and <a href="http://en.m.wikipedia.org/wiki/Variant_type" title="Variant type">variant types</a>: Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See <a href="Programming_language" title="Programming language">programming language</a> for more discussion of the interactions between static and dynamic typing.</p>
<p>Certain languages, for example <a href="http://en.m.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>, <a href="http://en.m.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, or <a href="http://en.m.wikipedia.org/wiki/Cython" title="Cython">Cython</a>, are dynamically typed by default, but allow this behaviour to be overridden through the use of explicit type hints that result in static typing. One reason to use such hints would be to achieve the performance benefits of static typing in performance-sensitive parts of code.</p>
<p>As of the 4.0 Release, the .NET Framework supports a variant of dynamic typing via the <a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/dd233052(VS.100).aspx">System.Dynamic namespace</a> whereby a <i>static</i> object of type 'dynamic' is a placeholder for the .NET runtime to interrogate its dynamic facilities to resolve the object reference.</p>
<h3> <span class="mw-headline" id="Static_and_dynamic_type_checking_in_practice">Static and dynamic type checking in practice</span>
</h3>
<p>The choice between static and dynamic typing requires <a href="http://en.m.wikipedia.org/wiki/Trade-off" title="Trade-off">trade-offs</a>.</p>
<p>Static typing can find type errors reliably at compile time. This should increase the reliability of the delivered program. However, programmers disagree over how commonly type errors occur, and thus disagree over the proportion of those bugs that are coded that would be caught by appropriately representing the designed types in code. Static typing advocates believe programs are more reliable when they have been well type-checked, while dynamic typing advocates point to distributed code that has proven reliable and to small bug databases. The value of static typing, then, presumably increases as the strength of the type system is increased. Advocates of <a href="http://en.m.wikipedia.org/wiki/Dependent_type" title="Dependent type">dependently typed languages</a> such as <a href="http://en.m.wikipedia.org/wiki/Dependent_ML" title="Dependent ML">Dependent ML</a> and <a href="http://en.m.wikipedia.org/wiki/Epigram_(programming_language)" title="Epigram (programming language)">Epigram</a> have suggested that almost all bugs can be considered type errors, if the types used in a program are properly declared by the programmer or correctly inferred by the compiler.<sup id="cite_ref-5" class="reference"><a href="Type_system#cite_note-5"><span>[</span>5<span>]</span></a></sup></p>
<p>Static typing usually results in compiled code that executes more quickly. When the compiler knows the exact data types that are in use, it can produce optimized machine code. Further, compilers for statically typed languages can find assembler shortcuts more easily. Some dynamically typed languages such as <a href="http://en.m.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> allow optional type declarations for optimization for this very reason. Static typing makes this pervasive. See <a href="http://en.m.wikipedia.org/wiki/Optimization_(computer_science)" title="Optimization (computer science)" class="mw-redirect">optimization</a>.</p>
<p>By contrast, dynamic typing may allow compilers to run more quickly and allow <a href="http://en.m.wikipedia.org/wiki/Language_interpretation" title="Language interpretation">interpreters</a> to dynamically load new code, since changes to source code in dynamically typed languages may result in less checking to perform and less code to revisit. This too may reduce the edit-compile-test-debug cycle.</p>
<p>Statically typed languages that lack <a href="http://en.m.wikipedia.org/wiki/Type_inference" title="Type inference">type inference</a> (such as C and Java) require that programmers declare the types they intend a method or function to use. This can serve as additional documentation for the program, which the compiler will not permit the programmer to ignore or permit to drift out of synchronization. However, a language can be statically typed without requiring type declarations (examples include <a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="http://en.m.wikipedia.org/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>, <a href="http://en.m.wikipedia.org/wiki/OCaml_(programming_language)" title="OCaml (programming language)" class="mw-redirect">OCaml</a>, <a href="http://en.m.wikipedia.org/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a> and to a lesser extent <a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>), so explicit type declaration is not a necessary requirement for static typing in all languages.</p>
<p>Dynamic typing allows constructs that some static type checking would reject as illegal. For example, <i><a href="http://en.m.wikipedia.org/wiki/Eval" title="Eval">eval</a></i> functions, which execute arbitrary data as code, become possible. An <i>eval</i> function is possible with static typing, but requires advanced uses of <a href="http://en.m.wikipedia.org/wiki/GADT" title="GADT" class="mw-redirect">algebraic data types</a>. Furthermore, dynamic typing better accommodates transitional code and prototyping, such as allowing a placeholder data structure (<a href="http://en.m.wikipedia.org/wiki/Mock_object" title="Mock object">mock object</a>) to be transparently used in place of a full-fledged data structure (usually for the purposes of experimentation and testing).</p>
<p>Dynamic typing typically allows <a href="http://en.m.wikipedia.org/wiki/Duck_typing" title="Duck typing">duck typing</a> (which enables <a href="http://en.m.wikipedia.org/wiki/Duck_typing#Comparison_with_other_type_systems" title="Duck typing">easier code reuse</a>). Many languages with static typing also feature <a href="http://en.m.wikipedia.org/wiki/Duck_typing#In_statically_typed_languages" title="Duck typing">duck typing</a> or other mechanisms like <a href="Generic_programming" title="Generic programming">generic programming</a> which also enables easier code reuse.</p>
<p>Dynamic typing typically makes <a href="http://en.m.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a> easier to use. For example, <a href="C++" title="C++">C++</a> <a href="http://en.m.wikipedia.org/wiki/Template_(programming)" title="Template (programming)" class="mw-redirect">templates</a> are typically more cumbersome to write than the equivalent <a href="http://en.m.wikipedia.org/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> or <a href="Python_(programming_language)" title="Python (programming language)">Python</a> code. More advanced run-time constructs such as <a href="http://en.m.wikipedia.org/wiki/Metaclass" title="Metaclass">metaclasses</a> and <a href="http://en.m.wikipedia.org/wiki/Introspection_(computer_science)" title="Introspection (computer science)" class="mw-redirect">introspection</a> are often more difficult to use in statically typed languages. In some languages, such features may also be used e.g. to generate new types and behaviors on the fly, based on run-time data. Such advanced constructs are often provided by <a href="http://en.m.wikipedia.org/wiki/Dynamic_programming_language" title="Dynamic programming language">dynamic programming languages</a>; many of these are dynamically typed, although <i>dynamic typing</i> need not be related to <i>dynamic programming languages</i>.</p>
<h3> <span class="mw-headline" id="Strong_and_weak_typing:_Liskov_Definition">Strong and weak typing: Liskov Definition</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Strong_and_weak_typing" title="Strong and weak typing">Strong and weak typing</a>
</div>
<p>In 1974 Liskov and Zilles described a strong-typed language as one in which "whenever an object is passed from a calling function to a called function, its type must be compatible with the type declared in the called function."<sup id="cite_ref-6" class="reference"><a href="Type_system#cite_note-6"><span>[</span>6<span>]</span></a></sup> Jackson wrote, "In a strongly typed language each data area will have a distinct type and each process will state its communication requirements in terms of these types."<sup id="cite_ref-7" class="reference"><a href="Type_system#cite_note-7"><span>[</span>7<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Strong_and_weak_typing">Strong and weak typing</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Strongly_typed_programming_language" title="Strongly typed programming language" class="mw-redirect">Strongly typed programming language</a>
</div>
<p>A type system is said to feature strong typing when it specifies one or more restrictions on how operations involving values of different data types can be intermixed. A computer language that implements strong typing will prevent the successful execution of an operation on arguments that have the wrong type.</p>
<p><i>Weak typing</i> means that a language implicitly converts (or casts) types when used. Consider the following example:</p>
<pre>
<b>var</b> x := 5;    <i>// (1)</i>  (x is an integer)
<b>var</b> y := "37"; <i>// (2)</i>  (y is a string)
x + y;         <i>// (3)</i>  (?)
</pre>
<p>In a weakly typed language, the result of this operation depends on language-specific rules. <a href="http://en.m.wikipedia.org/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a> would convert the string "37" into the number 37, perform addition, and produce the number 42. <a href="JavaScript" title="JavaScript">JavaScript</a> would convert the number 5 to the string "5", perform string concatenation, and produce the string "537." In JavaScript, the conversion to string is applied regardless of the order of the operands (for example, y + x would be "375") while in <a href="http://en.m.wikipedia.org/wiki/AppleScript" title="AppleScript">AppleScript</a>, the left-most operand determines the type of the result, so that x + y is the number 42 but y + x is the string "375".</p>
<p>In the same manner, due to JavaScript's dynamic type conversions:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="javascript source-javascript">
<pre class="de1">
<span class="kw1">var</span> y <span class="sy0">=</span> <span class="nu0">2</span> <span class="sy0">/</span> <span class="nu0">0</span><span class="sy0">;</span>                        <span class="co1">// y now equals a constant for infinity</span>
y <span class="sy0">==</span> <span class="kw4">Number</span>.<span class="me1">POSITIVE_INFINITY</span>         <span class="co1">// returns true</span>
<span class="kw2">Infinity</span> <span class="sy0">==</span> <span class="kw4">Number</span>.<span class="me1">POSITIVE_INFINITY</span>  <span class="co1">// returns true</span>
<span class="st0">"Infinity"</span> <span class="sy0">==</span> <span class="kw2">Infinity</span>                <span class="co1">// returns true</span>
y <span class="sy0">==</span> <span class="st0">"Infinity"</span>                       <span class="co1">// returns true</span>
</pre>
</div>
</div>
<p>A <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> <a href="Type_conversion" title="Type conversion">cast</a> gone wrong exemplifies the problems that can occur if strong typing is absent: if a programmer casts a value from one type to another in C, not only must the compiler allow the code at compile time, but the runtime must allow it as well. This may permit more compact and faster C code, but it can make <a href="http://en.m.wikipedia.org/wiki/Debugging" title="Debugging">debugging</a> more difficult.</p>
<h3> <span class="mw-headline" id="Safely_and_unsafely_typed_systems">Safely and unsafely typed systems</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Type_safety" title="Type safety">Type safety</a>
</div>
<p>A third way of categorizing the type system of a programming language uses the safety of typed operations and conversions. Computer scientists consider a language "type-safe", if it does not allow operations or conversions that lead to erroneous conditions.</p>
<p>Some observers use the term <i>memory-safe language</i> (or just <i>safe language</i>) to describe languages that do not allow undefined operations to occur. For example, a memory-safe language will <a href="Bounds_checking" title="Bounds checking">check array bounds</a>, or else statically guarantee (i.e., at compile time before execution) that array accesses out of the array boundaries will cause compile-time and perhaps runtime errors.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="vb source-vb">
<pre class="de1">
var x := 5;     // (1)
var y := <span class="st0">"37"</span>;  // (2)
var z := x + y; // (3)
</pre>
</div>
</div>
<p>In languages like <a href="http://en.m.wikipedia.org/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a>, variable <span class="mw-geshi vb source-vb">z</span> in the example acquires the value 42. While the programmer may or may not have intended this, the language defines the result specifically, and the program does not crash or assign an ill-defined value to <span class="mw-geshi vb source-vb">z</span>. In this respect, such languages are type-safe; however, in some languages, if the value of <span class="mw-geshi vb source-vb">y</span> was a string that could not be converted to a number (e.g. "Hello World"), the results would be undefined. Such languages are type-safe (in that they will not crash), but can easily produce undesirable results. In other languages like <a href="JavaScript" title="JavaScript">JavaScript</a>, the numeric operand would be converted to a string, and then concatenation performed. In this case, the results are not undefined and are predictable.</p>
<p>Now let us look at the same example in C:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> x <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>
<span class="kw4">char</span> y<span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"37"</span><span class="sy0">;</span>
<span class="kw4">char</span><span class="sy0">*</span> z <span class="sy0">=</span> x <span class="sy0">+</span> y<span class="sy0">;</span>
</pre>
</div>
</div>
<p>In this example <span class="mw-geshi c source-c">z</span> will point to a memory address five characters beyond <span class="mw-geshi c source-c">y</span>, equivalent to three characters after the terminating zero character of the string pointed to by <span class="mw-geshi c source-c">y</span>. The content of that location is undefined, and might lie outside addressable memory. The mere computation of such a pointer may result in undefined behavior (including the program crashing) according to C standards, and in typical systems <a href="http://en.m.wikipedia.org/wiki/Dereference" title="Dereference" class="mw-redirect">dereferencing</a> z at this point could cause the program to crash. We have a well-typed, but not memory-safe program—a condition that cannot occur in a type-safe language.</p>
<p>In some languages, like <a href="JavaScript" title="JavaScript">JavaScript</a>, the use of special numeric values and constants allows type-safety for mathematical operations without resulting in runtime errors. For example, when dividing a <span class="mw-geshi javascript source-javascript"><span class="kw4">Number</span></span> by a <span class="mw-geshi javascript source-javascript"><span class="kw4">String</span></span>, or a <span class="mw-geshi javascript source-javascript"><span class="kw4">Number</span></span> by zero.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="javascript source-javascript">
<pre class="de1">
<span class="kw1">var</span> x <span class="sy0">=</span> <span class="nu0">32</span><span class="sy0">;</span>
<span class="kw1">var</span> aString <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">String</span><span class="br0">(</span><span class="st0">"A"</span><span class="br0">)</span><span class="sy0">;</span>
x <span class="sy0">=</span> x<span class="sy0">/</span>aString<span class="sy0">;</span>                  <span class="co1">// x now equals the constant NaN, meaning Not A Number</span>
isNaN<span class="br0">(</span>x<span class="br0">)</span><span class="sy0">;</span>                       <span class="co1">// returns true</span>
<span class="kw1">typeof</span><span class="br0">(</span>x<span class="br0">)</span><span class="sy0">;</span>                      <span class="co1">// returns "number"</span>
<span class="kw1">var</span> y <span class="sy0">=</span> <span class="nu0">2</span> <span class="sy0">/</span> <span class="nu0">0</span><span class="sy0">;</span>                  <span class="co1">// y now equals a constant for infinity</span>
y <span class="sy0">==</span> <span class="kw4">Number</span>.<span class="me1">POSITIVE_INFINITY</span><span class="sy0">;</span>  <span class="co1">// returns true</span>
<span class="kw1">typeof</span><span class="br0">(</span>y<span class="br0">)</span><span class="sy0">;</span>                      <span class="co1">// returns "number"</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Variable_levels_of_type_checking">Variable levels of type checking</span>
</h3>
<p>Some languages allow different levels of checking to apply to different regions of code. Examples include:-</p>
<ul>
<li>The <code>use strict</code> directive in <a href="Perl" title="Perl">Perl</a> applies stronger checking.</li>
<li>The <code>@</code> operator in <a href="PHP" title="PHP">PHP</a> suppresses some error messages.</li>
<li>The <code lang="vb" xml:lang="vb">Option Strict On</code> in <a href="http://en.m.wikipedia.org/wiki/VB.NET" title="VB.NET" class="mw-redirect">VB.NET</a> allows the compiler to require a conversion between objects.</li>
</ul>
<p>Additional tools such as <a href="http://en.m.wikipedia.org/wiki/Lint_(software)" title="Lint (software)">lint</a> and <a href="IBM_Rational_Purify" title="IBM Rational Purify">IBM Rational Purify</a> can also be used to achieve a higher level of strictness.</p>
<h3> <span class="mw-headline" id="Optional_type_systems">Optional type systems</span>
</h3>
<p>It has been proposed, chiefly by <a href="http://en.m.wikipedia.org/wiki/Gilad_Bracha" title="Gilad Bracha">Gilad Bracha</a>, that the choice of type system be made independent of choice of language; that a type system should be a module that can be "plugged" into a language as required. He believes this is advantageous, because what he calls mandatory type systems make languages less expressive and code more fragile.<sup id="cite_ref-8" class="reference"><a href="Type_system#cite_note-8"><span>[</span>8<span>]</span></a></sup> The requirement that types do not affect the semantics of the language is difficult to fulfil: for instance, class based inheritance becomes impossible.</p>
<h2> <span class="mw-headline" id="Polymorphism_and_types">Polymorphism and types</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="Type_polymorphism" title="Type polymorphism" class="mw-redirect">Type polymorphism</a>
</div>
<p>The term "polymorphism" refers to the ability of code (in particular, methods or classes) to act on values of multiple types, or to the ability of different instances of the same data structure to contain elements of different types. Type systems that allow polymorphism generally do so in order to improve the potential for code re-use: in a language with polymorphism, programmers need only implement a data structure such as a list or an <a href="http://en.m.wikipedia.org/wiki/Associative_array" title="Associative array">associative array</a> once, rather than once for each type of element with which they plan to use it. For this reason computer scientists sometimes call the use of certain forms of polymorphism <i><a href="Generic_programming" title="Generic programming">generic programming</a></i>. The type-theoretic foundations of polymorphism are closely related to those of <a href="http://en.m.wikipedia.org/wiki/Abstraction_(computer_science)" title="Abstraction (computer science)">abstraction</a>, <a href="http://en.m.wikipedia.org/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modularity</a> and (in some cases) <a href="http://en.m.wikipedia.org/wiki/Subtype" title="Subtype" class="mw-redirect">subtyping</a>.</p>
<h3> <span class="mw-headline" id="Duck_typing">Duck typing</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Duck_typing" title="Duck typing">Duck typing</a>
</div>
<p>In "duck typing",<sup id="cite_ref-9" class="reference"><a href="Type_system#cite_note-9"><span>[</span>9<span>]</span></a></sup> a statement calling a <a href="http://en.m.wikipedia.org/wiki/Method_(computer_science)" title="Method (computer science)" class="mw-redirect">method</a> <code>m</code> on an object does not rely on the declared type of the object; only that the object, of whatever type, must supply an implementation of the method called, when called, at run-time.</p>
<p>Duck typing differs from <a href="http://en.m.wikipedia.org/wiki/Structural_type_system" title="Structural type system">structural typing</a> in that, if the <i>part</i> (of the whole module structure) needed for a given local computation is present <i>at runtime</i>, the duck type system is satisfied in its type identity analysis. On the other hand, a structural type system would require the analysis of the whole module structure at compile time to determine type identity or type dependence.</p>
<p>Duck typing differs from a <a href="Nominative_type_system" title="Nominative type system">nominative type system</a> in a number of aspects. The most prominent ones are that for duck typing, type information is determined at runtime (as contrasted to compile time), and the name of the type is irrelevant to determine type identity or type dependence; only partial structure information is required for that for a given point in the program execution.</p>
<p>Duck typing uses the premise that (referring to a value) "if it walks like a duck, and quacks like a duck, then it is a duck" (this is a reference to the <a href="http://en.m.wikipedia.org/wiki/Duck_test" title="Duck test">duck test</a> that is attributed to <a href="http://en.m.wikipedia.org/wiki/James_Whitcomb_Riley" title="James Whitcomb Riley">James Whitcomb Riley</a>). The term may have been coined<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from January 2011">citation needed</span></a></i>]</sup> by <a href="http://en.m.wikipedia.org/wiki/Alex_Martelli" title="Alex Martelli">Alex Martelli</a> in a 2000 message<sup id="cite_ref-10" class="reference"><a href="Type_system#cite_note-10"><span>[</span>10<span>]</span></a></sup> to the comp.lang.python <a href="http://en.m.wikipedia.org/wiki/Newsgroup" title="Newsgroup" class="mw-redirect">newsgroup</a> (see <a href="Python_(programming_language)" title="Python (programming language)">Python</a>).</p>
<h2> <span class="mw-headline" id="Specialized_type_systems">Specialized type systems</span>
</h2>
<p>Many type systems have been created that are specialized for use in certain environments with certain types of data, or for out-of-band <a href="http://en.m.wikipedia.org/wiki/Static_program_analysis" title="Static program analysis">static program analysis</a>. Frequently, these are based on ideas from formal <a href="http://en.m.wikipedia.org/wiki/Type_theory" title="Type theory">type theory</a> and are only available as part of prototype research systems.</p>
<h3> <span class="mw-headline" id="Dependent_types">Dependent types</span>
</h3>
<p><a href="http://en.m.wikipedia.org/wiki/Dependent_type" title="Dependent type">Dependent types</a> are based on the idea of using scalars or values to more precisely describe the type of some other value. For example, <img class="tex" alt="matrix(3, 3)" src="http://upload.wikimedia.org/math/4/4/2/442f39c4768df0e3042a37a1a13229f1.png"> might be the type of a 3×3 matrix. We can then define typing rules such as the following rule for matrix multiplication:</p>
<p><img class="tex" alt="matrix_{multiply} : matrix(k, m) \times matrix(m, n) \to matrix(k, n)" src="http://upload.wikimedia.org/math/e/e/1/ee17e3cb571b8367a00a0b7dcc68ef72.png"></p>
<p>where <img class="tex" alt="k" src="http://upload.wikimedia.org/math/8/c/e/8ce4b16b22b58894aa86c421e8759df3.png">, <img class="tex" alt="m" src="http://upload.wikimedia.org/math/6/f/8/6f8f57715090da2632453988d9a1501b.png">, <img class="tex" alt="n" src="http://upload.wikimedia.org/math/7/b/8/7b8b965ad4bca0e41ab51de7b31363a1.png"> are arbitrary positive integer values. A variant of <a href="http://en.m.wikipedia.org/wiki/ML_(programming_language)" title="ML (programming language)">ML</a> called <a href="http://en.m.wikipedia.org/wiki/Dependent_ML" title="Dependent ML">Dependent ML</a> has been created based on this type system, but because type checking for conventional dependent types is <a href="http://en.m.wikipedia.org/wiki/Decidable_set" title="Decidable set" class="mw-redirect">undecidable</a>, not all programs using them can be type-checked without some kind of limits. Dependent ML limits the sort of equality it can decide to <a href="http://en.m.wikipedia.org/wiki/Presburger_arithmetic" title="Presburger arithmetic">Presburger arithmetic</a>. Other languages such as <a href="http://en.m.wikipedia.org/wiki/Epigram_(programming_language)" title="Epigram (programming language)">Epigram</a> make the value of all expressions in the language decidable so that type checking can be decidable. It is also possible to make the language<sup class="noprint Inline-Template" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Vagueness" title="Wikipedia:Vagueness"><span title="You can help — from June 2011">vague</span></a></i>]</sup> Turing-complete at the price of undecidable type checking, as in <a href="http://en.m.wikipedia.org/wiki/Cayenne_(programming_language)" title="Cayenne (programming language)">Cayenne</a>.</p>
<h3> <span class="mw-headline" id="Linear_types">Linear types</span>
</h3>
<p><a href="http://en.m.wikipedia.org/wiki/Linear_type" title="Linear type" class="mw-redirect">Linear types</a>, based on the theory of <a href="http://en.m.wikipedia.org/wiki/Linear_logic" title="Linear logic">linear logic</a>, and closely related to <a href="http://en.m.wikipedia.org/wiki/Uniqueness_type" title="Uniqueness type">uniqueness types</a>, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large <a href="http://en.m.wikipedia.org/wiki/Immutable_value" title="Immutable value" class="mw-redirect">immutable values</a> such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object (such as '<code>str = str + "a"</code>') can be optimized "under the hood" into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating <a href="http://en.m.wikipedia.org/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>. They are also used in the prototype operating system <a href="http://en.m.wikipedia.org/wiki/Singularity_(operating_system)" title="Singularity (operating system)">Singularity</a> for interprocess communication, statically ensuring that processes cannot share objects in shared memory in order to prevent race conditions. The <a href="http://en.m.wikipedia.org/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a> language (a <a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>-like language) uses this type system in order to gain a lot of speed<sup class="noprint Inline-Template" style="white-space:nowrap;">[<i><a href="Wikipedia:Verifiability" title="Wikipedia:Verifiability"><span title="The material in the vicinity of this tag may lack enough specific information to be verifiable from June 2011">not specific enough to verify</span></a></i>]</sup> while remaining safe.</p>
<h3> <span class="mw-headline" id="Intersection_types">Intersection types</span>
</h3>
<p><a href="http://en.m.wikipedia.org/wiki/Intersection_type" title="Intersection type" class="mw-redirect">Intersection types</a> are types describing values that belong to <i>both</i> of two other given types with overlapping value sets. For example, in most implementations of C the signed char has range -128 to 127 and the unsigned char has range 0 to 255, so the intersection type of these two types would have range 0 to 127. Such an intersection type could be safely passed into functions expecting <i>either</i> signed or unsigned chars, because it is compatible with both types.</p>
<p>Intersection types are useful for describing overloaded function types: For example, if "<span class="mw-geshi c source-c"><span class="kw4">int</span></span> → <span class="mw-geshi c source-c"><span class="kw4">int</span></span>" is the type of functions taking an integer argument and returning an integer, and "<span class="mw-geshi c source-c"><span class="kw4">float</span></span> → <span class="mw-geshi c source-c"><span class="kw4">float</span></span>" is the type of functions taking a float argument and returning a float, then the intersection of these two types can be used to describe functions that do one or the other, based on what type of input they are given. Such a function could be passed into another function expecting an "<span class="mw-geshi c source-c"><span class="kw4">int</span></span> → <span class="mw-geshi c source-c"><span class="kw4">int</span></span>" function safely; it simply would not use the "<span class="mw-geshi c source-c"><span class="kw4">float</span></span> → <span class="mw-geshi c source-c"><span class="kw4">float</span></span>" functionality.</p>
<p>In a subclassing hierarchy, the intersection of a type and an ancestor type (such as its parent) is the most derived type. The intersection of sibling types is empty.</p>
<p>The Forsythe language includes a general implementation of intersection types. A restricted form is <a href="http://en.m.wikipedia.org/wiki/Refinement_type" title="Refinement type" class="mw-redirect">refinement types</a>.</p>
<h3> <span class="mw-headline" id="Union_types">Union types</span>
</h3>
<p><a href="http://en.m.wikipedia.org/wiki/Union_type" title="Union type" class="mw-redirect">Union types</a> are types describing values that belong to <i>either</i> of two types. For example, in C, the signed char has range -128 to 127, and the unsigned char has range 0 to 255, so the union of these two types would have range -128 to 255. Any function handling this union type would have to deal with integers in this complete range. More generally, the only valid operations on a union type are operations that are valid on <i>both</i> types being unioned. C's "union" concept is similar to union types, but is not typesafe, as it permits operations that are valid on <i>either</i> type, rather than <i>both</i>. Union types are important in program analysis, where they are used to represent symbolic values whose exact nature (e.g., value or type) is not known.</p>
<p>In a subclassing hierarchy, the union of a type and an ancestor type (such as its parent) is the ancestor type. The union of sibling types is a subtype of their common ancestor (that is, all operations permitted on their common ancestor are permitted on the union type, but they may also have other valid operations in common).</p>
<h3> <span class="mw-headline" id="Existential_types">Existential types</span>
</h3>
<p>Existential types are frequently used in connection with <a href="http://en.m.wikipedia.org/wiki/Record_type" title="Record type" class="mw-redirect">record types</a> to represent <a href="http://en.m.wikipedia.org/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modules</a> and <a href="http://en.m.wikipedia.org/wiki/Abstract_data_type" title="Abstract data type">abstract data types</a>, due to their ability to separate implementation from interface. For example, the type "T = ∃X { a: X; f: (X → int); }" describes a module interface that has a data member of type <i>X</i> and a function that takes a parameter of the <i>same</i> type <i>X</i> and returns an integer. This could be implemented in different ways; for example:</p>
<ul>
<li>intT = { a: int; f: (int → int); }</li>
<li>floatT = { a: float; f: (float → int); }</li>
</ul>
<p>These types are both subtypes of the more general existential type T and correspond to concrete implementation types, so any value of one of these types is a value of type T. Given a value "t" of type "T", we know that "t.f(t.a)" is well-typed, regardless of what the abstract type <i>X</i> is. This gives flexibility for choosing types suited to a particular implementation while clients that use only values of the interface type—the existential type—are isolated from these choices.</p>
<p>In general it's impossible for the typechecker to infer which existential type a given module belongs to. In the above example intT { a: int; f: (int → int); } could also have the type ∃X { a: X; f: (int → int); }. The simplest solution is to annotate every module with its intended type, e.g.:</p>
<ul>
<li>intT = { a: int; f: (int → int); } <b>as</b> ∃X { a: X; f: (X → int); }</li>
</ul>
<p>Although abstract data types and modules had been implemented in programming languages for quite some time, it wasn't until 1988 that <a href="http://en.m.wikipedia.org/wiki/John_C._Mitchell" title="John C. Mitchell">John C. Mitchell</a> and <a href="http://en.m.wikipedia.org/wiki/Gordon_Plotkin" title="Gordon Plotkin">Gordon Plotkin</a> established the formal theory under the slogan: "Abstract [data] types have existential type".<sup id="cite_ref-11" class="reference"><a href="Type_system#cite_note-11"><span>[</span>11<span>]</span></a></sup> The theory is a second-order <a href="http://en.m.wikipedia.org/wiki/Typed_lambda_calculus" title="Typed lambda calculus">typed lambda calculus</a> similar to <a href="http://en.m.wikipedia.org/wiki/System_F" title="System F">System F</a>, but with existential instead of universal quantification.</p>
<h2> <span class="mw-headline" id="Explicit_or_implicit_declaration_and_inference">Explicit or implicit declaration and inference</span>
</h2>
<div class="rellink boilerplate seealso">For more details on this topic, see <a href="http://en.m.wikipedia.org/wiki/Type_inference" title="Type inference">Type inference</a>.</div>
<p>Many static type systems, such as those of C and Java, require <i>type declarations</i>: The programmer must explicitly associate each variable with a particular type. Others, such as Haskell's, perform <i><a href="http://en.m.wikipedia.org/wiki/Type_inference" title="Type inference">type inference</a></i>: The compiler draws conclusions about the types of variables based on how programmers use those variables. For example, given a function <span class="mw-geshi java source-java">f<span class="br0">(</span>x, y<span class="br0">)</span></span> that adds <span class="mw-geshi java source-java">x</span> and <span class="mw-geshi java source-java">y</span> together, the compiler can infer that <span class="mw-geshi java source-java">x</span> and <span class="mw-geshi java source-java">y</span> must be numbers – since addition is only defined for numbers. Therefore, any call to <span class="mw-geshi java source-java">f</span> elsewhere in the program that specifies a non-numeric type (such as a string or list) as an argument would signal an error.</p>
<p>Numerical and string constants and expressions in code can and often do imply type in a particular context. For example, an expression <span class="mw-geshi java source-java"><span class="nu0">3.14</span></span> might imply a type of <a href="http://en.m.wikipedia.org/wiki/Floating-point" title="Floating-point" class="mw-redirect">floating-point</a>, while <span class="mw-geshi java source-java"><span class="br0">[</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">]</span></span> might imply a list of integers – typically an <a href="http://en.m.wikipedia.org/wiki/Array_data_structure" title="Array data structure">array</a>.</p>
<p>Type inference is in general possible, if it is <a href="http://en.m.wikipedia.org/wiki/Decidability_(logic)" title="Decidability (logic)">decidable</a> in the type theory in question. Moreover, even if inference is undecidable in general for a given type theory, inference is often possible for a large subset of real-world programs. Haskell's type system, a version of <a href="http://en.m.wikipedia.org/wiki/Type_inference#Hindley.E2.80.93Milner_type_inference_algorithm" title="Type inference">Hindley-Milner</a>, is a restriction of <a href="http://en.m.wikipedia.org/wiki/System_F#System_F.CF.89" title="System F">System Fω</a> to so-called rank-1 polymorphic types, in which type inference is decidable. Most Haskell compilers allow arbitrary-rank polymorphism as an extension, but this makes type inference undecidable. (Type checking is decidable, however, and rank-1 programs still have type inference; higher rank polymorphic programs are rejected unless given explicit type annotations.)</p>
<h2> <span class="mw-headline" id="Types_of_types">Types of types</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="Data_type" title="Data type">Data type</a>
</div>
<p>A <i>type of types</i> is a <a href="http://en.m.wikipedia.org/wiki/Kind_(type_theory)" title="Kind (type theory)">kind</a>. Kinds appear explicitly in <a href="http://en.m.wikipedia.org/wiki/Typeful_programming" title="Typeful programming">typeful programming</a>, such as a <i>type constructor</i> in the <a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> language.</p>
<p>Types fall into several broad categories:</p>
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/Primitive_type" title="Primitive type" class="mw-redirect">Primitive types</a> – the simplest kind of type; e.g., <a href="http://en.m.wikipedia.org/wiki/Integer" title="Integer">integer</a> and <a href="Floating-point_number" title="Floating-point number" class="mw-redirect">floating-point number</a>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Boolean_data_type" title="Boolean data type">Boolean</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Integral_type" title="Integral type" class="mw-redirect">Integral types</a> – types of whole numbers; e.g., integers and natural numbers</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Floating_point_type" title="Floating point type" class="mw-redirect">Floating point types</a> – types of numbers in <a href="http://en.m.wikipedia.org/wiki/Floating-point" title="Floating-point" class="mw-redirect">floating-point</a> representation</li>
</ul>
</li>
<li><a href="http://en.m.wikipedia.org/wiki/Reference_type" title="Reference type">Reference types</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Option_type" title="Option type">Option types</a>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Nullable_type" title="Nullable type">Nullable types</a></li>
</ul>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Composite_type" title="Composite type" class="mw-redirect">Composite types</a> – types composed of basic types; e.g., <a href="http://en.m.wikipedia.org/wiki/Array_data_structure" title="Array data structure">arrays</a> or <a href="Record_(computer_science)" title="Record (computer science)">records</a>.
<dl>
<dd><a href="http://en.m.wikipedia.org/wiki/Abstract_data_type" title="Abstract data type">Abstract data types</a></dd>
</dl>
</li>
<li><a href="http://en.m.wikipedia.org/wiki/Algebraic_types" title="Algebraic types" class="mw-redirect">Algebraic types</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Subtype" title="Subtype" class="mw-redirect">Subtype</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Derived_class" title="Derived class" class="mw-redirect">Derived type</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Object_type" title="Object type" class="mw-redirect">Object types</a>; e.g., <a href="http://en.m.wikipedia.org/wiki/Type_variable" title="Type variable">type variable</a>
</li>
<li><a href="http://en.m.wikipedia.org/wiki/Partial_type" title="Partial type" class="mw-redirect">Partial type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Recursive_type" title="Recursive type" class="mw-redirect">Recursive type</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Function_type" title="Function type">Function types</a>; e.g., binary functions</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Universal_quantification" title="Universal quantification">universally quantified</a> types, such as parameterized types</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Existential_quantification" title="Existential quantification">existentially quantified</a> types, such as <a href="http://en.m.wikipedia.org/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modules</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Refinement_type" title="Refinement type" class="mw-redirect">Refinement types</a> – types that identify subsets of other types</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Dependent_type" title="Dependent type">Dependent types</a> – types that depend on terms (values)</li>
<li>
<span class="new" title="Ownership type (page does not exist)">Ownership types</span> – types that describe or constrain the structure of object-oriented systems</li>
<li>Pre-defined types provided for convenience in real-world applications, such as date, time and money.</li>
</ul>
<h2> <span class="mw-headline" id="Unified_Type_System">Unified Type System</span>
</h2>
<p>Some languages like <a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> have a unified type system. This means that all <a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> types including primitive types inherit from a single root object. Every type in <a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> inherits from the Object class. <a href="Java_(programming_language)" title="Java (programming language)">Java</a> has several primitive types that are not objects. Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types.</p>
<h2> <span class="mw-headline" id="Compatibility:_equivalence_and_subtyping">Compatibility: equivalence and subtyping</span>
</h2>
<p>A type-checker for a statically typed language must verify that the type of any <a href="Expression_(programming)" title="Expression (programming)" class="mw-redirect">expression</a> is consistent with the type expected by the context in which that expression appears. For instance, in an <a href="http://en.m.wikipedia.org/wiki/Assignment_statement" title="Assignment statement" class="mw-redirect">assignment statement</a> of the form <code>x := <i>e</i></code>, the inferred type of the expression <i><code>e</code></i> must be consistent with the declared or inferred type of the variable <code>x</code>. This notion of consistency, called <i>compatibility</i>, is specific to each programming language.</p>
<p>If the type of <i><code>e</code></i> and the type of <code>x</code> are the same and assignment is allowed for that type, then this is a valid expression. In the simplest type systems, therefore, the question of whether two types are compatible reduces to that of whether they are <i>equal</i> (or <i>equivalent</i>). Different languages, however, have different criteria for when two type expressions are understood to denote the same type. These different <i>equational theories</i> of types vary widely, two extreme cases being <i><a href="http://en.m.wikipedia.org/wiki/Structural_type_system" title="Structural type system">structural type systems</a></i>, in which any two types are equivalent that describe values with the same structure, and <i><a href="Nominative_type_system" title="Nominative type system">nominative type systems</a></i>, in which no two syntactically distinct type expressions denote the same type (<i>i.e.</i>, types must have the same "name" in order to be equal).</p>
<p>In languages with <a href="http://en.m.wikipedia.org/wiki/Subtype" title="Subtype" class="mw-redirect">subtyping</a>, the compatibility relation is more complex. In particular, if <code>A</code> is a subtype of <code>B</code>, then a value of type <code>A</code> can be used in a context where one of type <code>B</code> is expected, even if the reverse is not true. Like equivalence, the subtype relation is defined differently for each programming language, with many variations possible. The presence of parametric or ad hoc <a href="http://en.m.wikipedia.org/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)">polymorphism</a> in a language may also have implications for type compatibility.</p>
<h2> <span class="mw-headline" id="Programming_style">Programming style</span>
</h2>
<p>Some programmers prefer statically typed languages; others prefer dynamically typed languages. Statically typed languages alert programmers to type errors during compilation, and they may perform better at runtime. Advocates of dynamically typed languages claim they better support rapid prototyping and that type errors are only a small subset of errors in a program.<sup id="cite_ref-12" class="reference"><a href="Type_system#cite_note-12"><span>[</span>12<span>]</span></a></sup><sup id="cite_ref-13" class="reference"><a href="Type_system#cite_note-13"><span>[</span>13<span>]</span></a></sup> Likewise, there is often no need to manually declare all types in statically typed languages with type inference; thus, the need for the programmer to explicitly specify types of variables is automatically lowered for such languages; and some dynamic languages have run-time optimisers<sup id="cite_ref-14" class="reference"><a href="Type_system#cite_note-14"><span>[</span>14<span>]</span></a></sup><sup id="cite_ref-15" class="reference"><a href="Type_system#cite_note-15"><span>[</span>15<span>]</span></a></sup> that can generate fast code approaching the speed of static language compilers, often by using partial type inference.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from July 2010">citation needed</span></a></i>]</sup></p>
<h2> <span class="mw-headline" id="See_also">See also</span>
</h2>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Type_rules" title="Type rules" class="mw-redirect">Type rules</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)" title="Covariance and contravariance (computer science)">Covariance and contravariance (computer science)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Operator_overloading" title="Operator overloading">Operator overloading</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming">Polymorphism in object-oriented programming</a></li>
<li><a href="Programming_language" title="Programming language">Programming language</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Signedness" title="Signedness">Signedness</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Template:Type_system_cross_reference_list" title="Template:Type system cross reference list">Type system cross reference list</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Type_signature" title="Type signature">Type signature</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Type_theory" title="Type theory">Type theory</a></li>
</ul>
<h2> <span class="mw-headline" id="References">References</span>
</h2>
<div class="reflist references-column-count references-column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-pierce2002-1">
<span class="mw-cite-backlink">^ <a href="Type_system#cite_ref-pierce2002_1-0"><sup><i><b>a</b></i></sup></a> <a href="Type_system#cite_ref-pierce2002_1-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book">Pierce, Benjamin C. (2002). <i>Types and Programming Languages</i>. MIT Press. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-262-16209-1" title="Special:BookSources/0-262-16209-1">0-262-16209-1</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Types+and+Programming+Languages&amp;rft.aulast=Pierce&amp;rft.aufirst=Benjamin+C.&amp;rft.au=Pierce%2C%26%2332%3BBenjamin+C.&amp;rft.date=2002&amp;rft.pub=MIT+Press&amp;rft.isbn=0-262-16209-1&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-2">^</a></b></span> <span class="reference-text">Pierce, Benjamin C. (2002), p. 208</span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-3">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://books.google.co.uk/books?id=7i8EAAAAMBAJ&amp;pg=PA66&amp;lpg=PA66&amp;dq=pascal+type+system+%22too+strong%22&amp;source=bl&amp;ots=PGyKS1fWUb&amp;sig=ebFI6fk_yxwyY4b7sHSklp048Q4&amp;hl=en&amp;ei=lSmjTunuBo6F8gPOu43CCA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=1&amp;ved=0CBsQ6AEwAA#v=onepage&amp;q=pascal%20type%20system%20%22too%20strong%22&amp;f=false">Infoworld 25 April 1983</a></span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-4">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.cs.virginia.edu/~cs655/readings/bwk-on-pascal.html"></a><a href="Brian_Kernighan" title="Brian Kernighan">Brian Kernighan</a>: <i>Why Pascal is not my favorite language</i></span>
</li>
<li id="cite_note-5">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-5">^</a></b></span> <span class="reference-text"><span class="citation Journal">Xi, Hongwei; Scott, Dana (1998). "Dependent Types in Practical Programming". <i>Proceedings of ACM SIGPLAN Symposium on Principles of Programming Languages</i> (ACM Press): 214–227. <a href="http://en.m.wikipedia.org/wiki/CiteSeer#CiteSeerX" title="CiteSeer">CiteSeerX</a>: <span class="url"><a rel="nofollow" class="external text" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.548">10.1.1.41.548</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Dependent+Types+in+Practical+Programming&amp;rft.jtitle=Proceedings+of+ACM+SIGPLAN+Symposium+on+Principles+of+Programming+Languages&amp;rft.aulast=Xi&amp;rft.aufirst=Hongwei&amp;rft.au=Xi%2C%26%2332%3BHongwei&amp;rft.au=Scott%2C%26%2332%3BDana&amp;rft.date=1998&amp;rft.pages=214%E2%80%93227&amp;rft.pub=ACM+Press&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-6">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-6">^</a></b></span> <span class="reference-text"><span class="citation Journal">Liskov, B; Zilles, S (1974). "Programming with abstract data types". <i>ACM Sigplan Notices</i>. <a href="http://en.m.wikipedia.org/wiki/CiteSeer#CiteSeerX" title="CiteSeer">CiteSeerX</a>: <span class="url"><a rel="nofollow" class="external text" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.136.3043">10.1.1.136.3043</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Programming+with+abstract+data+types&amp;rft.jtitle=ACM+Sigplan+Notices&amp;rft.aulast=Liskov&amp;rft.aufirst=B&amp;rft.au=Liskov%2C%26%2332%3BB&amp;rft.au=Zilles%2C%26%2332%3BS&amp;rft.date=1974&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-7">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-7">^</a></b></span> <span class="reference-text"><span class="citation Journal">Jackson, K. (1977). <a rel="nofollow" class="external text" href="http://www.springerlink.com/content/wq02703237400667/">"Parallel processing and modular software construction"</a>. <i>Lecture Notes in Computer Science</i> <b>54</b>: 436–443. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1007%2FBFb0021435">10.1007/BFb0021435</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.springerlink.com/content/wq02703237400667/">http://www.springerlink.com/content/wq02703237400667/</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Parallel+processing+and+modular+software+construction&amp;rft.jtitle=Lecture+Notes+in+Computer+Science&amp;rft.aulast=Jackson&amp;rft.aufirst=K.&amp;rft.au=Jackson%2C%26%2332%3BK.&amp;rft.date=1977&amp;rft.volume=54&amp;rft.pages=436%E2%80%93443&amp;rft_id=info:doi/10.1007%2FBFb0021435&amp;rft_id=http%3A%2F%2Fwww.springerlink.com%2Fcontent%2Fwq02703237400667%2F&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-8">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-8">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://bracha.org/pluggableTypesPosition.pdf">Bracha, G.: <i>Pluggable Types</i></a></span>
</li>
<li id="cite_note-9">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-9">^</a></b></span> <span class="reference-text"><span class="citation Journal">Rozsnyai, S.; Schiefer, J.; Schatten, A. (2007). "Concepts and models for typing events for event-based systems". <i>Proceedings of the 2007 inaugural international conference on Distributed event-based systems - DEBS '07</i>. pp. 62. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F1266894.1266904">10.1145/1266894.1266904</a>. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/9781595936653" title="Special:BookSources/9781595936653">9781595936653</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Concepts+and+models+for+typing+events+for+event-based+systems&amp;rft.atitle=Proceedings+of+the+2007+inaugural+international+conference+on+Distributed+event-based+systems++-+DEBS+%2707&amp;rft.aulast=Rozsnyai&amp;rft.aufirst=S.&amp;rft.au=Rozsnyai%2C%26%2332%3BS.&amp;rft.au=Schiefer%2C%26%2332%3BJ.&amp;rft.au=Schatten%2C%26%2332%3BA.&amp;rft.date=2007&amp;rft.pages=pp.%26nbsp%3B62&amp;rft_id=info:doi/10.1145%2F1266894.1266904&amp;rft.isbn=9781595936653&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span> <span class="plainlinks noprint" style="font-size:smaller"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Cite_doi/10.1145.2F1266894.1266904&amp;action=edit&amp;editintro=Template:Cite_doi/editintro2">edit</a></span></span>
</li>
<li id="cite_note-10">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-10">^</a></b></span> <span class="reference-text"><span class="citation newsgroup">Martelli, Alex (26 July 2000). "<a rel="nofollow" class="external text" href="news:8lmvn6017l@news1.newsguy.com">Re: polymorphism (was Re: Type checking in python?)</a>". <a rel="nofollow" class="external text" href="http://groups.google.com/group/comp.lang.python/msg/e230ca916be58835?hl=en&amp;">Web link</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=%5Bnews%3A8lmvn6017l%40news1.newsguy.com+Re%3A+polymorphism+%28was+Re%3A+Type+checking+in+python%3F%29%5D&amp;rft.atitle=&amp;rft.aulast=Martelli%2C+Alex&amp;rft.au=Martelli%2C+Alex&amp;rft.date=26+July+2000&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-11">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-11">^</a></b></span> <span class="reference-text">Mitchell, John C.; Plotkin, Gordon D.; <a rel="nofollow" class="external text" href="http://theory.stanford.edu/~jcm/papers/mitch-plotkin-88.pdf"><i>Abstract Types Have Existential Type</i></a>, ACM Transactions on Programming Languages and Systems, Vol. 10, No. 3, July 1988, pp. 470–502</span>
</li>
<li id="cite_note-12">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-12">^</a></b></span> <span class="reference-text"><span class="citation web">Meijer, Erik; Drayton, Peter. <a rel="nofollow" class="external text" href="http://research.microsoft.com/en-us/um/people/emeijer/Papers/RDL04Meijer.pdf">"Static Typing Where Possible, Dynamic Typing When Needed: The End of the Cold War Between Programming Languages"</a>. <a href="http://en.m.wikipedia.org/wiki/Microsoft" title="Microsoft">Microsoft</a> Corporation<span class="printonly">. <a rel="nofollow" class="external free" href="http://research.microsoft.com/en-us/um/people/emeijer/Papers/RDL04Meijer.pdf">http://research.microsoft.com/en-us/um/people/emeijer/Papers/RDL04Meijer.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Static+Typing+Where+Possible%2C+Dynamic+Typing+When+Needed%3A+The+End+of+the+Cold+War+Between+Programming+Languages&amp;rft.atitle=&amp;rft.aulast=Meijer&amp;rft.aufirst=Erik&amp;rft.au=Meijer%2C%26%2332%3BErik&amp;rft.au=Drayton%2C%26%2332%3BPeter&amp;rft.pub=%5B%5BMicrosoft%5D%5D+Corporation&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Femeijer%2FPapers%2FRDL04Meijer.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-13">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-13">^</a></b></span> <span class="reference-text"><span class="citation web">Eckel, Bruce. <a rel="nofollow" class="external text" href="http://docs.google.com/View?id=dcsvntt2_25wpjvbbhk">"Strong Typing vs. Strong Testing"</a>. Google Docs<span class="printonly">. <a rel="nofollow" class="external free" href="http://docs.google.com/View?id=dcsvntt2_25wpjvbbhk">http://docs.google.com/View?id=dcsvntt2_25wpjvbbhk</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Strong+Typing+vs.+Strong+Testing&amp;rft.atitle=&amp;rft.aulast=Eckel&amp;rft.aufirst=Bruce&amp;rft.au=Eckel%2C%26%2332%3BBruce&amp;rft.pub=Google+Docs&amp;rft_id=http%3A%2F%2Fdocs.google.com%2FView%3Fid%3Ddcsvntt2_25wpjvbbhk&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-14">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-14">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.mozilla.com/en-US/press/mozilla-2006-11-07.html">"Adobe and Mozilla Foundation to Open Source Flash Player Scripting Engine"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.mozilla.com/en-US/press/mozilla-2006-11-07.html">http://www.mozilla.com/en-US/press/mozilla-2006-11-07.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Adobe+and+Mozilla+Foundation+to+Open+Source+Flash+Player+Scripting+Engine&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.mozilla.com%2Fen-US%2Fpress%2Fmozilla-2006-11-07.html&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-15">
<span class="mw-cite-backlink"><b><a href="Type_system#cite_ref-15">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://psyco.sourceforge.net/introduction.html">"Psyco, a Python specializing compiler"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://psyco.sourceforge.net/introduction.html">http://psyco.sourceforge.net/introduction.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Psyco%2C+a+Python+specializing+compiler&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fpsyco.sourceforge.net%2Fintroduction.html&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span></span>
</li>
</ol>
</div>
<h2> <span class="mw-headline" id="Further_reading">Further reading</span>
</h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;"><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x"></td>
<td class="mbox-text plainlist" style="">The Wikibook <i><a href="http://en.wikibooks.org/wiki/Haskell" class="extiw" title="wikibooks:Haskell">Haskell</a></i> has a page on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Haskell/Class_Declarations" class="extiw" title="wikibooks:Haskell/Class Declarations">Class Declarations</a></b></i>
</td>
</tr></table>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;"><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x"></td>
<td class="mbox-text plainlist" style="">The Wikibook <i><a href="http://en.wikibooks.org/wiki/Ada_Programming" class="extiw" title="wikibooks:Ada Programming">Ada Programming</a></i> has a page on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Ada_Programming/Types" class="extiw" title="wikibooks:Ada Programming/Types">Types</a></b></i>
</td>
</tr></table>
<ul>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Luca_Cardelli" title="Luca Cardelli">Cardelli, Luca</a> (1997). "Type systems". In Allen B. Tucker. <i>CRC Handbok of Computer Science and Engineering</i>. CRC Press.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Type+systems&amp;rft.atitle=CRC+Handbok+of+Computer+Science+and+Engineering&amp;rft.aulast=Cardelli&amp;rft.aufirst=Luca&amp;rft.au=Cardelli%2C%26%2332%3BLuca&amp;rft.date=1997&amp;rft.pub=CRC+Press&amp;rfr_id=info:sid/en.wikipedia.org:Type_system"><span style="display: none;"> </span></span>
</li>
<li>Smith, Chris, <a rel="nofollow" class="external text" href="http://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/"><i>What To Know Before Debating Type Systems</i></a>
</li>
<li>Tratt, Laurence, <a rel="nofollow" class="external text" href="http://tratt.net/laurie/research/publications/html/tratt__dynamically_typed_languages/"><i>Dynamically Typed Languages</i></a>, Advances in Computers, Vol. 77, pp. 149–184, July 2009</li>
</ul>

						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 20 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://bn.m.wikipedia.org/wiki/%E0%A6%9F%E0%A6%BE%E0%A6%87%E0%A6%AA_%E0%A6%AC%E0%A7%8D%E0%A6%AF%E0%A6%AC%E0%A6%B8%E0%A7%8D%E0%A6%A5%E0%A6%BE" lang="bn" hreflang="bn">বাংলা</a></li><li><a href="http://bg.m.wikipedia.org/wiki/%D0%A2%D0%B8%D0%BF_%D0%B4%D0%B0%D0%BD%D0%BD%D0%B8" lang="bg" hreflang="bg">български</a></li><li><a href="http://bs.m.wikipedia.org/wiki/Tip_(ra%C4%8Dunari)" lang="bs" hreflang="bs">bosanski</a></li><li><a href="http://cs.m.wikipedia.org/wiki/Typov%C3%BD_syst%C3%A9m" lang="cs" hreflang="cs">česky</a></li><li><a href="http://de.m.wikipedia.org/wiki/Typisierung_(Informatik)#Typsystem" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://el.m.wikipedia.org/wiki/%CE%A3%CF%8D%CF%83%CF%84%CE%B7%CE%BC%CE%B1_%CF%84%CF%8D%CF%80%CF%89%CE%BD" lang="el" hreflang="el">Ελληνικά</a></li><li><a href="http://es.m.wikipedia.org/wiki/Sistema_de_tipos" lang="es" hreflang="es">español</a></li><li><a href="http://ko.m.wikipedia.org/wiki/%EC%9E%90%EB%A3%8C%ED%98%95_%EC%B2%B4%EA%B3%84" lang="ko" hreflang="ko">한국어</a></li><li><a href="http://it.m.wikipedia.org/wiki/Sistema_dei_tipi" lang="it" hreflang="it">italiano</a></li><li><a href="http://he.m.wikipedia.org/wiki/%D7%9E%D7%A2%D7%A8%D7%9B%D7%AA_%D7%98%D7%99%D7%A4%D7%95%D7%A1%D7%99%D7%9D" lang="he" hreflang="he">עברית</a></li><li><a href="http://nl.m.wikipedia.org/wiki/Typesysteem" lang="nl" hreflang="nl">Nederlands</a></li><li><a href="http://ja.m.wikipedia.org/wiki/%E5%9E%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0" lang="ja" hreflang="ja">日本語</a></li><li><a href="http://mhr.m.wikipedia.org/wiki/%D0%AB%D2%A5%D0%BF%D0%B0%D0%BB%D1%8B%D0%BD_%D1%82%D0%B8%D0%BF%D1%88%D0%B5" lang="mhr" hreflang="mhr">олык марий</a></li><li><a href="http://pl.m.wikipedia.org/wiki/System_typ%C3%B3w" lang="pl" hreflang="pl">polski</a></li><li><a href="http://ru.m.wikipedia.org/wiki/%D0%A2%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85" lang="ru" hreflang="ru">русский</a></li><li><a href="http://fi.m.wikipedia.org/wiki/Tyyppij%C3%A4rjestelm%C3%A4" lang="fi" hreflang="fi">suomi</a></li><li><a href="http://sv.m.wikipedia.org/wiki/Typsystem" lang="sv" hreflang="sv">svenska</a></li><li><a href="http://th.m.wikipedia.org/wiki/%E0%B8%A3%E0%B8%B0%E0%B8%9A%E0%B8%9A%E0%B8%8A%E0%B8%99%E0%B8%B4%E0%B8%94%E0%B8%95%E0%B8%B1%E0%B8%A7%E0%B9%81%E0%B8%9B%E0%B8%A3" lang="th" hreflang="th">ไทย</a></li><li><a href="http://uk.m.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%82%D0%B8%D0%BF%D1%96%D0%B7%D0%B0%D1%86%D1%96%D1%97" lang="uk" hreflang="uk">українська</a></li><li><a href="http://zh.m.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1" lang="zh" hreflang="zh">中文</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia ®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Type_system&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Type+system&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>