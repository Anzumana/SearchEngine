<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>sizeof - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Sizeof","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Sizeof" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Sizeof"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">sizeof</h1>			
<p>In the programming languages <a href="http://en.m.wikipedia.org/wiki/C_programming_language" title="C programming language" class="mw-redirect">C</a> and <a href="C++" title="C++">C++</a>, the <a href="http://en.m.wikipedia.org/wiki/Unary_operator" title="Unary operator" class="mw-redirect">unary operator</a> <b><code>sizeof</code></b> is used to calculate the size of any <a href="Data_type" title="Data type">datatype</a>, measured in the number of <a href="Byte" title="Byte">bytes</a> required to represent the type. A byte in this context is the same as an unsigned char, and may be larger than 8 bits, although that is uncommon. The result of <code>sizeof</code> is the size of the type of the expression or parenthesized type-specifier that it precedes, and has an unsigned integral type which is usually denoted by <code><a href="http://en.m.wikipedia.org/wiki/Size_t" title="Size t" class="mw-redirect">size_t</a></code>. <code>sizeof</code> can be applied to any datatype, including <a href="http://en.m.wikipedia.org/wiki/Primitive_types" title="Primitive types" class="mw-redirect">primitive types</a> such as <a href="http://en.m.wikipedia.org/wiki/Integer_(computer_science)" title="Integer (computer science)">integer</a> and <a href="http://en.m.wikipedia.org/wiki/IEEE_floating-point_standard" title="IEEE floating-point standard" class="mw-redirect">floating-point</a> types, <a href="http://en.m.wikipedia.org/wiki/Data_pointer" title="Data pointer" class="mw-redirect">pointer</a> types, or compound datatypes (<a href="Union_(computer_science)" title="Union (computer science)">unions</a>, <a href="http://en.m.wikipedia.org/wiki/Struct" title="Struct">structs</a>, or C++ <a href="http://en.m.wikipedia.org/wiki/Class_(computer_science)" title="Class (computer science)" class="mw-redirect">classes</a>).</p>
<h2> <span class="mw-headline" id="Need_for_sizeof">Need for <code>sizeof</code></span>
</h2>
<p>In many programs, there are situations where it is useful to know the size of a particular datatype (one of the most common examples is <a href="Dynamic_memory_allocation" title="Dynamic memory allocation" class="mw-redirect">dynamic memory allocation</a> using the <a href="Library_(computer_science)" title="Library (computer science)" class="mw-redirect">library</a> function <code><a href="Malloc" title="Malloc" class="mw-redirect">malloc</a></code>). Though for any given <a href="Programming_language_implementation" title="Programming language implementation">implementation</a> of C or C++ the size of a particular datatype is constant, the sizes of even primitive types in C and C++ are implementation-defined (that is, not precisely defined by the <a href="ANSI_C" title="ANSI C">standard</a>). This can cause problems when trying to allocate a block of memory of the appropriate size. For example, say a programmer wants to allocate a block of memory big enough to hold ten <a href="Variable_(programming)" title="Variable (programming)" class="mw-redirect">variables</a> of type <code>int</code>. Because our hypothetical programmer doesn't know the exact size of type <code>int</code>, the programmer doesn't know how many bytes to ask <code>malloc</code> for. Therefore, it is necessary to use <code>sizeof</code>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="coMULTI">/*pointer to type int, used to reference our allocated data*/</span>
<span class="kw4">int</span> <span class="sy0">*</span>pointer <span class="sy0">=</span> <span class="kw3">malloc</span><span class="br0">(</span><span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span>
</pre>
</div>
</div>
<p>In the preceding code, the programmer instructs <code>malloc</code> to allocate and return a pointer to memory. The size of the block allocated is equal to the number of bytes for a single object of type <code>int</code>, multiplied by 10, ensuring enough space for all 10 <code>int</code>s.</p>
<p>It is generally not safe for a programmer to presume to know the size of any datatype. For example, even though most implementations of C and C++ on <a href="http://en.m.wikipedia.org/wiki/32-bit" title="32-bit">32-bit</a> systems define type <code>int</code> to be 4 bytes, the size of an <code>int</code> could change when code is <a href="Porting" title="Porting">ported</a> to a different system, breaking the code. The exception to this is the <code>char</code> type, whose size is always 1 in any standards-compliant C implementation. In addition, it is frequently very difficult to predict the sizes of compound datatypes such as a <code>struct</code> or <code>union</code>, due to structure "padding" (see <a href="Sizeof#Implementation">Implementation</a> below). Another reason for using <code>sizeof</code> is readability, since it avoids <a href="http://en.m.wikipedia.org/wiki/Magic_number_(programming)" title="Magic number (programming)">magic numbers</a>.</p>
<h2> <span class="mw-headline" id="Use">Use</span>
</h2>
<p>The <code>sizeof</code> operator is used to determine the amount of space a designated datatype would occupy in memory. To use <code>sizeof</code>, the keyword "<code>sizeof</code>" is followed by a type name or an <a href="Expression_(programming)" title="Expression (programming)" class="mw-redirect">expression</a> (which may be merely a variable name). If a type name is used, it must always be enclosed in parentheses, whereas expressions can be specified with or without parentheses. A <code>sizeof</code> expression results in a value equal to the size in bytes of the datatype or expression (with datatypes, <code>sizeof</code> evaluates to the size of the memory representation for an object of the specified datatype; for expressions it evaluates to the representation size for the type that would result from evaluation of the expression, which however is <i>not</i> evaluated). For example, since <code>sizeof(char)</code> is defined to be 1<sup id="cite_ref-sizeof-char_0-0" class="reference"><a href="Sizeof#cite_note-sizeof-char-0"><span>[</span>1<span>]</span></a></sup> and assuming <code>int</code>s are 4 bytes long, the following code will print <b>1,4</b>:</p>
<p>Because types are not known to the <a href="C_preprocessor" title="C preprocessor">C preprocessor</a>, <code>sizeof</code> cannot be used in <code>#if</code> expressions.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="coMULTI">/* the following code illustrates the use of sizeof 
 * with variables and expressions (no parentheses needed),
 * and with type names (parentheses needed)
 */</span>
 
<span class="kw4">char</span> c<span class="sy0">;</span>
 
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%zu,%zu<span class="es1">\n</span>"</span><span class="sy0">,</span> <span class="kw4">sizeof</span> c<span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
</pre>
</div>
</div>
<p>Certain standard headers such as <code>stddef.h</code> define <code><a href="http://en.m.wikipedia.org/wiki/Size_t" title="Size t" class="mw-redirect">size_t</a></code> to denote the <a href="http://en.m.wikipedia.org/wiki/Signedness" title="Signedness">unsigned</a> integral type of the result of a <code>sizeof</code> expression, which is always positive. The <code>printf</code> width specifier <code>z</code> should be used to format that type.</p>
<h3> <span class="mw-headline" id="Using_sizeof_with_arrays">Using <code>sizeof</code> with arrays</span>
</h3>
<div class="rellink boilerplate seealso">See also: <a href="http://en.wikibooks.org/wiki/C_Programming/Pointers_and_arrays#sizeof" class="extiw" title="wikibooks:C Programming/Pointers and arrays">Wikibooks:C Programming/Pointers and arrays#sizeof</a>
</div>
<p>When <code>sizeof</code> is applied to the name of an array, the result is the size in bytes of the whole array. (This is one of the few exceptions to the rule that the name of an array is converted to a pointer to the first element of the array.) The following program uses <code>sizeof</code> to determine the size of a declared array, avoiding a <a href="Buffer_overflow" title="Buffer overflow">buffer overflow</a> when copying characters:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;string.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">**</span>argv<span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw4">char</span> buffer<span class="br0">[</span><span class="nu0">10</span><span class="br0">]</span><span class="sy0">;</span> <span class="coMULTI">/* Array of 10 chars */</span>
 
  <span class="coMULTI">/* Copy at most 9 characters from argv[1] into buffer.
   *  sizeof(char) is defined to always be 1.
   */</span>
  <span class="kw3">strncpy</span><span class="br0">(</span>buffer<span class="sy0">,</span> argv<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy0">,</span> <span class="kw4">sizeof</span> buffer <span class="sy0">-</span> <span class="kw4">sizeof</span> buffer<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span>
 
  <span class="coMULTI">/* Ensure that the buffer is null-terminated: */</span>
  buffer<span class="br0">[</span><span class="kw4">sizeof</span> buffer <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="sy0">;</span>
 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>Here, <code>sizeof buffer</code> is equivalent to <code>10*sizeof buffer[0]</code>, or 10.</p>
<p><a href="C99" title="C99">C99</a> adds support for flexible array members to structures. This form of array declaration is allowed as the last element in structures only, and differs from normal arrays in that no length is specified to the compiler. For a structure named <code>s</code> containing a flexible array member named <code>a</code>, <code>sizeof s</code> is therefore equivalent to <code><a href="http://en.m.wikipedia.org/wiki/Offsetof" title="Offsetof">offsetof</a>(s, a)</code>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">struct</span> flexarray
<span class="br0">{</span>
    <span class="kw4">char</span> val<span class="sy0">;</span>
    <span class="kw4">int</span> array<span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span>  <span class="coMULTI">/* Flexible array member; must be last element of struct */</span>
<span class="br0">}</span><span class="sy0">;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">**</span>argv<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"sizeof(struct flexarray) = %zu<span class="es1">\n</span>"</span><span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">struct</span> flexarray<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>Thus, in this case the <code>sizeof</code> operator returns the size of the structure, including any padding, but without any storage allowed for the array. In the above example, the following output will be produced on most platforms:</p>
<pre>
sizeof(struct flexarray) = 4
</pre>
<p><a href="C99" title="C99">C99</a> also allows variable length arrays where the length is specified at runtime.<sup id="cite_ref-1" class="reference"><a href="Sizeof#cite_note-1"><span>[</span>2<span>]</span></a></sup> In such cases, the <code>sizeof</code> operator is evaluated in part at runtime to determine the storage occupied by the array.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stddef.h&gt;</span>
 
<span class="kw4">size_t</span> flexsize<span class="br0">(</span><span class="kw4">int</span> n<span class="br0">)</span>
<span class="br0">{</span>
   <span class="kw4">char</span> b<span class="br0">[</span>n<span class="sy0">+</span><span class="nu0">3</span><span class="br0">]</span><span class="sy0">;</span>      <span class="coMULTI">/* Variable length array */</span>
   <span class="kw1">return</span> <span class="kw4">sizeof</span> b<span class="sy0">;</span>  <span class="coMULTI">/* Execution time sizeof */</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span> <span class="kw4">void</span> <span class="br0">)</span>
<span class="br0">{</span>
  <span class="kw4">size_t</span> size <span class="sy0">=</span> flexsize<span class="br0">(</span><span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span> <span class="coMULTI">/* flexsize returns 13 */</span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p><code>sizeof</code> can be used to determine the number of elements in an array, by taking the size of the entire array and dividing it by the size of a single element.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#define Elements_in(arrayname) (sizeof arrayname/sizeof *arrayname)</span>
 
<span class="kw4">int</span> main<span class="br0">(</span> <span class="kw4">void</span> <span class="br0">)</span>
<span class="br0">{</span>
   <span class="kw4">int</span> tab<span class="br0">[</span><span class="nu0">10</span><span class="br0">]</span><span class="sy0">;</span>
   cout <span class="sy0">&lt;&lt;</span> <span class="st0">"Number of elements in the array: "</span> <span class="sy0">&lt;&lt;</span> Elements_in<span class="br0">(</span>tab<span class="br0">)</span> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span> <span class="co1">// yields 10</span>
   <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>Because this works only for the name of a declared array object, non-trivial revision will be necessary when the code is changed to use a pointer instead of an array name.</p>
<h3> <span class="mw-headline" id="sizeof_and_incomplete_types"><code>sizeof</code> and incomplete types</span>
</h3>
<p><code>sizeof</code> can only be applied to "completely" defined types. With arrays, this means that the dimensions of the array must be present in its <a href="http://en.m.wikipedia.org/wiki/Declaration_(computer_science)" title="Declaration (computer science)" class="mw-redirect">declaration</a>, and that the type of the elements must be completely defined. For <code>struct</code>s and <code>union</code>s, this means that there must be a member list of completely defined types. For example, consider the following two source files:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="coMULTI">/* file1.c */</span>
<span class="kw4">int</span> arr<span class="br0">[</span><span class="nu0">10</span><span class="br0">]</span><span class="sy0">;</span>
<span class="kw4">struct</span> x <span class="br0">{</span><span class="kw4">int</span> one<span class="sy0">;</span> <span class="kw4">int</span> two<span class="sy0">;</span><span class="br0">}</span><span class="sy0">;</span>
<span class="coMULTI">/* more code */</span>
 
<span class="coMULTI">/* file2.c */</span>
<span class="kw2">extern</span> <span class="kw4">int</span> arr<span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span>
<span class="kw4">struct</span> x<span class="sy0">;</span>
<span class="coMULTI">/* more code */</span>
</pre>
</div>
</div>
<p>Both files are perfectly legal C, and code in <tt>file1.c</tt> can apply <code>sizeof</code> to <code>arr</code> and <code>struct x</code>. However, it is illegal for code in <tt>file2.c</tt> to do this, because the definitions in <tt>file2.c</tt> are not complete. In the case of <code>arr</code>, the code does not specify the dimension of the array; without this information, the compiler has no way of knowing how many elements are in the array, and cannot calculate the array's overall size. Likewise, the compiler cannot calculate the size of <code>struct x</code> because it does not know what members it is made up of, and therefore cannot calculate the sum of the sizes of the structure's members (and padding). If the programmer provided the size of the array in its declaration in file2.c, or completed the definition of <code>struct x</code> by supplying a member list, this would allow the application of <code>sizeof</code> to <code>arr</code> or <code>struct x</code> in that source file.</p>
<h3> <span class="mw-headline" id="sizeof..._and_variadic_template_packs"><code>sizeof...</code> and variadic template packs</span>
</h3>
<p>C++11 introduced <a href="http://en.m.wikipedia.org/wiki/Variadic_template" title="Variadic template">variadic templates</a>; the keyword <code>sizeof</code> followed by <a href="http://en.m.wikipedia.org/wiki/Ellipsis" title="Ellipsis">ellipsis</a> returns the number of elements in a parameter pack.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
template <span class="sy0">&lt;</span>typename... <span class="me1">Args</span><span class="sy0">&gt;</span>
<span class="kw4">void</span> print_size<span class="br0">(</span>Args... <span class="me1">args</span><span class="br0">)</span> 
<span class="br0">{</span>
  cout <span class="sy0">&lt;&lt;</span> <span class="kw4">sizeof</span>...<span class="br0">(</span>args<span class="br0">)</span> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span> <span class="kw4">void</span> <span class="br0">)</span> 
<span class="br0">{</span>
  print_size<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> <span class="co1">// outputs 0</span>
  print_size<span class="br0">(</span><span class="st0">"Is the answer"</span><span class="sy0">,</span> <span class="nu0">42</span><span class="sy0">,</span> <span class="kw2">true</span><span class="br0">)</span><span class="sy0">;</span> <span class="co1">// outputs 3</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<h2> <span class="mw-headline" id="Implementation">Implementation</span>
</h2>
<p>It is the responsibility of compilers to implement the <code>sizeof</code> operator correctly for each target platform. In many cases, there will be an official <a href="http://en.m.wikipedia.org/wiki/Application_binary_interface" title="Application binary interface">Application Binary Interface (ABI)</a> document for the platform, specifying formats, padding, and alignment for the data types, to which the compiler must conform. In most cases, <code>sizeof</code> is a compile-time operator, which means that during compilation <code>sizeof</code> expressions get replaced by constant result-values. However, <code>sizeof</code> applied to a variable length array, introduced in <a href="C99" title="C99">C99</a>, requires computation during program execution.</p>
<h3> <span class="mw-headline" id="Structure_padding">Structure padding</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Data_structure_alignment" title="Data structure alignment">Data structure alignment</a>
</div>
<p>To calculate the size of any object type, the compiler must take into account any <a href="http://en.m.wikipedia.org/wiki/Data_Structure_Alignment" title="Data Structure Alignment" class="mw-redirect">address alignment</a> that may be needed to meet efficiency or architectural constraints. Many <a href="Computer_architecture" title="Computer architecture">computer architectures</a> do not support multiple-byte access starting at any byte address that is not a multiple of the word size, and even when the architecture allows it, usually the <a href="http://en.m.wikipedia.org/wiki/Central_processing_unit" title="Central processing unit">processor</a> can fetch a <a href="http://en.m.wikipedia.org/wiki/Data_structure_alignment" title="Data structure alignment">word-aligned object</a> faster than it can fetch an object that straddles multiple words in memory.<sup id="cite_ref-2" class="reference"><a href="Sizeof#cite_note-2"><span>[</span>3<span>]</span></a></sup> Therefore, compilers usually align data structures to at least a <a href="http://en.m.wikipedia.org/wiki/Word_(data_type)" title="Word (data type)" class="mw-redirect">word</a> alignment boundary, and also align individual members to their respective alignment boundaries. In the following example, the structure <code>student</code> is likely to be aligned on a word boundary, which is also where the member <code>grade</code> begins, and the member <code>age</code> is likely to start at the next word address. The compiler accomplishes the latter by inserting unused "padding" bytes between members as needed to satisfy the alignment requirements. There may also be padding at the end of a structure to ensure proper alignment in case the structure is ever used as an element of an array.</p>
<p>Thus, the aggregate size of a structure in C can be greater than the sum of the sizes of its individual members. For example, on many systems the following code will print <b>8</b>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> student<span class="br0">{</span>
  <span class="kw4">char</span> grade<span class="sy0">;</span> <span class="coMULTI">/* char is 1 byte long */</span>
  <span class="kw4">int</span> age<span class="sy0">;</span> <span class="coMULTI">/* int is 4 bytes long */</span>
<span class="br0">}</span><span class="sy0">;</span>
 
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%zu"</span><span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">struct</span> student<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
</pre>
</div>
</div>
<h2> <span class="mw-headline" id="See_also">See also</span>
</h2>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Typeof" title="Typeof">Typeof</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Offsetof" title="Offsetof">offsetof</a></li>
</ul>
<h2> <span class="mw-headline" id="References">References</span>
</h2>
<ol class="references">
<li id="cite_note-sizeof-char-0">
<span class="mw-cite-backlink"><b><a href="Sizeof#cite_ref-sizeof-char_0-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf">"C99 standard (ISO/IEC9899)"</a>. <a href="http://en.m.wikipedia.org/wiki/International_Electrotechnical_Commission" title="International Electrotechnical Commission">ISO/IEC</a>. 7 September 2007. p. 80<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf">http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf</a></span><span class="reference-accessdate">. Retrieved 31 October 2010</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=C99+standard+%28ISO%2FIEC9899%29&amp;rft.atitle=&amp;rft.date=7+September+2007&amp;rft.pages=p.%26nbsp%3B80&amp;rft.pub=%5B%5BInternational+Electrotechnical+Commission%7CISO%2FIEC%5D%5D&amp;rft_id=http%3A%2F%2Fwww.open-std.org%2Fjtc1%2Fsc22%2FWG14%2Fwww%2Fdocs%2Fn1256.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Sizeof"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="Sizeof#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1124.pdf">"WG14/N1124 Committee Draft ISO/IEC 9899"</a>. 6 May 2005. 6 May 2005. 6.5.3.4 The <code>sizeof</code> operator<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1124.pdf">http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1124.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=WG14%2FN1124+Committee+Draft+ISO%2FIEC+9899&amp;rft.atitle=&amp;rft.date=6+May+2005&amp;rft.pages=6.5.3.4+The+%3Ccode%3Esizeof%3C%2Fcode%3E+operator&amp;rft.pub=6+May+2005&amp;rft_id=http%3A%2F%2Fwww.open-std.org%2FJTC1%2FSC22%2Fwg14%2Fwww%2Fdocs%2Fn1124.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Sizeof"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="Sizeof#cite_ref-2">^</a></b></span> <span class="reference-text"><span class="citation web">Rentzsch, Jonathan (8 February 2005). <a rel="nofollow" class="external text" href="http://www-128.ibm.com/developerworks/library/pa-dalign/#N100FE">"Data alignment: Straighten up and fly right"</a>. www.ibm.com<span class="printonly">. <a rel="nofollow" class="external free" href="http://www-128.ibm.com/developerworks/library/pa-dalign/#N100FE">http://www-128.ibm.com/developerworks/library/pa-dalign/#N100FE</a></span><span class="reference-accessdate">. Retrieved 1 October 2006</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Data+alignment%3A+Straighten+up+and+fly+right&amp;rft.atitle=&amp;rft.aulast=Rentzsch&amp;rft.aufirst=Jonathan&amp;rft.au=Rentzsch%2C%26%2332%3BJonathan&amp;rft.date=8+February+2005&amp;rft.pub=www.ibm.com&amp;rft_id=http%3A%2F%2Fwww-128.ibm.com%2Fdeveloperworks%2Flibrary%2Fpa-dalign%2F%23N100FE&amp;rfr_id=info:sid/en.wikipedia.org:Sizeof"><span style="display: none;"> </span></span></span>
</li>
</ol>

						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 3 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://ja.m.wikipedia.org/wiki/Sizeof" lang="ja" hreflang="ja">日本語</a></li><li><a href="http://pl.m.wikipedia.org/wiki/Operator_rozmiaru" lang="pl" hreflang="pl">polski</a></li><li><a href="http://tr.m.wikipedia.org/wiki/Sizeof" lang="tr" hreflang="tr">Türkçe</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia ®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Sizeof&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Sizeof&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Sizeof&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>