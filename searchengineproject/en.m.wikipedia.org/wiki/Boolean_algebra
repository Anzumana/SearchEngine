<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>Boolean algebra - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Boolean algebra","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Boolean_algebra" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Boolean+algebra"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">Boolean algebra</h1>			
<div class="dablink">This article discusses the subject referred to as <i>Boolean algebra</i>. For the mathematical objects, see <a href="http://en.m.wikipedia.org/wiki/Boolean_algebra_(structure)" title="Boolean algebra (structure)">Boolean algebra (structure)</a>.</div>
<p><b>Boolean algebra</b>, as developed in 1854 by <a href="http://en.m.wikipedia.org/wiki/George_Boole" title="George Boole">George Boole</a> in his book <i>An Investigation of the Laws of Thought</i>,<sup id="cite_ref-1" class="reference"><a href="Boolean_algebra#cite_note-1"><span>[</span>1<span>]</span></a></sup> is a variant of ordinary <a href="http://en.m.wikipedia.org/wiki/Elementary_algebra" title="Elementary algebra">elementary algebra</a> differing in its values, operations, and laws. Instead of the usual algebra of numbers, Boolean algebra is the algebra of <a href="http://en.m.wikipedia.org/wiki/Truth_value" title="Truth value">truth values</a> 0 and 1, or equivalently of <a href="http://en.m.wikipedia.org/wiki/Algebra_of_sets" title="Algebra of sets">subsets of a given set</a>. The operations are usually taken to be <i><a href="http://en.m.wikipedia.org/wiki/Logical_conjunction" title="Logical conjunction">conjunction</a></i> ∧, <i><a href="http://en.m.wikipedia.org/wiki/Logical_disjunction" title="Logical disjunction">disjunction</a></i> ∨, and <i><a href="http://en.m.wikipedia.org/wiki/Negation" title="Negation">negation</a></i> ¬, with constants 0 and 1. And the laws are definable as those equations that hold for all values of their variables, for example <i>x</i>∨(<i>y</i>∧<i>x</i>) = <i>x</i>. Applications include <a href="http://en.m.wikipedia.org/wiki/Mathematical_logic" title="Mathematical logic">mathematical logic</a>, <a href="http://en.m.wikipedia.org/wiki/Digital_logic" title="Digital logic" class="mw-redirect">digital logic</a>, <a href="http://en.m.wikipedia.org/wiki/Computer_programming" title="Computer programming">computer programming</a>, <a href="http://en.m.wikipedia.org/wiki/Set_theory" title="Set theory">set theory</a>, and <a href="http://en.m.wikipedia.org/wiki/Statistics" title="Statistics">statistics</a>.<sup id="cite_ref-givhal_2-0" class="reference"><a href="Boolean_algebra#cite_note-givhal-2"><span>[</span>2<span>]</span></a></sup> According to <a href="http://en.m.wikipedia.org/wiki/Edward_Vermilye_Huntington" title="Edward Vermilye Huntington">Huntington</a> the moniker "Boolean algebra" was first suggested by <a href="http://en.m.wikipedia.org/wiki/Henry_M._Sheffer" title="Henry M. Sheffer">Sheffer</a> in 1913.<sup id="cite_ref-3" class="reference"><a href="Boolean_algebra#cite_note-3"><span>[</span>3<span>]</span></a></sup></p>
<p>Boole's algebra predated the modern developments in <a href="http://en.m.wikipedia.org/wiki/Abstract_algebra" title="Abstract algebra">abstract algebra</a> and mathematical logic; it is however seen as connected to the origins of both fields.<sup id="cite_ref-DunnHardegree2001_4-0" class="reference"><a href="Boolean_algebra#cite_note-DunnHardegree2001-4"><span>[</span>4<span>]</span></a></sup> In an abstract setting, Boolean algebra was perfected in the late 19th century by <a href="http://en.m.wikipedia.org/wiki/William_Stanley_Jevons" title="William Stanley Jevons">Jevons</a>, <a href="http://en.m.wikipedia.org/wiki/Ernst_Schr%C3%B6der" title="Ernst Schröder">Schröder</a>, <a href="http://en.m.wikipedia.org/wiki/Edward_Vermilye_Huntington" title="Edward Vermilye Huntington">Huntington</a>, and others until it reached the modern conception of an (abstract) <a href="http://en.m.wikipedia.org/wiki/Mathematical_structure" title="Mathematical structure">mathematical structure</a>.<sup id="cite_ref-DunnHardegree2001_4-1" class="reference"><a href="Boolean_algebra#cite_note-DunnHardegree2001-4"><span>[</span>4<span>]</span></a></sup> For example, the empirical observation that one can manipulate expressions in the <a href="http://en.m.wikipedia.org/wiki/Algebra_of_sets" title="Algebra of sets">algebra of sets</a> by translating them into expressions in Boole's algebra is explained in modern terms by saying that the algebra of sets is <i>a</i> <a href="http://en.m.wikipedia.org/wiki/Boolean_algebra_(structure)" title="Boolean algebra (structure)">Boolean algebra</a> (note the <a href="http://en.m.wikipedia.org/wiki/Indefinite_article" title="Indefinite article" class="mw-redirect">indefinite article</a>). In fact, <a href="http://en.m.wikipedia.org/wiki/M._H._Stone" title="M. H. Stone" class="mw-redirect">M. H. Stone</a> <a href="http://en.m.wikipedia.org/wiki/Stone%27s_representation_theorem_for_Boolean_algebras" title="Stone's representation theorem for Boolean algebras">proved in 1936</a> that every Boolean algebra is <a href="http://en.m.wikipedia.org/wiki/Isomorphic" title="Isomorphic" class="mw-redirect">isomorphic</a> to a <a href="http://en.m.wikipedia.org/wiki/Field_of_sets" title="Field of sets">field of sets</a>.</p>
<p>In the 1930s, while studying <a href="http://en.m.wikipedia.org/wiki/Switching_circuit" title="Switching circuit" class="mw-redirect">switching circuits</a>, <a href="http://en.m.wikipedia.org/wiki/Claude_Shannon" title="Claude Shannon">Claude Shannon</a> observed that one could also apply the rules of Boole's algebra in this setting, and he introduced <b>switching algebra</b> as a way to analyze and design circuits by algebraic means in terms of <a href="http://en.m.wikipedia.org/wiki/Logic_gate" title="Logic gate">logic gates</a>. Shannon already had at his disposal the abstract mathematical apparatus, thus he cast his switching algebra as the <a href="http://en.m.wikipedia.org/wiki/Two-element_Boolean_algebra" title="Two-element Boolean algebra">two-element Boolean algebra</a>. In circuit engineering settings today, there is little need to consider other Boolean algebras, thus "switching algebra" and "Boolean algebra" are often used interchangeably.<sup id="cite_ref-BalabanianCarlson2001_5-0" class="reference"><a href="Boolean_algebra#cite_note-BalabanianCarlson2001-5"><span>[</span>5<span>]</span></a></sup><sup id="cite_ref-Radhakrishnan_6-0" class="reference"><a href="Boolean_algebra#cite_note-Radhakrishnan-6"><span>[</span>6<span>]</span></a></sup><sup id="cite_ref-Camara2010_7-0" class="reference"><a href="Boolean_algebra#cite_note-Camara2010-7"><span>[</span>7<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Logic_optimization" title="Logic optimization">Efficient implementation</a> of <a href="http://en.m.wikipedia.org/wiki/Boolean_function" title="Boolean function">Boolean functions</a> is a fundamental problem in the <a href="http://en.m.wikipedia.org/wiki/Logic_design" title="Logic design" class="mw-redirect">design</a> of <a href="http://en.m.wikipedia.org/wiki/Combinatorial_logic" title="Combinatorial logic" class="mw-redirect">combinatorial logic</a> circuits. Modern <a href="http://en.m.wikipedia.org/wiki/Electronic_design_automation" title="Electronic design automation">electronic design automation</a> tools for <a href="http://en.m.wikipedia.org/wiki/Very-large-scale_integration" title="Very-large-scale integration">VLSI circuits</a> often rely on an efficient representation of Boolean functions known as (reduced ordered) <a href="http://en.m.wikipedia.org/wiki/Binary_decision_diagram" title="Binary decision diagram">binary decision diagrams</a> (BDD) for <a href="http://en.m.wikipedia.org/wiki/Logic_synthesis" title="Logic synthesis">logic synthesis</a> and <a href="http://en.m.wikipedia.org/wiki/Formal_verification" title="Formal verification">formal verification</a>.<sup id="cite_ref-Chen2007_8-0" class="reference"><a href="Boolean_algebra#cite_note-Chen2007-8"><span>[</span>8<span>]</span></a></sup></p>
<p>Logic sentences that can be expressed in classical <a href="http://en.m.wikipedia.org/wiki/Propositional_calculus" title="Propositional calculus">propositional calculus</a> have an <a href="http://en.m.wikipedia.org/wiki/Algebraic_semantics" title="Algebraic semantics">equivalent expression</a> in Boolean algebra. Thus, <b>Boolean logic</b> is sometimes used to denote propositional calculus performed in this way.<sup id="cite_ref-Parkes2002_9-0" class="reference"><a href="Boolean_algebra#cite_note-Parkes2002-9"><span>[</span>9<span>]</span></a></sup><sup id="cite_ref-BarwiseEtchemendy1999_10-0" class="reference"><a href="Boolean_algebra#cite_note-BarwiseEtchemendy1999-10"><span>[</span>10<span>]</span></a></sup><sup id="cite_ref-Goertzel1994_11-0" class="reference"><a href="Boolean_algebra#cite_note-Goertzel1994-11"><span>[</span>11<span>]</span></a></sup> Boolean algebra is not sufficient to capture logic formulas using <a href="http://en.m.wikipedia.org/wiki/Quantifier" title="Quantifier" class="mw-redirect">quantifiers</a>, like those from <a href="http://en.m.wikipedia.org/wiki/First_order_logic" title="First order logic" class="mw-redirect">first order logic</a>. Although the development of mathematical logic did not follow Boole's program, the connection between his algebra and logic was later put on firm ground in the setting of <a href="http://en.m.wikipedia.org/wiki/Algebraic_logic" title="Algebraic logic">algebraic logic</a>, which also studies the algebraic systems of many other logics.<sup id="cite_ref-DunnHardegree2001_4-2" class="reference"><a href="Boolean_algebra#cite_note-DunnHardegree2001-4"><span>[</span>4<span>]</span></a></sup> The <a href="http://en.m.wikipedia.org/wiki/Decision_problem" title="Decision problem">problem of determining whether</a> the variables of a given Boolean (propositional) formula can be assigned in such a way as to make the formula evaluate to true is called the <a href="http://en.m.wikipedia.org/wiki/Boolean_satisfiability_problem" title="Boolean satisfiability problem">Boolean satisfiability problem</a> (SAT), and is of importance to <a href="http://en.m.wikipedia.org/wiki/Theoretical_computer_science" title="Theoretical computer science">theoretical computer science</a>, being the first problem shown to be <a href="http://en.m.wikipedia.org/wiki/NP-complete" title="NP-complete">NP-complete</a>. The closely related <a href="http://en.m.wikipedia.org/wiki/Model_of_computation" title="Model of computation">model of computation</a> known as a <a href="http://en.m.wikipedia.org/wiki/Boolean_circuit" title="Boolean circuit">Boolean circuit</a> relates <a href="http://en.m.wikipedia.org/wiki/Time_complexity" title="Time complexity">time complexity</a> (of an <a href="http://en.m.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a>) to <a href="http://en.m.wikipedia.org/wiki/Circuit_complexity" title="Circuit complexity">circuit complexity</a>.</p>
<h2> <span class="mw-headline" id="Values">Values</span>
</h2>
<p>Whereas elementary algebra deals mainly with <a href="http://en.m.wikipedia.org/wiki/Real_number" title="Real number">real numbers</a>, Boolean algebra deals with the values 0 and 1. These can be thought of as two integers, or as the truth values <i>false</i> and <i>true</i> respectively. In either case they are called <a href="Bit" title="Bit">bits</a> or binary digits, in contrast to the decimal digits 0 through 9.</p>
<p>Boolean algebra also deals with other values on which Boolean operations can be defined, such as <a href="http://en.m.wikipedia.org/wiki/Set_(mathematics)" title="Set (mathematics)">sets</a> or <a href="http://en.m.wikipedia.org/wiki/Bit_vector" title="Bit vector" class="mw-redirect">sequences of bits</a>. However, Boolean algebra is unlike many other systems of algebra in that it obeys exactly the same laws (equational properties), neither more nor fewer, no matter which of these other values are employed. Much of the subject can therefore be introduced without reference to any values besides 0 and 1.<sup id="cite_ref-12" class="reference"><a href="Boolean_algebra#cite_note-12"><span>[</span>12<span>]</span></a></sup> Other values are treated in the section on <a href="Boolean_algebra#Boolean_algebras" title="Boolean algebra">Boolean algebras</a>.</p>
<h2> <span class="mw-headline" id="Operations">Operations</span>
</h2>
<h3> <span class="mw-headline" id="Basic_operations">Basic operations</span>
</h3>
<p>Some operations of ordinary algebra, in particular multiplication <i>xy</i>, addition <i>x</i> + <i>y</i>, and negation −<i>x</i>, have their counterparts in Boolean algebra, respectively the Boolean operations AND, OR, and NOT, also called <b>conjunction</b> <i>x</i>∧<i>y</i>, or K<i>xy</i>, <b>disjunction</b> <i>x</i>∨<i>y</i>, or A<i>xy</i>, and <b>negation</b> or <b>complement</b> ¬<i>x</i>, N<i>x</i>, or sometimes !<i>x</i>. Some authors use instead the same arithmetic operations as ordinary algebra reinterpreted for Boolean algebra, treating <i>xy</i> as synonymous with <i>x</i>∧<i>y</i> and <i>x</i>+<i>y</i> with <i>x</i>∨<i>y</i>.</p>
<p><b>Conjunction</b> <i>x</i>∧<i>y</i> behaves on 0 and 1 exactly as <b>multiplication</b> does for ordinary algebra: if either <i>x</i> or <i>y</i> is 0 then <i>x</i>∧<i>y</i> is 0, but if both are 1 then <i>x</i>∧<i>y</i> is 1.</p>
<p><b>Disjunction</b> <i>x</i>∨<i>y</i> works almost like <b>addition</b>, with 0∨0 = 0 and 1∨0 = 1 and 0∨1 = 1. However there is a difference: 1∨1 is not 2 but 1.</p>
<p><b>Complement</b> resembles ordinary <b>negation</b> in that it exchanges values. But whereas in ordinary algebra negation interchanges 1 and −1, 2 and −2, etc. while leaving 0 fixed, in Boolean algebra complement interchanges 0 and 1. One can think of ordinary negation as reflecting about 0, and Boolean complement as reflecting about the midpoint of 0 and 1. Complement can be defined arithmetically as ¬<i>x</i> = 1−<i>x</i> because the latter maps 0 to 1 and vice versa, the behavior of ¬<i>x</i>.</p>
<p>In summary the three <b>basic Boolean operations</b> can be defined arithmetically as follows.</p>
<table style="margin-left: auto; margin-right: auto;">
<tr>
<td></td>
<td>
<i>x</i>∧<i>y</i>
</td>
<td>=</td>
<td><i>xy</i></td>
</tr>
<tr>
<td></td>
<td>
<i>x</i>∨<i>y</i>
</td>
<td>=</td>
<td>
<i>x</i> + <i>y</i> − <i>xy</i>
</td>
</tr>
<tr>
<td></td>
<td>¬<i>x</i>
</td>
<td>=</td>
<td>1 − <i>x</i>
</td>
</tr>
</table>
<p>Alternatively the values of <i>x</i>∧<i>y</i>, <i>x</i>∨<i>y</i>, and ¬<i>x</i> can be expressed without reference to arithmetic operations by tabulating their values with <a href="http://en.m.wikipedia.org/wiki/Truth_tables" title="Truth tables" class="mw-redirect">truth tables</a> as follows.</p>
<div>
<center>
<dl>
<dd>
<dl>
<dd>
<b>Figure 1. Truth tables</b>
<table border="0" style="border:4px"><tr valign="top">
<td></td>
<td colspan="5">
<table border="1" cellspacing="0" cellpadding="0" style="text-align:center;border:2px">
<tr>
<th style="width:2em"><i>x</i></th>
<th style="width:2em"><i>y</i></th>
<td style="width:1px"></td>
<td style="width:2em">
<i>x</i>∧<i>y</i>
</td>
<td style="width:2em">
<i>x</i>∨<i>y</i>
</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td></td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td></td>
<td>1</td>
<td>1</td>
</tr>
</table>
</td>
<td></td>
<td></td>
<td>
<table border="1" cellspacing="0" cellpadding="0" style="text-align:center;border:2px">
<tr>
<th style="width:2em"><i>x</i></th>
<td style="width:1px"></td>
<td style="width:2em">¬<i>x</i>
</td>
</tr>
<tr>
<td>0</td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td>0</td>
</tr>
</table>
</td>
</tr></table>
</dd>
</dl>
</dd>
</dl>
</center>
</div>
<p>For the two binary operations ∧ and ∨ the truth tables list all four possible combinations of values for <i>x</i> and <i>y</i>, one per line. For each combination the truth tables tabulate the values of <i>x</i>∧<i>y</i> and <i>x</i>∨<i>y</i>. The truth values of ¬<i>x</i> are tabulated similarly except that only two lines are needed because there is only one variable.</p>
<p>Yet another way of specifying these operations is with equations explicitly giving their values.</p>
<table style="margin-left: auto; margin-right: auto;">
<tr>
<td>0∧0</td>
<td>=</td>
<td style="width:60px">0</td>
<td>0∨0</td>
<td>=</td>
<td>0</td>
</tr>
<tr>
<td>0∧1</td>
<td>=</td>
<td>0</td>
<td>0∨1</td>
<td>=</td>
<td>1</td>
</tr>
<tr>
<td>1∧0</td>
<td>=</td>
<td>0</td>
<td>1∨0</td>
<td>=</td>
<td>1</td>
</tr>
<tr>
<td>1∧1</td>
<td>=</td>
<td>1</td>
<td>1∨1</td>
<td>=</td>
<td>1</td>
</tr>
<tr>
<td style="text-align: right;">¬0</td>
<td>=</td>
<td>1</td>
<td style="text-align: right;">¬1</td>
<td>=</td>
<td>0</td>
</tr>
</table>
<h3> <span class="mw-headline" id="Derived_operations">Derived operations</span>
</h3>
<p>We have so far seen three Boolean operations. We referred to these as basic, meaning that they can be taken as a basis for other Boolean operations that can be built up from them by <b>composition,</b> the manner in which operations are combined or compounded. Here are some examples of operations composed from the basic operations.</p>
<table style="margin-left: auto; margin-right: auto;">
<tr>
<td style="text-align: right;">
<i>x</i> → <i>y</i>
</td>
<td>=</td>
<td>(¬<i>x</i> ∨ <i>y</i>)</td>
</tr>
<tr>
<td style="text-align: right;">
<i>x</i> ⊕ <i>y</i>
</td>
<td>=</td>
<td>(<i>x</i> ∨ <i>y</i>) ∧ ¬(<i>x</i> ∧ <i>y</i>)</td>
</tr>
<tr>
<td style="text-align: right;">
<i>x</i> ≡ <i>y</i>
</td>
<td>=</td>
<td>¬(<i>x</i> ⊕ <i>y</i>)</td>
</tr>
</table>
<p>These definitions give rise to the following truth tables giving the values of these operations for all four possible inputs.</p>
<table border="1" cellspacing="0" cellpadding="0" style="margin-left: auto; margin-right: auto; text-align:center;border:2px">
<tr>
<th style="width:2em"><i>x</i></th>
<th style="width:2em"><i>y</i></th>
<td style="width:1px"></td>
<td style="width:2em">
<i>x</i> → <i>y</i>
</td>
<td style="width:2em">
<i>x</i> ⊕ <i>y</i>
</td>
<td style="width:2em">
<i>x</i> ≡ <i>y</i>
</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td></td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td></td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td></td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td></td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</table>
<p>The first operation, <i>x</i> → <i>y</i>, or C<i>xy</i>, is called <b>material implication</b>. If <i>x</i> is true then the value of <i>x</i> → <i>y</i> is taken to be that of <i>y</i>. But if <i>x</i> is false then we ignore the value of <i>y</i>; however we must return <i>some</i> truth value and there are only two choices, so we choose the value that entails less, namely <i>true</i>. (<a href="http://en.m.wikipedia.org/wiki/Relevance_logic" title="Relevance logic">Relevance logic</a> addresses this by viewing an implication with a <a href="http://en.m.wikipedia.org/wiki/False_premise" title="False premise">false premise</a> as something other than either true or false.)</p>
<p>The second operation, <i>x</i> ⊕ <i>y</i>, or J<i>xy</i>, is called <b><a href="http://en.m.wikipedia.org/wiki/Exclusive_or" title="Exclusive or">exclusive or</a></b> to distinguish it from disjunction as the inclusive kind. It excludes the possibility of both <i>x</i> and <i>y</i>. Defined in terms of arithmetic it is addition mod 2 where 1 + 1 = 0.</p>
<p>The third operation, the complement of exclusive or, is <b>equivalence</b> or Boolean equality: <i>x</i> ≡ <i>y</i>, or E<i>xy</i>, is true just when <i>x</i> and <i>y</i> have the same value. Hence <i>x</i> ⊕ <i>y</i> as its complement can be understood as <i>x</i> ≠ <i>y</i>, being true just when <i>x</i> and <i>y</i> are different. Its counterpart in arithmetic mod 2 is <i>x</i> + <i>y</i> + 1.</p>
<h2> <span class="mw-headline" id="Laws">Laws</span>
</h2>
<p>A <b>law</b> of Boolean algebra is an equation such as <i>x</i>∨(<i>y</i>∨<i>z</i>) = (<i>x</i>∨<i>y</i>)∨<i>z</i> between two Boolean terms, where a <b>Boolean term</b> is defined as an expression built up from variables and the constants 0 and 1 using the operations ∧, ∨, and ¬. The concept can be extended to terms involving other Boolean operations such as ⊕, →, and ≡, but such extensions are unnecessary for the purposes to which the laws are put. Such purposes include the definition of a <a href="Boolean_algebra#Boolean_algebras" title="Boolean algebra">Boolean algebra</a> as any <a href="http://en.m.wikipedia.org/wiki/Model_(logic)" title="Model (logic)" class="mw-redirect">model</a> of the Boolean laws, and as a means for deriving new laws from old as in the derivation of <i>x</i>∨(<i>y</i>∧<i>z</i>) = <i>x</i>∨(<i>z</i>∧<i>y</i>) from <i>y</i>∧<i>z</i> = <i>z</i>∧<i>y</i> as treated in the section on <a href="Boolean_algebra#Axiomatizing_Boolean_algebra" title="Boolean algebra">axiomatization</a>.</p>
<h3> <span class="mw-headline" id="Monotone_laws">Monotone laws</span>
</h3>
<p>Boolean algebra satisfies many of the same laws as ordinary algebra when we match up ∨ with addition and ∧ with multiplication. In particular the following laws are common to both kinds of algebra:<sup id="cite_ref-O.27Regan_p33_13-0" class="reference"><a href="Boolean_algebra#cite_note-O.27Regan_p33-13"><span>[</span>13<span>]</span></a></sup></p>
<table style="margin-left: auto; margin-right: auto;">
<tr>
<td style="width: 200px;">(Associativity of ∨)</td>
<td style="text-align: right;">
<i>x</i>∨(<i>y</i>∨<i>z</i>)</td>
<td>=</td>
<td>(<i>x</i>∨<i>y</i>)∨<i>z</i>
</td>
</tr>
<tr>
<td>(Associativity of ∧)</td>
<td style="text-align: right;">
<i>x</i>∧(<i>y</i>∧<i>z</i>)</td>
<td>=</td>
<td>(<i>x</i>∧<i>y</i>)∧<i>z</i>
</td>
</tr>
<tr>
<td>(Commutativity of ∨)</td>
<td style="text-align: right;">
<i>x</i>∨<i>y</i>
</td>
<td>=</td>
<td>
<i>y</i>∨<i>x</i>
</td>
</tr>
<tr>
<td>(Commutativity of ∧)</td>
<td style="text-align: right;">
<i>x</i>∧<i>y</i>
</td>
<td>=</td>
<td>
<i>y</i>∧<i>x</i>
</td>
</tr>
<tr>
<td>(Distributivity of ∧ over ∨)</td>
<td style="text-align: right;">
<i>x</i>∧(<i>y</i>∨<i>z</i>)</td>
<td>=</td>
<td>(<i>x</i>∧<i>y</i>)∨(<i>x</i>∧<i>z</i>)</td>
</tr>
<tr>
<td>(Identity for ∨)</td>
<td style="text-align: right;">
<i>x</i>∨0</td>
<td>=</td>
<td><i>x</i></td>
</tr>
<tr>
<td>(Identity for ∧)</td>
<td style="text-align: right;">
<i>x</i>∧1</td>
<td>=</td>
<td><i>x</i></td>
</tr>
<tr>
<td>(Annihilator for ∧)</td>
<td style="text-align: right;">
<i>x</i>∧0</td>
<td>=</td>
<td>0</td>
</tr>
</table>
<p>Boolean algebra however obeys some additional laws, in particular the following:<sup id="cite_ref-O.27Regan_p33_13-1" class="reference"><a href="Boolean_algebra#cite_note-O.27Regan_p33-13"><span>[</span>13<span>]</span></a></sup></p>
<table style="margin-left: auto; margin-right: auto;">
<tr>
<td style="width: 200px;">(Idempotence of ∨)</td>
<td style="text-align: right;">
<i>x</i>∨<i>x</i>
</td>
<td>=</td>
<td><i>x</i></td>
</tr>
<tr>
<td>(Idempotence of ∧)</td>
<td style="text-align: right;">
<i>x</i>∧<i>x</i>
</td>
<td>=</td>
<td><i>x</i></td>
</tr>
<tr>
<td>(Absorption 1)</td>
<td style="text-align: right;">
<i>x</i>∧(<i>x</i>∨<i>y</i>)</td>
<td>=</td>
<td><i>x</i></td>
</tr>
<tr>
<td>(Absorption 2)</td>
<td style="text-align: right;">
<i>x</i>∨(<i>x</i>∧<i>y</i>)</td>
<td>=</td>
<td><i>x</i></td>
</tr>
<tr>
<td>(Distributivity of ∨ over ∧)</td>
<td style="text-align: right;">
<i>x</i>∨(<i>y</i>∧<i>z</i>)</td>
<td>=</td>
<td>(<i>x</i>∨<i>y</i>)∧(<i>x</i>∨<i>z</i>)</td>
</tr>
<tr>
<td>(Annihilator for ∨)</td>
<td style="text-align: right;">
<i>x</i>∨1</td>
<td>=</td>
<td>1</td>
</tr>
</table>
<p>A consequence of the first of these laws is 1∨1 = 1, which is false in ordinary algebra, where 1+1 = 2. Taking <i>x</i> = 2 in the second law shows that it is not an ordinary algebra law either, since 2×2 = 4. The remaining four laws can be falsified in ordinary algebra by taking all variables to be 1, for example in Absorption Law 1 the left hand side is 1(1+1) = 2 while the right hand side is 1, and so on.</p>
<p>All of the laws treated so far have been for conjunction and disjunction. These operations have the property that changing either argument either leaves the output unchanged or the output changes in the same way as the input. Equivalently, changing any variable from 0 to 1 never results in the output changing from 1 to 0. Operations with this property are said to be <b>monotone</b>. Thus the axioms so far have all been for monotonic Boolean logic. Nonmonotonicity enters via complement ¬ as follows.<sup id="cite_ref-givhal_2-1" class="reference"><a href="Boolean_algebra#cite_note-givhal-2"><span>[</span>2<span>]</span></a></sup></p>
<h3> <span class="mw-headline" id="Nonmonotone_laws">Nonmonotone laws</span>
</h3>
<p>The complement operation is defined by the following two laws.</p>
<table style="margin-left: auto; margin-right: auto;">
<tr>
<td style="width: 200px;">(Complementation 1)</td>
<td style="text-align: right;">      <i>x</i>∧¬<i>x</i>
</td>
<td>=</td>
<td>0         </td>
</tr>
<tr>
<td>(Complementation 2)</td>
<td style="text-align: right;">
<i>x</i>∨¬<i>x</i>
</td>
<td>=</td>
<td>1.</td>
</tr>
</table>
<p>All properties of negation including the laws below follow from the above two laws alone.<sup id="cite_ref-givhal_2-2" class="reference"><a href="Boolean_algebra#cite_note-givhal-2"><span>[</span>2<span>]</span></a></sup></p>
<p>In both ordinary and Boolean algebra, negation works by exchanging pairs of elements, whence in both algebras it satisfies the double negation law (also called involution law)</p>
<table style="margin-left: auto; margin-right: auto;"><tr>
<td style="width: 200px;">(Double negation)</td>
<td style="text-align: right;">     ¬¬x = x.       </td>
</tr></table>
<p>But whereas ordinary algebra satisfies the two laws</p>
<table style="margin-left: auto; margin-right: auto;">
<tr>
<td style="width: 200px;"></td>
<td style="text-align: right;">(−<i>x</i>)(−<i>y</i>)</td>
<td>=</td>
<td><i>xy</i></td>
</tr>
<tr>
<td></td>
<td style="text-align: right;">(−<i>x</i>) + (−<i>y</i>)</td>
<td>=</td>
<td>−(<i>x</i> + <i>y</i>),</td>
</tr>
</table>
<p>Boolean algebra satisfies <a href="http://en.m.wikipedia.org/wiki/De_Morgan%27s_laws" title="De Morgan's laws">De Morgan's laws</a>,</p>
<table style="margin-left: auto; margin-right: auto;">
<tr>
<td style="width: 200px;">(De Morgan 1)</td>
<td style="text-align: right;">(¬<i>x</i>)∧(¬<i>y</i>)</td>
<td>=</td>
<td>¬(<i>x</i>∨<i>y</i>)</td>
</tr>
<tr>
<td>(De Morgan 2)</td>
<td style="text-align: right;">(¬<i>x</i>)∨(¬<i>y</i>)</td>
<td>=</td>
<td>¬(<i>x</i>∧<i>y</i>).</td>
</tr>
</table>
<h3> <span class="mw-headline" id="Completeness">Completeness</span>
</h3>
<p>At this point we can now claim to have defined Boolean algebra, in the sense that the laws we have listed up to now entail the rest of the subject. The laws <i>Complementation</i> 1 and 2, together with the monotone laws, suffice for this purpose and can therefore be taken as one possible <i>complete</i> set of laws or <a href="http://en.m.wikipedia.org/wiki/Axiomatization" title="Axiomatization" class="mw-redirect">axiomatization</a> of Boolean algebra. Every law of Boolean algebra follows logically from these axioms. Furthermore Boolean algebras can then be defined as the <a href="http://en.m.wikipedia.org/wiki/Model_(logic)" title="Model (logic)" class="mw-redirect">models</a> of these axioms as treated in the <a href="Boolean_algebra#Boolean_algebras" title="Boolean algebra">section thereon</a>.</p>
<p>To clarify, writing down further laws of Boolean algebra cannot give rise to any new consequences of these axioms, nor can it rule out any model of them. Had we stopped listing laws too soon, there would have been Boolean laws that did not follow from those on our list, and moreover there would have been models of the listed laws that were not Boolean algebras.</p>
<p>This axiomatization is by no means the only one, or even necessarily the most natural given that we did not pay attention to whether some of the axioms followed from others but simply chose to stop when we noticed we had enough laws, treated further in the section on <a href="Boolean_algebra#Axiomatizing_Boolean_algebra" title="Boolean algebra">axiomatizations</a>. Or the intermediate notion of axiom can be sidestepped altogether by defining a Boolean law directly as any <b>tautology</b>, understood as an equation that holds for all values of its variables over 0 and 1. All these definitions of Boolean algebra can be shown to be equivalent.</p>
<p>Boolean algebra has the interesting property that <i>x</i> = <i>y</i> can be proved from any non-tautology. This is because the substitution instance of any non-tautology obtained by instantiating its variables with constants 0 or 1 so as to witness its non-tautologyhood reduces by equational reasoning to 0 = 1. For example the non-tautologyhood of <i>x</i>∧<i>y</i> = <i>x</i> is witnessed by <i>x</i> = 1 and <i>y</i> = 0 and so taking this as an axiom would allow us to infer 1∧0 = 1 as a substitution instance of the axiom and hence 0 = 1. We can then show <i>x</i> = <i>y</i> by the reasoning <i>x</i> = <i>x</i>∧1 = <i>x</i>∧0 = 0 = 1 = <i>y</i>∨1 = <i>y</i>∨0 = <i>y</i>.</p>
<h3> <span class="mw-headline" id="Duality_principle">Duality principle</span>
</h3>
<p>There is nothing magical about the choice of symbols for the values of Boolean algebra. We could rename 0 and 1 to say α and β, and as long as we did so consistently throughout it would still be Boolean algebra, albeit with some obvious cosmetic differences.</p>
<p>But suppose we rename 0 and 1 to 1 and 0 respectively. Then it would still be Boolean algebra, and moreover operating on the same values. However it would not be identical to our original Boolean algebra because now we find ∨ behaving the way ∧ used to do and vice versa. So there are still some cosmetic differences to show that we've been fiddling with the notation, despite the fact that we're still using 0s and 1s.</p>
<p>But if in addition to interchanging the names of the values we also interchange the names of the two binary operations, <i>now</i> there is no trace of what we have done. The end product is completely indistinguishable from what we started with. We might notice that the columns for <i>x</i>∧<i>y</i> and <i>x</i>∨<i>y</i> in the truth tables had changed places, but that switch is immaterial.</p>
<p>When values and operations can be paired up in a way that leaves everything important unchanged when all pairs are switched simultaneously, we call the members of each pair <b>dual</b> to each other. Thus 0 and 1 are dual, and ∧ and ∨ are dual. The <b>Duality Principle</b>, also called <a href="http://en.m.wikipedia.org/wiki/De_Morgan%27s_laws" title="De Morgan's laws">De Morgan duality</a>, asserts that Boolean algebra is unchanged when all dual pairs are interchanged.</p>
<p>One change we did not need to make as part of this interchange was to complement. We say that complement is a <b>self-dual</b> operation. The identity or do-nothing operation <i>x</i> (copy the input to the output) is also self-dual. A more complicated example of a self-dual operation is (<i>x</i>∧<i>y</i>) ∨ (<i>y</i>∧<i>z</i>) ∨ (<i>z</i>∧<i>x</i>). It can be shown that self-dual operations must take an odd number of arguments; thus there can be no self-dual binary operation.</p>
<p>The principle of duality can be explained from a <a href="http://en.m.wikipedia.org/wiki/Group_theory" title="Group theory">group theory</a> perspective by fact that there are exactly four functions that are one-to-one mappings (<a href="http://en.m.wikipedia.org/wiki/Automorphism" title="Automorphism">automorphisms</a>) of the set of Boolean <a href="http://en.m.wikipedia.org/wiki/Polynomial" title="Polynomial">polynomials</a> back to itself: the identity function, the complement function, the dual function and the contradual function (complemented dual). These four functions form a <a href="http://en.m.wikipedia.org/wiki/Group_(mathematics)" title="Group (mathematics)">group</a> under <a href="http://en.m.wikipedia.org/wiki/Function_composition" title="Function composition">function composition</a>, isomorphic to the <a href="http://en.m.wikipedia.org/wiki/Klein_four-group" title="Klein four-group">Klein four-group</a>, <a href="http://en.m.wikipedia.org/wiki/Group_action" title="Group action">acting</a> on the set of Boolean polynomials.<sup id="cite_ref-GivantHalmos2009_14-0" class="reference"><a href="Boolean_algebra#cite_note-GivantHalmos2009-14"><span>[</span>14<span>]</span></a></sup></p>
<h2> <span class="mw-headline" id="Diagrammatic_representations">Diagrammatic representations</span>
</h2>
<h3> <span class="mw-headline" id="Venn_diagrams">Venn diagrams</span>
</h3>
<p>A <a href="http://en.m.wikipedia.org/wiki/Venn_diagram" title="Venn diagram">Venn diagram</a><sup id="cite_ref-15" class="reference"><a href="Boolean_algebra#cite_note-15"><span>[</span>15<span>]</span></a></sup> is a representation of a Boolean operation using shaded overlapping regions. There is one region for each variable, all circular in the examples here. The interior and exterior of region <i>x</i> corresponds respectively to the values 1 (true) and 0 (false) for variable <i>x</i>. The shading indicates the value of the operation for each combination of regions, with dark denoting 1 and light 0 (some authors use the opposite convention).</p>
<p>The three Venn diagrams in the figure below represent respectively conjunction <i>x</i>∧<i>y</i>, disjunction <i>x</i>∨<i>y</i>, and complement ¬<i>x</i>.</p>
<div class="center">
<div class="thumb tnone">
<div class="thumbinner" style="width:502px;">
<a href="http://en.m.wikipedia.org/wiki/File:Vennandornot.svg" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Vennandornot.svg/500px-Vennandornot.svg.png" width="500" height="172" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Vennandornot.svg/750px-Vennandornot.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Vennandornot.svg/1000px-Vennandornot.svg.png 2x"></a>
<div class="thumbcaption">

Figure 2. Venn diagrams for conjunction, disjunction, and complement</div>
</div>
</div>
</div>
<p>For conjunction, the region inside both circles is shaded to indicate that <i>x</i>∧<i>y</i> is 1 when both variables are 1. The other regions are left unshaded to indicate that <i>x</i>∧<i>y</i> is 0 for the other three combinations.</p>
<p>The second diagram represents disjunction <i>x</i>∨<i>y</i> by shading those regions that lie inside either or both circles. The third diagram represents complement ¬<i>x</i> by shading the region <i>not</i> inside the circle.</p>
<p>While we have not shown the Venn diagrams for the constants 0 and 1, they are trivial, being respectively a white box and a dark box, neither one containing a circle. However we could put a circle for <i>x</i> in those boxes, in which case each would denote a function of one argument, <i>x</i>, which returns the same value independently of <i>x</i>, called a constant function. As far as their outputs are concerned, constants and constant functions are indistinguishable; the difference is that a constant takes no arguments, called a <i>zeroary</i> or <i>nullary</i> operation, while a constant function takes one argument, which it ignores, and is a <i>unary</i> operation.</p>
<p>Venn diagrams are helpful in visualizing laws. The commutativity laws for ∧ and ∨ can be seen from the symmetry of the diagrams: a binary operation that was not commutative would not have a symmetric diagram because interchanging <i>x</i> and <i>y</i> would have the effect of reflecting the diagram horizontally and any failure of commutativity would then appear as a failure of symmetry.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Idempotence" title="Idempotence">Idempotence</a> of ∧ and ∨ can be visualized by sliding the two circles together and noting that the shaded area then becomes the whole circle, for both ∧ and ∨.</p>
<p>To see the first absorption law, <i>x</i>∧(<i>x</i>∨<i>y</i>) = <i>x</i>, start with the diagram in the middle for <i>x</i>∨<i>y</i> and note that the portion of the shaded area in common with the <i>x</i> circle is the whole of the <i>x</i> circle. For the second absorption law, <i>x</i>∨(<i>x</i>∧<i>y</i>) = <i>x</i>, start with the left diagram for <i>x</i>∧<i>y</i> and note that shading the whole of the <i>x</i> circle results in just the <i>x</i> circle being shaded, since the previous shading was inside the <i>x</i> circle.</p>
<p>The double negation law can be seen by complementing the shading in the third diagram for ¬<i>x</i>, which shades the <i>x</i> circle.</p>
<p>To visualize the first De Morgan's law, (¬<i>x</i>)∧(¬<i>y</i>) = ¬(<i>x</i>∨<i>y</i>), start with the middle diagram for <i>x</i>∨<i>y</i> and complement its shading so that only the region outside both circles is shaded, which is what the right hand side of the law describes. The result is the same as if we shaded that region which is both outside the <i>x</i> circle <i>and</i> outside the <i>y</i> circle, i.e. the conjunction of their exteriors, which is what the left hand side of the law describes.</p>
<p>The second De Morgan's law, (¬<i>x</i>)∨(¬<i>y</i>) = ¬(<i>x</i>∧<i>y</i>), works the same way with the two diagrams interchanged.</p>
<p>The first complement law, <i>x</i>∧¬<i>x</i> = 0, says that the interior and exterior of the <i>x</i> circle have no overlap. The second complement law, <i>x</i>∨¬<i>x</i> = 1, says that everything is either inside or outside the <i>x</i> circle.</p>
<h3> <span class="mw-headline" id="Digital_logic_gates">Digital logic gates</span>
</h3>
<p>Digital logic is the application of the Boolean algebra of 0 and 1 to electronic hardware consisting of <a href="http://en.m.wikipedia.org/wiki/Logic_gates" title="Logic gates" class="mw-redirect">logic gates</a> connected to form a <a href="http://en.m.wikipedia.org/wiki/Circuit_diagram" title="Circuit diagram">circuit diagram</a>. Each gate implements a Boolean operation, and is depicted schematically by a shape indicating the operation. The shapes associated with the gates for conjunction (AND-gates), disjunction (OR-gates), and complement (inverters) are as follows.<sup id="cite_ref-16" class="reference"><a href="Boolean_algebra#cite_note-16"><span>[</span>16<span>]</span></a></sup></p>
<div class="center">
<div class="thumb tnone">
<div class="thumbinner" style="width:402px;">
<a href="http://en.m.wikipedia.org/wiki/File:LogicGates.GIF" class="image"><img alt="LogicGates.GIF" src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/41/LogicGates.GIF/400px-LogicGates.GIF" width="400" height="82" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/41/LogicGates.GIF/600px-LogicGates.GIF 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/41/LogicGates.GIF/800px-LogicGates.GIF 2x"></a>
<div class="thumbcaption">

</div>
</div>
</div>
</div>
<p>The lines on the left of each gate represent input wires or <i>ports</i>. The value of the input is represented by a voltage on the lead. For so-called "active-high" logic 0 is represented by a voltage close to zero or "ground" while 1 is represented by a voltage close to the supply voltage; active-low reverses this. The line on the right of each gate represents the output port, which normally follows the same voltage conventions as the input ports.</p>
<p>Complement is implemented with an inverter gate. The triangle denotes the operation that simply copies the input to the output; the small circle on the output denotes the actual inversion complementing the input. The convention of putting such a circle on any port means that the signal passing through this port is complemented on the way through, whether it is an input or output port.</p>
<p>There being eight ways of labeling the three ports of an AND-gate or OR-gate with inverters, this convention gives a wide range of possible Boolean operations realized as such gates so decorated. Not all combinations are distinct however: any labeling of AND-gate ports with inverters realizes the same Boolean operation as the opposite labeling of OR-gate ports (a given port of the AND-gate is labeled with an inverter if and only if the corresponding port of the OR-gate is not so labeled). This follows from <a href="http://en.m.wikipedia.org/wiki/De_Morgan%27s_laws" title="De Morgan's laws">De Morgan's laws</a>.</p>
<p>If we complement all ports on every gate, and interchange AND-gates and OR-gates, as in Figure 4 below, we end up with the same operations as we started with, illustrating both <a href="http://en.m.wikipedia.org/wiki/De_Morgan%27s_laws" title="De Morgan's laws">De Morgan's laws</a> and the Duality Principle. Note that we did not need to change the triangle part of the inverter, illustrating self-duality for complement.</p>
<div class="center">
<div class="thumb tnone">
<div class="thumbinner" style="width:402px;">
<a href="http://en.m.wikipedia.org/wiki/File:DeMorganGates.GIF" class="image"><img alt="DeMorganGates.GIF" src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/DeMorganGates.GIF/400px-DeMorganGates.GIF" width="400" height="82" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/3/3a/DeMorganGates.GIF/600px-DeMorganGates.GIF 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/3/3a/DeMorganGates.GIF/800px-DeMorganGates.GIF 2x"></a>
<div class="thumbcaption">

</div>
</div>
</div>
</div>
<p>Because of the pairwise identification of gates via the Duality Principle, even though 16 schematic symbols can be manufactured from the two basic binary gates AND and OR by furnishing their ports with inverters (circles), they only represent eight Boolean operations, namely those operations with an odd number of ones in their truth table. Altogether there are 16 binary Boolean operations, the other eight being those with an even number of ones in their truth table, namely the following. The constant 0, viewed as a binary operation that ignores both its inputs, has no ones, the six operations <i>x</i>, <i>y</i>, ¬<i>x</i>, ¬<i>y</i> (as binary operations that ignore one input), <i>x</i>⊕<i>y</i>, and <i>x</i>≡<i>y</i> have two ones, and the constant 1 has four ones.</p>
<h2> <span class="mw-headline" id="Boolean_algebras">Boolean algebras</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Boolean_algebra_(structure)" title="Boolean algebra (structure)">Boolean algebra (structure)</a>
</div>
<p>The term "algebra" denotes both a subject, namely the subject of <a href="http://en.m.wikipedia.org/wiki/Algebra" title="Algebra">algebra</a>, and an object, namely an <a href="http://en.m.wikipedia.org/wiki/Algebraic_structure" title="Algebraic structure">algebraic structure</a>. Whereas the foregoing has addressed the subject of Boolean algebra, this section deals with mathematical objects called Boolean algebras, defined in full generality as any model of the Boolean laws. We begin with a special case of the notion definable without reference to the laws, namely concrete Boolean algebras, and then give <a href="Boolean_algebra#Boolean_algebras:_the_definition">the formal definition</a> of the general notion.</p>
<h3> <span class="mw-headline" id="Concrete_Boolean_algebras">Concrete Boolean algebras</span>
</h3>
<p>A <b>concrete Boolean algebra</b> or <a href="http://en.m.wikipedia.org/wiki/Field_of_sets" title="Field of sets">field of sets</a> is any nonempty set of subsets of a given set <i>X</i> closed under the set operations of <a href="http://en.m.wikipedia.org/wiki/Union_(set_theory)" title="Union (set theory)">union</a>, <a href="http://en.m.wikipedia.org/wiki/Intersection_(set_theory)" title="Intersection (set theory)">intersection</a>, and <a href="http://en.m.wikipedia.org/wiki/Complement_(set_theory)#Relative_complement" title="Complement (set theory)">complement</a> relative to <i>X</i>.<sup id="cite_ref-givhal_2-3" class="reference"><a href="Boolean_algebra#cite_note-givhal-2"><span>[</span>2<span>]</span></a></sup></p>
<p>(As an aside, historically <i>X</i> itself was required to be nonempty as well to exclude the degenerate or one-element Boolean algebra, which is the one exception to the rule that all Boolean algebras satisfy the same equations since the degenerate algebra satisfies every equation. However this exclusion conflicts with the preferred purely equational definition of "Boolean algebra," there being no way to rule out the one-element algebra using only equations— 0 ≠ 1 does not count, being a negated equation. Hence modern authors allow the degenerate Boolean algebra and let <i>X</i> be empty.)</p>
<p><b>Example 1.</b> The <a href="http://en.m.wikipedia.org/wiki/Power_set" title="Power set">power set</a> 2<sup><i>X</i></sup> of <i>X</i>, consisting of all subsets of <i>X</i>. Here <i>X</i> may be any set: empty, finite, infinite, or even <a href="http://en.m.wikipedia.org/wiki/Uncountable" title="Uncountable" class="mw-redirect">uncountable</a>.</p>
<p><b>Example 2.</b> The empty set and <i>X</i>. This two-element algebra shows that a concrete Boolean algebra can be finite even when it consists of subsets of an infinite set. It can be seen that every field of subsets of <i>X</i> must contain the empty set and <i>X</i>. Hence no smaller example is possible, other than the degenerate algebra obtained by taking <i>X</i> to be empty so as to make the empty set and <i>X</i> coincide.</p>
<p><b>Example 3.</b> The set of finite and <a href="http://en.m.wikipedia.org/wiki/Cofinite" title="Cofinite" class="mw-redirect">cofinite</a> sets of integers, where a cofinite set is one omitting only finitely many integers. This is clearly closed under complement, and is closed under union because the union of a cofinite set with any set is cofinite, while the union of two finite sets is finite. Intersection behaves like union with "finite" and "cofinite" interchanged.</p>
<p><b>Example 4.</b> For a less trivial example of the point made by Example 2, consider a <a href="http://en.m.wikipedia.org/wiki/Venn_diagram" title="Venn diagram">Venn diagram</a> formed by <i>n</i> closed curves <a href="http://en.m.wikipedia.org/wiki/Partition_of_a_set" title="Partition of a set">partitioning</a> the diagram into 2<sup><i>n</i></sup> regions, and let <i>X</i> be the (infinite) set of all points in the plane not on any curve but somewhere within the diagram. The interior of each region is thus an infinite subset of <i>X</i>, and every point in <i>X</i> is in exactly one region. Then the set of all 2<sup><span>2<sup><i>n</i></sup></span></sup> possible unions of regions (including the empty set obtained as the union of the empty set of regions and <i>X</i> obtained as the union of all 2<sup><i>n</i></sup> regions) is closed under union, intersection, and complement relative to <i>X</i> and therefore forms a concrete Boolean algebra. Again we have finitely many subsets of an infinite set forming a concrete Boolean algebra, with Example 2 arising as the case <i>n</i> = 0 of no curves.</p>
<h3> <span class="mw-headline" id="Subsets_as_bit_vectors">Subsets as bit vectors</span>
</h3>
<p>A subset <i>Y</i> of <i>X</i> can be identified with an <a href="http://en.m.wikipedia.org/wiki/Indexed_family" title="Indexed family">indexed family</a> of bits with <a href="http://en.m.wikipedia.org/wiki/Index_set" title="Index set">index set</a> <i>X</i>, with the bit indexed by <i>x</i> ∈ <i>X</i> being 1 or 0 according to whether or not <i>x</i> ∈ <i>Y</i>. (This is the so-called <a href="http://en.m.wikipedia.org/wiki/Indicator_function" title="Indicator function">characteristic function</a> notion of a subset.) For example a 32-bit computer word consists of 32 bits indexed by the set {0,1,2,…,31}, with 0 and 31 indexing the low and high order bits respectively. For a smaller example, if <i>X</i> = {<i>a,b,c</i>} where <i>a, b, c</i> are viewed as bit positions in that order from left to right, the eight subsets {}, {<i>c</i>}, {<i>b</i>}, {<i>b</i>,<i>c</i>}, {<i>a</i>}, {<i>a</i>,<i>c</i>}, {<i>a</i>,<i>b</i>}, and {<i>a</i>,<i>b</i>,<i>c</i>} of <i>X</i> can be identified with the respective bit vectors 000, 001, 010, 011, 100, 101, 110, and 111. Bit vectors indexed by the set of natural numbers are infinite <a href="http://en.m.wikipedia.org/wiki/Sequence" title="Sequence">sequences</a> of bits, while those indexed by the <a href="http://en.m.wikipedia.org/wiki/Real_number" title="Real number">reals</a> in the <a href="http://en.m.wikipedia.org/wiki/Unit_interval" title="Unit interval">unit interval</a> [0,1] are packed too densely to be able to write conventionally but nonetheless form well-defined indexed families (imagine coloring every point of the interval [0,1] either black or white independently; the black points then form an arbitrary subset of [0,1]).</p>
<p>From this bit vector viewpoint, a concrete Boolean algebra can be defined equivalently as a nonempty set of bit vectors all of the same length (more generally, indexed by the same set) and closed under the bit vector operations of bitwise ∧, ∨, and ¬, as in 1010∧0110 = 0010, 1010∨0110 = 1110, and ¬1010 = 0101, the bit vector realizations of intersection, union, and complement respectively.</p>
<h3> <span class="mw-headline" id="The_prototypical_Boolean_algebra">The prototypical Boolean algebra</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Two-element_Boolean_algebra" title="Two-element Boolean algebra">two-element Boolean algebra</a>
</div>
<p>The set {0,1} and its Boolean operations as treated above can be understood as the special case of bit vectors of length one, which by the identification of bit vectors with subsets can also be understood as the two subsets of a one-element set. We call this the <b>prototypical</b> Boolean algebra, justified by the following observation.</p>
<dl>
<dd>The laws satisfied by all nondegenerate concrete Boolean algebras coincide with those satisfied by the prototypical Boolean algebra.</dd>
</dl>
<p>This observation is easily proved as follows. Certainly any law satisfied by all concrete Boolean algebras is satisfied by the prototypical one since it is concrete. Conversely any law that fails for some concrete Boolean algebra must have failed at a particular bit position, in which case that position by itself furnishes a one-bit counterexample to that law. Nondegeneracy ensures the existence of at least one bit position because there is only one empty bit vector.</p>
<p>The final goal of the next section can be understood as eliminating "concrete" from the above observation. We shall however reach that goal via the surprisingly stronger observation that, up to isomorphism, all Boolean algebras are concrete.</p>
<h3> <span class="mw-headline" id="Boolean_algebras:_the_definition">Boolean algebras: the definition</span>
</h3>
<p>The Boolean algebras we have seen so far have all been concrete, consisting of bit vectors or equivalently of subsets of some set. Such a Boolean algebra consists of a set and operations on that set which can be <i>shown</i> to satisfy the laws of Boolean algebra.</p>
<p>Instead of showing that the Boolean laws are satisfied, we can instead postulate a set <i>X</i>, two binary operations on <i>X</i>, and one unary operation, and <i>require</i> that those operations satisfy the laws of Boolean algebra. The elements of <i>X</i> need not be bit vectors or subsets but can be anything at all. This leads to the more general <i>abstract</i> definition.</p>
<dl>
<dd>A <b>Boolean algebra</b> is any set with binary operations ∧ and ∨ and a unary operation ¬ thereon satisfying the Boolean laws.<sup id="cite_ref-17" class="reference"><a href="Boolean_algebra#cite_note-17"><span>[</span>17<span>]</span></a></sup>
</dd>
</dl>
<p>For the purposes of this definition it is irrelevant how the operations came to satisfy the laws, whether by fiat or proof. All concrete Boolean algebras satisfy the laws (by proof rather than fiat), whence every concrete Boolean algebra is a Boolean algebra according to our definitions. This axiomatic definition of a Boolean algebra as a set and certain operations satisfying certain laws or axioms is entirely analogous to the abstract definitions of <a href="http://en.m.wikipedia.org/wiki/Group_(mathematics)" title="Group (mathematics)">group</a>, <a href="http://en.m.wikipedia.org/wiki/Ring_(mathematics)" title="Ring (mathematics)">ring</a>, <a href="http://en.m.wikipedia.org/wiki/Field_(mathematics)" title="Field (mathematics)">field</a> etc. characteristic of modern or <a href="http://en.m.wikipedia.org/wiki/Abstract_algebra" title="Abstract algebra">abstract algebra</a>.</p>
<p>Given any complete axiomatization of Boolean algebra, such as the axioms for a <a href="http://en.m.wikipedia.org/wiki/Complemented_lattice" title="Complemented lattice">complemented</a> <a href="http://en.m.wikipedia.org/wiki/Distributive_lattice" title="Distributive lattice">distributive lattice</a>, a sufficient condition for an <a href="http://en.m.wikipedia.org/wiki/Algebraic_structure" title="Algebraic structure">algebraic structure</a> of this kind to satisfy all the Boolean laws is that it satisfy just those axioms. The following is therefore an equivalent definition.</p>
<dl>
<dd>A <b>Boolean algebra</b> is a complemented distributive lattice.</dd>
</dl>
<p>The section on <a href="Boolean_algebra#Axiomatizing_Boolean_algebra">axiomatization</a> lists other axiomatizations, any of which can be made the basis of an equivalent definition.</p>
<h3> <span class="mw-headline" id="Representable_Boolean_algebras">Representable Boolean algebras</span>
</h3>
<p>Although every concrete Boolean algebra is a Boolean algebra, not every Boolean algebra need be concrete. Let <i>n</i> be a <a href="http://en.m.wikipedia.org/wiki/Square-free_integer" title="Square-free integer">square-free</a> positive integer, one not divisible by the square of an integer, for example 30 but not 12. The operations of <a href="http://en.m.wikipedia.org/wiki/Greatest_common_divisor" title="Greatest common divisor">greatest common divisor</a>, <a href="http://en.m.wikipedia.org/wiki/Least_common_multiple" title="Least common multiple">least common multiple</a>, and division into <i>n</i> (that is, ¬<i>x</i> = <i>n</i>/<i>x</i>), can be shown to satisfy all the Boolean laws when their arguments range over the positive divisors of <i>n</i>. Hence those divisors form a Boolean algebra. These divisors are not subsets of a set, making the divisors of <i>n</i> a Boolean algebra that is not concrete according to our definitions.</p>
<p>However if we <i>represent</i> each divisor of <i>n</i> by the set of its prime factors, we find that this nonconcrete Boolean algebra is <a href="http://en.m.wikipedia.org/wiki/Isomorphic" title="Isomorphic" class="mw-redirect">isomorphic</a> to the concrete Boolean algebra consisting of all sets of prime factors of <i>n</i>, with union corresponding to least common multiple, intersection to greatest common divisor, and complement to division into <i>n</i>. So this example while not technically concrete is at least "morally" concrete via this representation, called an <a href="http://en.m.wikipedia.org/wiki/Isomorphism" title="Isomorphism">isomorphism</a>. This example is an instance of the following notion.</p>
<dl>
<dd>A Boolean algebra is called <b>representable</b> when it is isomorphic to a concrete Boolean algebra.</dd>
</dl>
<p>The obvious next question is answered positively as follows.</p>
<dl>
<dd>Every Boolean algebra is representable.</dd>
</dl>
<p>That is, up to isomorphism, abstract and concrete Boolean algebras are the same thing. This quite nontrivial result depends on the <a href="http://en.m.wikipedia.org/wiki/Boolean_prime_ideal_theorem" title="Boolean prime ideal theorem">Boolean prime ideal theorem</a>, a choice principle slightly weaker than the <a href="http://en.m.wikipedia.org/wiki/Axiom_of_choice" title="Axiom of choice">axiom of choice</a>, and is treated in more detail in the article <a href="http://en.m.wikipedia.org/wiki/Stone%27s_representation_theorem_for_Boolean_algebras" title="Stone's representation theorem for Boolean algebras">Stone's representation theorem for Boolean algebras</a>. This strong relationship implies a weaker result strengthening the observation in the previous subsection to the following easy consequence of representability.</p>
<dl>
<dd>The laws satisfied by all Boolean algebras coincide with those satisfied by the prototypical Boolean algebra.</dd>
</dl>
<p>It is weaker in the sense that it does not of itself imply representability. Boolean algebras are special here, for example a <a href="http://en.m.wikipedia.org/wiki/Relation_algebra" title="Relation algebra">relation algebra</a> is a Boolean algebra with additional structure but it is not the case that every relation algebra is representable in the sense appropriate to relation algebras.</p>
<h2> <span class="mw-headline" id="Axiomatizing_Boolean_algebra">Axiomatizing Boolean algebra</span>
</h2>
<div class="rellink relarticle mainarticle">Main articles: <a href="http://en.m.wikipedia.org/wiki/Axiomatization_of_Boolean_algebras" title="Axiomatization of Boolean algebras" class="mw-redirect">Axiomatization of Boolean algebras</a> and <a href="http://en.m.wikipedia.org/wiki/Boolean_algebras_canonically_defined" title="Boolean algebras canonically defined">Boolean algebras canonically defined</a>
</div>
<p>The above definition of an abstract Boolean algebra as a set and operations satisfying "the" Boolean laws raises the question, what are those laws? A simple-minded answer is "all Boolean laws," which can be defined as all equations that hold for the Boolean algebra of 0 and 1. Since there are infinitely many such laws this is not a terribly satisfactory answer in practice, leading to the next question: does it suffice to require only finitely many laws to hold?</p>
<p>In the case of Boolean algebras the answer is yes. In particular the finitely many equations we have listed above suffice. We say that Boolean algebra is <b>finitely axiomatizable</b> or <b>finitely based.</b></p>
<p>Can this list be made shorter yet? Again the answer is yes. To begin with, some of the above laws are implied by some of the others. A sufficient subset of the above laws consists of the pairs of associativity, commutativity, and absorption laws, distributivity of ∧ over ∨ (or the other distributivity law—one suffices), and the two complement laws. In fact this is the traditional axiomatization of Boolean algebra as a <a href="http://en.m.wikipedia.org/wiki/Complemented_lattice" title="Complemented lattice">complemented</a> <a href="http://en.m.wikipedia.org/wiki/Distributive_lattice" title="Distributive lattice">distributive lattice</a>.</p>
<p>By introducing additional laws not listed above it becomes possible to shorten the list yet further, see <a href="http://en.m.wikipedia.org/wiki/Boolean_algebra_(logic)" title="Boolean algebra (logic)">Boolean algebra (logic)</a>. In 1933 <a href="http://en.m.wikipedia.org/wiki/Edward_Huntington" title="Edward Huntington" class="mw-redirect">Edward Huntington</a> showed that if the basic operations are taken to be <i>x</i>∨<i>y</i> and ¬<i>x</i>, with <i>x</i>∧<i>y</i> considered a derived operation (e.g. via De Morgan's law in the form <i>x</i>∧<i>y</i> = ¬(¬<i>x</i>∨¬<i>y</i>)), then the equation ¬(¬<i>x</i>∨¬<i>y</i>)∨¬(¬<i>x</i>∨<i>y</i>) = <i>x</i> along with the two equations expressing associativity and commutativity of ∨ completely axiomatized Boolean algebra. When the only basic operation is the binary NAND operation ¬(<i>x</i>∧<i>y</i>), <a href="http://en.m.wikipedia.org/wiki/Stephen_Wolfram" title="Stephen Wolfram">Stephen Wolfram</a> has proposed in his book <i><a href="http://en.m.wikipedia.org/wiki/A_New_Kind_of_Science" title="A New Kind of Science">A New Kind of Science</a></i> the single axiom (((<i>xy</i>)<i>z</i>)(<i>x</i>((<i>xz</i>)<i>x</i>))) = <i>z</i> as a one-equation axiomatization of Boolean algebra, where for convenience here <i>xy</i> denotes the NAND rather than the AND of <i>x</i> and <i>y</i>.</p>
<h2> <span class="mw-headline" id="Propositional_logic">Propositional logic</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Propositional_calculus" title="Propositional calculus">Propositional calculus</a>
</div>
<p><b><a href="http://en.m.wikipedia.org/wiki/Propositional_logic" title="Propositional logic" class="mw-redirect">Propositional logic</a></b> is a <a href="http://en.m.wikipedia.org/wiki/Logical_system" title="Logical system" class="mw-redirect">logical system</a> that is intimately connected to Boolean algebra.<sup id="cite_ref-givhal_2-4" class="reference"><a href="Boolean_algebra#cite_note-givhal-2"><span>[</span>2<span>]</span></a></sup> Many syntactic concepts of Boolean algebra carry over to propositional logic with only minor changes in notation and terminology, while the semantics of propositional logic are defined via Boolean algebras in a way that the tautologies (theorems) of propositional logic correspond to equational theorems of Boolean algebra.</p>
<p>Syntactically, every Boolean term corresponds to a <b><a href="http://en.m.wikipedia.org/wiki/Propositional_formula" title="Propositional formula">propositional formula</a></b> of propositional logic. In this translation between Boolean algebra and propositional logic, Boolean variables <i>x,y</i>… become <b><a href="http://en.m.wikipedia.org/wiki/Propositional_variable" title="Propositional variable">propositional variables</a></b> (or <b>atoms</b>) <i>P,Q</i>,…, Boolean terms such as <i>x</i>∨<i>y</i> become propositional formulas <i>P</i>∨<i>Q</i>, 0 becomes <i>false</i> or <font size="3"><b>⊥</b></font>, and 1 becomes <i>true</i> or <b>T</b>. It is convenient when referring to generic propositions to use Greek letters Φ, Ψ,… as metavariables (variables outside the language of propositional calculus, used when talking <i>about</i> propositional calculus) to denote propositions.</p>
<p>The semantics of propositional logic rely on <b><a href="http://en.m.wikipedia.org/wiki/Truth_assignment" title="Truth assignment" class="mw-redirect">truth assignment</a></b>s. The essential idea of a truth assignment is that the propositional variables are mapped to elements of a fixed Boolean algebra, and then the <b><a href="http://en.m.wikipedia.org/wiki/Truth_value" title="Truth value">truth value</a></b> of a propositional formula using these letters is the element of the Boolean algebra that is obtained by computing the value of the Boolean term corresponding to the formula. In classical semantics, only the two-element Boolean algebra is used, while in <a href="http://en.m.wikipedia.org/wiki/Boolean-valued_semantics" title="Boolean-valued semantics" class="mw-redirect">Boolean-valued semantics</a> arbitrary Boolean algebras are considered. A <b><a href="http://en.m.wikipedia.org/wiki/Tautology_(logic)" title="Tautology (logic)">tautology</a></b> is a propositional formula that is assigned truth value <i>1</i> by every truth assignment of its propositional variables to an arbitrary Boolean algebra (or, equivalently, every truth assignment to the two element Boolean algebra).</p>
<p>These semantics permit a translation between tautologies of propositional logic and equational theorems of Boolean algebra. Every tautology Φ of propositional logic can be expressed as the Boolean equation Φ = 1, which will be a theorem of Boolean algebra. Conversely every theorem Φ = Ψ of Boolean algebra corresponds to the tautologies (Φ∨¬Ψ) ∧ (¬Φ∨Ψ) and (Φ∧Ψ) ∨ (¬Φ∧¬Ψ). If → is in the language these last tautologies can also be written as (Φ→Ψ) ∧ (Ψ→Φ), or as two separate theorems Φ→Ψ and Ψ→Φ; if ≡ is available then the single tautology Φ ≡ Ψ can be used.</p>
<h3> <span class="mw-headline" id="Applications">Applications</span>
</h3>
<p>One motivating application of propositional calculus is the analysis of propositions and deductive arguments in natural language. Whereas the proposition "if <i>x</i> = 3 then <i>x</i>+1 = 4" depends on the meanings of such symbols as + and 1, the proposition "if <i>x</i> = 3 then <i>x</i> = 3" does not; it is true merely by virtue of its structure, and remains true whether "<i>x</i> = 3" is replaced by "<i>x</i> = 4" or "the moon is made of green cheese." The generic or abstract form of this tautology is "if <i>P</i> then <i>P</i>", or in the language of Boolean algebra, "<i>P</i> → <i>P</i>".</p>
<p>Replacing <i>P</i> by <i>x</i> = 3 or any other proposition is called <b>instantiation</b> of <i>P</i> by that proposition. The result of instantiating <i>P</i> in an abstract proposition is called an <b>instance</b> of the proposition. Thus "<i>x</i> = 3 → <i>x</i> = 3" is a tautology by virtue of being an instance of the abstract tautology "<i>P</i> → <i>P</i>". All occurrences of the instantiated variable must be instantiated with the same proposition, to avoid such nonsense as <i>P</i> → <i>x</i> = 3 or <i>x</i> = 3 → <i>x</i> = 4.</p>
<p>Propositional calculus restricts attention to abstract propositions, those built up from propositional variables using Boolean operations. Instantiation is still possible within propositional calculus, but only by instantiating propositional variables by abstract propositions, such as instantiating <i>Q</i> by <i>Q</i>→<i>P</i> in <i>P</i>→(<i>Q</i>→<i>P</i>) to yield the instance <i>P</i>→((<i>Q</i>→<i>P</i>)→<i>P</i>).</p>
<p>(The availability of instantiation as part of the machinery of propositional calculus avoids the need for metavariables within the language of propositional calculus, since ordinary propositional variables can be considered within the language to denote arbitrary propositions. The metavariables themselves are outside the reach of instantiation, not being part of the language of propositional calculus but rather part of the same language for talking about it that this sentence is written in, where we need to be able to distinguish propositional variables and their instantiations as being distinct syntactic entities.)</p>
<h3> <span class="mw-headline" id="Deductive_systems_for_propositional_logic">Deductive systems for propositional logic</span>
</h3>
<p>An axiomatization of propositional calculus is a set of tautologies called <a href="http://en.m.wikipedia.org/wiki/Axioms" title="Axioms" class="mw-redirect">axioms</a> and one or more inference rules for producing new tautologies from old. A <i>proof</i> in an axiom system <i>A</i> is a finite nonempty sequence of propositions each of which is either an instance of an axiom of <i>A</i> or follows by some rule of <i>A</i> from propositions appearing earlier in the proof (thereby disallowing circular reasoning). The last proposition is the <b>theorem</b> proved by the proof. Every nonempty initial segment of a proof is itself a proof, whence every proposition in a proof is itself a theorem. An axiomatization is <b>sound</b> when every theorem is a tautology, and <b>complete</b> when every tautology is a theorem.<sup id="cite_ref-18" class="reference"><a href="Boolean_algebra#cite_note-18"><span>[</span>18<span>]</span></a></sup></p>
<h4> <span class="mw-headline" id="Sequent_calculus">Sequent calculus</span>
</h4>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Sequent_calculus" title="Sequent calculus">Sequent calculus</a>
</div>
<p>Propositional calculus is commonly organized as a <a href="http://en.m.wikipedia.org/wiki/Hilbert_system" title="Hilbert system">Hilbert system</a>, whose operations are just those of Boolean algebra and whose theorems are Boolean tautologies, those Boolean terms equal to the Boolean constant 1. Another form is <a href="http://en.m.wikipedia.org/wiki/Sequent_calculus" title="Sequent calculus">sequent calculus</a>, which has two sorts, propositions as in ordinary propositional calculus, and pairs of lists of propositions called <a href="http://en.m.wikipedia.org/wiki/Sequent" title="Sequent">sequents</a>, such as <i>A</i>∨<i>B</i>, <i>A</i>∧<i>C</i>,… <img class="tex" alt="\vdash" src="http://upload.wikimedia.org/math/b/f/7/bf73c9341a48c47c84a48dad635ff940.png"><i>A</i>, <i>B</i>→<i>C</i>,…. The two halves of a sequent are called the antecedent and the succedent respectively. The customary metavariable denoting an antecedent or part thereof is Γ, and for a succedent Δ; thus Γ,<i>A</i> <img class="tex" alt="\vdash" src="http://upload.wikimedia.org/math/b/f/7/bf73c9341a48c47c84a48dad635ff940.png"> Δ would denote a sequent whose succedent is a list Δ and whose antecedent is a list Γ with an additional proposition <i>A</i> appended after it. The antecedent is interpreted as the conjunction of its propositions, the succedent as the disjunction of its propositions, and the sequent itself as the <a href="http://en.m.wikipedia.org/wiki/Entailment" title="Entailment" class="mw-redirect">entailment</a> of the succedent by the antecedent.</p>
<p>Entailment differs from implication in that whereas the latter is a binary <i>operation</i> that returns a value in a Boolean algebra, the former is a binary <i>relation</i> which either holds or does not hold. In this sense entailment is an <i>external</i> form of implication, meaning external to the Boolean algebra, thinking of the reader of the sequent as also being external and interpreting and comparing antecedents and succedents in some Boolean algebra. The natural interpretation of <img class="tex" alt="\vdash" src="http://upload.wikimedia.org/math/b/f/7/bf73c9341a48c47c84a48dad635ff940.png"> is as ≤ in the partial order of the Boolean algebra defined by <i>x</i> ≤ <i>y</i> just when <i>x</i>∨<i>y</i> = <i>y</i>. This ability to mix external implication <img class="tex" alt="\vdash" src="http://upload.wikimedia.org/math/b/f/7/bf73c9341a48c47c84a48dad635ff940.png"> and internal implication → in the one logic is among the essential differences between sequent calculus and propositional calculus.<sup id="cite_ref-19" class="reference"><a href="Boolean_algebra#cite_note-19"><span>[</span>19<span>]</span></a></sup></p>
<h2> <span class="mw-headline" id="Applications_2">Applications</span>
</h2>
<h3> <span class="mw-headline" id="Two-valued_logic">Two-valued logic</span>
</h3>
<p>Boolean algebra as the calculus of two values is fundamental to digital logic, computer programming, and mathematical logic, and is also used in other areas of mathematics such as set theory and statistics.<sup id="cite_ref-givhal_2-5" class="reference"><a href="Boolean_algebra#cite_note-givhal-2"><span>[</span>2<span>]</span></a></sup></p>
<p><a href="http://en.m.wikipedia.org/wiki/Digital_logic" title="Digital logic" class="mw-redirect">Digital logic</a> codes its symbols in various ways: as voltages on wires in high-speed circuits and capacitive storage devices, as orientations of a magnetic domain in ferromagnetic storage devices, as holes in punched cards or paper tape, and so on. Now it is possible to code more than two symbols in any given medium. For example one might use respectively 0, 1, 2, and 3 volts to code a four-symbol alphabet on a wire, or holes of different sizes in a punched card. In practice however the tight constraints of high speed, small size, and low power combine to make noise a major factor. This makes it hard to distinguish between symbols when there are many of them at a single site. Rather than attempting to distinguish between four voltages on one wire, digital designers have settled on two voltages per wire, high and low. To obtain four symbols one uses two wires, and so on.</p>
<p>Programmers programming in <a href="http://en.m.wikipedia.org/wiki/Machine_code" title="Machine code">machine code</a>, <a href="Assembly_language" title="Assembly language">assembly language</a>, and other <a href="http://en.m.wikipedia.org/wiki/Programming_languages" title="Programming languages" class="mw-redirect">programming languages</a> that expose the low-level digital structure of the <a href="http://en.m.wikipedia.org/wiki/Word_(data_type)" title="Word (data type)" class="mw-redirect">data registers</a> operate on whatever symbols were chosen for the hardware, invariably bit vectors in modern computers for the above reasons. Such languages support both the numeric operations of addition, multiplication, etc. performed on words interpreted as integers, as well as the logical operations of disjunction, conjunction, etc. performed bit-wise on words interpreted as bit vectors. Programmers therefore have the option of working in and applying the laws of either numeric algebra or Boolean algebra as needed. A core differentiating feature is carry propagation with the former but not the latter.</p>
<p>Other areas where two values is a good choice are the law and mathematics. In everyday relaxed conversation, nuanced or complex answers such as "maybe" or "only on the weekend" are acceptable. In more focused situations such as a court of law or theorem-based mathematics however it is deemed advantageous to frame questions so as to admit a simple yes-or-no answer—is the defendant guilty or not guilty, is the proposition true or false—and to disallow any other answer. However much of a straitjacket this might prove in practice for the respondent, the principle of the simple yes-no question has become a central feature of both judicial and mathematical logic, making two-valued logic deserving of organization and study in its own right.</p>
<p>A central concept of set theory is membership. Now an organization may permit multiple degrees of membership, such as novice, associate, and full. With sets however an element is either in or out. The candidates for membership in a set work just like the wires in a digital computer: each candidate is either a member or a nonmember, just as each wire is either high or low.</p>
<p>Algebra being a fundamental tool in any area amenable to mathematical treatment, these considerations combine to make the algebra of two values of fundamental importance to computer hardware, mathematical logic, and set theory.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Two-valued_logic" title="Two-valued logic" class="mw-redirect">Two-valued logic</a> can be extended to <a href="http://en.m.wikipedia.org/wiki/Multi-valued_logic" title="Multi-valued logic" class="mw-redirect">multi-valued logic</a>, notably by replacing the Boolean domain {0, 1} with the unit interval [0,1], in which case rather than only taking values 0 or 1, any value between and including 0 and 1 can be assumed. Algebraically, negation (NOT) is replaced with 1 − <i>x</i>, conjunction (AND) is replaced with multiplication (<img class="tex" alt="xy" src="http://upload.wikimedia.org/math/3/e/4/3e44107170a520582ade522fa73c1d15.png">), and disjunction (OR) is defined via <a href="http://en.m.wikipedia.org/wiki/De_Morgan%27s_law" title="De Morgan's law" class="mw-redirect">De Morgan's law</a>. Interpreting these values as logical <a href="http://en.m.wikipedia.org/wiki/Truth_value" title="Truth value">truth values</a> yields a multi-valued logic, which forms the basis for <a href="http://en.m.wikipedia.org/wiki/Fuzzy_logic" title="Fuzzy logic">fuzzy logic</a> and <a href="http://en.m.wikipedia.org/wiki/Probabilistic_logic" title="Probabilistic logic">probabilistic logic</a>. In these interpretations, a value is interpreted as the "degree" of truth – to what extent a proposition is true, or the probability that the proposition is true.</p>
<h3> <span class="mw-headline" id="Boolean_operations">Boolean operations</span>
</h3>
<p>The original application for Boolean operations was <a href="http://en.m.wikipedia.org/wiki/Mathematical_logic" title="Mathematical logic">mathematical logic</a>, where it combines the truth values, true or false, of individual formulas.</p>
<p>Natural languages such as English have words for several Boolean operations, in particular conjunction (<i>and</i>), disjunction (<i>or</i>), negation (<i>not</i>), and implication (<i>implies</i>). <i>But not</i> is synonymous with <i>and not</i>. When used to combine situational assertions such as "the block is on the table" and "cats drink milk," which naively are either true or false, the meanings of these <a href="http://en.m.wikipedia.org/wiki/Logical_connective" title="Logical connective">logical connectives</a> often have the meaning of their logical counterparts. However with descriptions of behavior such as "Jim walked through the door", one starts to notice differences such as failure of commutativity, for example the conjunction of "Jim opened the door" with "Jim walked through the door" in that order is not equivalent to their conjunction in the other order, since <i>and</i> usually means <i>and then</i> in such cases. Questions can be similar: the order "Is the sky blue, and why is the sky blue?" makes more sense than the reverse order. Conjunctive commands about behavior are like behavioral assertions, as in <i>get dressed and go to school</i>. Disjunctive commands such <i>love me or leave me</i> or <i>fish or cut bait</i> tend to be asymmetric via the implication that one alternative is less preferable. Conjoined nouns such as <i>tea and milk</i> generally describe aggregation as with set union while <i>tea or milk</i> is a choice. However context can reverse these senses, as in <i>your choices are coffee and tea</i> which usually means the same as <i>your choices are coffee or tea</i> (alternatives). Double negation as in "I don't not like milk" rarely means literally "I do like milk" but rather conveys some sort of hedging, as though to imply that there is a third possibility. "Not not P" can be loosely interpreted as "surely P", and although <i>P</i> necessarily implies "not not <i>P</i>" the converse is suspect in English, much as with <a href="http://en.m.wikipedia.org/wiki/Intuitionistic_logic" title="Intuitionistic logic">intuitionistic logic</a>. In view of the highly idiosyncratic usage of conjunctions in natural languages, Boolean algebra cannot be considered a reliable framework for interpreting them.</p>
<p>Boolean operations are used in <a href="http://en.m.wikipedia.org/wiki/Digital_logic" title="Digital logic" class="mw-redirect">digital logic</a> to combine the bits carried on individual wires, thereby interpreting them over {0,1}. When a vector of <i>n</i> identical binary gates are used to combine two bit vectors each of <i>n</i> bits, the individual bit operations can be understood collectively as a single operation on values from a <a href="http://en.m.wikipedia.org/wiki/Boolean_algebra_(structure)" title="Boolean algebra (structure)">Boolean algebra</a> with 2<sup><i>n</i></sup> elements.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Naive_set_theory" title="Naive set theory">Naive set theory</a> interprets Boolean operations as acting on subsets of a given set <i>X</i>. As we saw earlier this behavior exactly parallels the coordinate-wise combinations of bit vectors, with the union of two sets corresponding to the disjunction of two bit vectors and so on.</p>
<p>The 256-element free Boolean algebra on three generators is deployed in <a href="http://en.m.wikipedia.org/wiki/Computer_displays" title="Computer displays" class="mw-redirect">computer displays</a> based on <a href="http://en.m.wikipedia.org/wiki/Raster_graphics" title="Raster graphics">raster graphics</a>, which use <a href="http://en.m.wikipedia.org/wiki/Bit_blit" title="Bit blit">bit blit</a> to manipulate whole regions consisting of <a href="http://en.m.wikipedia.org/wiki/Pixels" title="Pixels" class="mw-redirect">pixels</a>, relying on Boolean operations to specify how the source region should be combined with the destination, typically with the help of a third region called the <a href="http://en.m.wikipedia.org/wiki/Mask_(computing)" title="Mask (computing)">mask</a>. Modern <a href="http://en.m.wikipedia.org/wiki/Video_cards" title="Video cards" class="mw-redirect">video cards</a> offer all 2<sup>2<span><sup>3</sup></span></sup> = 256 ternary operations for this purpose, with the choice of operation being a one-byte (8-bit) parameter. The constants SRC = 0xaa or 10101010, DST = 0xcc or 11001100, and MSK = 0xf0 or 11110000 allow Boolean operations such as (SRC^DST)&amp;MSK (meaning XOR the source and destination and then AND the result with the mask) to be written directly as a constant denoting a byte calculated at compile time, 0x60 in the (SRC^DST)&amp;MSK example, 0x66 if just SRC^DST, etc. At run time the video card interprets the byte as the raster operation indicated by the original expression in a uniform way that requires remarkably little hardware and which takes time completely independent of the complexity of the expression.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Solid_modeling" title="Solid modeling">Solid modeling</a> systems for <a href="http://en.m.wikipedia.org/wiki/Computer_aided_design" title="Computer aided design" class="mw-redirect">computer aided design</a> offer a variety of methods for building objects from other objects, combination by Boolean operations being one of them. In this method the space in which objects exist is understood as a set <i>S</i> of <a href="http://en.m.wikipedia.org/wiki/Voxel" title="Voxel">voxels</a> (the three-dimensional analogue of pixels in two-dimensional graphics) and shapes are defined as subsets of <i>S</i>, allowing objects to be combined as sets via union, intersection, etc. One obvious use is in building a complex shape from simple shapes simply as the union of the latter. Another use is in sculpting understood as removal of material: any grinding, milling, routing, or drilling operation that can be performed with physical machinery on physical materials can be simulated on the computer with the Boolean operation <i>x</i> ∧ ¬<i>y</i> or <i>x</i> − <i>y</i>, which in set theory is set difference, remove the elements of <i>y</i> from those of <i>x</i>. Thus given two shapes one to be machined and the other the material to be removed, the result of machining the former to remove the latter is described simply as their set difference.</p>
<h4> <span class="mw-headline" id="Boolean_searches">Boolean searches</span>
</h4>
<p>Search engine queries also employ Boolean logic. For this application, each web page on the Internet may be considered to be an "element" of a "set". The following examples use a syntax supported by <a href="http://en.m.wikipedia.org/wiki/Google" title="Google">Google</a>.<sup id="cite_ref-20" class="reference"><a href="Boolean_algebra#cite_note-20"><span>[</span>20<span>]</span></a></sup></p>
<ul>
<li>Doublequotes are used to combine whitespace-separated words into a single search term.<sup id="cite_ref-21" class="reference"><a href="Boolean_algebra#cite_note-21"><span>[</span>21<span>]</span></a></sup>
</li>
<li>Whitespace is used to specify logical AND, as it is the default operator for joining search terms:</li>
</ul>
<pre>
"Search term 1" "Search term 2"
</pre>
<ul>
<li>The OR keyword is used for logical OR:</li>
</ul>
<pre>
"Search term 1" OR "Search term 2"
</pre>
<ul>
<li>The minus sign is used for logical NOT (AND NOT):</li>
</ul>
<pre>
"Search term 1" − "Search term 2"
</pre>
<h2> <span class="mw-headline" id="History">History</span>
</h2>
<table class="metadata plainlinks ambox mbox-small-left ambox-content" style=""><tr>
<td class="mbox-image"><img alt="Wiki letter w.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/6/6c/Wiki_letter_w.svg/23px-Wiki_letter_w.svg.png" width="23" height="23" srcset="//upload.wikimedia.org/wikipedia/en/thumb/6/6c/Wiki_letter_w.svg/35px-Wiki_letter_w.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/6/6c/Wiki_letter_w.svg/46px-Wiki_letter_w.svg.png 2x"></td>
<td class="mbox-text" style=""><span class="mbox-text-span"><b>This section is empty.</b> <small>You can help by <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Boolean_algebra&amp;action=edit&amp;section=">adding to it</a>.</small> <small><i>(October 2012)</i></small></span></td>
</tr></table>
<h2> <span class="mw-headline" id="See_also">See also</span>
</h2>
<div class="noprint tright portal" style="border:solid #aaa 1px; margin:0.5em 0 0.5em 1em;">
<table style="background:#f9f9f9; font-size:85%; line-height:110%; max-width:175px;"><tr>
<td style="text-align: center;"><a href="http://en.m.wikipedia.org/wiki/File:Nuvola_apps_edu_mathematics_blue-p.svg" class="image"><img alt="Portal icon" src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Nuvola_apps_edu_mathematics_blue-p.svg/28px-Nuvola_apps_edu_mathematics_blue-p.svg.png" width="28" height="28" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Nuvola_apps_edu_mathematics_blue-p.svg/42px-Nuvola_apps_edu_mathematics_blue-p.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Nuvola_apps_edu_mathematics_blue-p.svg/56px-Nuvola_apps_edu_mathematics_blue-p.svg.png 2x"></a></td>
<td style="padding: 0 0.2em; vertical-align: middle; font-style: italic; font-weight: bold"><a href="http://en.m.wikipedia.org/wiki/Portal:Mathematics" title="Portal:Mathematics">Mathematics  portal</a></td>
</tr></table>
</div>
<div class="column-count column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2;">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/List_of_Boolean_algebra_topics" title="List of Boolean algebra topics">List of Boolean algebra topics</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Boolean_algebra_(logic)" title="Boolean algebra (logic)">Boolean algebra (logic)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Boolean_algebra_(structure)" title="Boolean algebra (structure)">Boolean algebra (structure)</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Logic_design" title="Logic design" class="mw-redirect">Logic design</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Propositional_calculus" title="Propositional calculus">Propositional calculus</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Heyting_algebra" title="Heyting algebra">Heyting algebra</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Intuitionistic_logic" title="Intuitionistic logic">Intuitionistic logic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Relation_algebra" title="Relation algebra">Relation algebra</a></li>
</ul>
</div>
<h2> <span class="mw-headline" id="References">References</span>
</h2>
<ol class="references">
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/George_Boole" title="George Boole">Boole, George</a> (2003) [1854]. <i>An Investigation of the Laws of Thought</i>. Prometheus Books. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-1-59102-089-9" title="Special:BookSources/978-1-59102-089-9">978-1-59102-089-9</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=An+Investigation+of+the+Laws+of+Thought&amp;rft.aulast=Boole&amp;rft.aufirst=George&amp;rft.au=Boole%2C%26%2332%3BGeorge&amp;rft.date=2003&amp;rft.pub=Prometheus+Books&amp;rft.isbn=978-1-59102-089-9&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-givhal-2">
<span class="mw-cite-backlink">^ <a href="Boolean_algebra#cite_ref-givhal_2-0"><sup><i><b>a</b></i></sup></a> <a href="Boolean_algebra#cite_ref-givhal_2-1"><sup><i><b>b</b></i></sup></a> <a href="Boolean_algebra#cite_ref-givhal_2-2"><sup><i><b>c</b></i></sup></a> <a href="Boolean_algebra#cite_ref-givhal_2-3"><sup><i><b>d</b></i></sup></a> <a href="Boolean_algebra#cite_ref-givhal_2-4"><sup><i><b>e</b></i></sup></a> <a href="Boolean_algebra#cite_ref-givhal_2-5"><sup><i><b>f</b></i></sup></a></span> <span class="reference-text"><span class="citation book">Givant, Steven; Halmos, Paul (2009). <i>Introduction to Boolean Algebras</i>. Undergraduate Texts in Mathematics, <a href="http://en.m.wikipedia.org/wiki/Springer_Science%2BBusiness_Media" title="Springer Science+Business Media">Springer</a>. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-387-40293-2" title="Special:BookSources/978-0-387-40293-2">978-0-387-40293-2</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+Boolean+Algebras&amp;rft.aulast=Givant&amp;rft.aufirst=Steven&amp;rft.au=Givant%2C%26%2332%3BSteven&amp;rft.au=Halmos%2C%26%2332%3BPaul&amp;rft.date=2009&amp;rft.pub=Undergraduate+Texts+in+Mathematics%2C+%5B%5BSpringer+Science%2BBusiness+Media%7CSpringer%5D%5D&amp;rft.isbn=978-0-387-40293-2&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-3">^</a></b></span> <span class="reference-text">cf footnote on page 278: "* The name Boolean algebra (or Boolean "algebras") for the calculus originated by Boole, extended by Schröder, and perfected by Whitehead seems to have been first suggested by Sheffer, in 1913" quoted from E. V. Huntington January 1933, "NEW SETS OF INDEPENDENT POSTULATES FOR THE ALGEBRA OF LOGIC, WITH SPECIAL REFERENCE TO WHITEHEAD AND RUSSELL'S PRINCIPIA MATHEMATICA", <a rel="nofollow" class="external free" href="http://www.ams.org/journals/tran/1933-035-01/S0002-9947-1933-1501684-X/S0002-9947-1933-1501684-X.pdf">http://www.ams.org/journals/tran/1933-035-01/S0002-9947-1933-1501684-X/S0002-9947-1933-1501684-X.pdf</a></span>
</li>
<li id="cite_note-DunnHardegree2001-4">
<span class="mw-cite-backlink">^ <a href="Boolean_algebra#cite_ref-DunnHardegree2001_4-0"><sup><i><b>a</b></i></sup></a> <a href="Boolean_algebra#cite_ref-DunnHardegree2001_4-1"><sup><i><b>b</b></i></sup></a> <a href="Boolean_algebra#cite_ref-DunnHardegree2001_4-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><span class="citation book">J. Michael Dunn; Gary M. Hardegree (2001). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=-AokWhbILUIC&amp;pg=PA2"><i>Algebraic methods in philosophical logic</i></a>. Oxford University Press US. p. 2. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-19-853192-0" title="Special:BookSources/978-0-19-853192-0">978-0-19-853192-0</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=-AokWhbILUIC&amp;pg=PA2">http://books.google.com/books?id=-AokWhbILUIC&amp;pg=PA2</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Algebraic+methods+in+philosophical+logic&amp;rft.aulast=J.+Michael+Dunn&amp;rft.au=J.+Michael+Dunn&amp;rft.au=Gary+M.+Hardegree&amp;rft.date=2001&amp;rft.pages=p.%26nbsp%3B2&amp;rft.pub=Oxford+University+Press+US&amp;rft.isbn=978-0-19-853192-0&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3D-AokWhbILUIC%26pg%3DPA2&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-BalabanianCarlson2001-5">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-BalabanianCarlson2001_5-0">^</a></b></span> <span class="reference-text"><span class="citation book">Norman Balabanian; Bradley Carlson (2001). <i>Digital logic design principles</i>. John Wiley. pp. 39–40. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-471-29351-4" title="Special:BookSources/978-0-471-29351-4">978-0-471-29351-4</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Digital+logic+design+principles&amp;rft.aulast=Norman+Balabanian&amp;rft.au=Norman+Balabanian&amp;rft.au=Bradley+Carlson&amp;rft.date=2001&amp;rft.pages=pp.%26nbsp%3B39%E2%80%9340&amp;rft.pub=John+Wiley&amp;rft.isbn=978-0-471-29351-4&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span>, <a rel="nofollow" class="external text" href="http://www.wiley.com/college/engin/balabanian293512/pdf/ch02.pdf">online sample</a></span>
</li>
<li id="cite_note-Radhakrishnan-6">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-Radhakrishnan_6-0">^</a></b></span> <span class="reference-text"><span class="citation book">Rajaraman &amp; Radhakrishnan. <a rel="nofollow" class="external text" href="http://books.google.com/books?id=-8MvcOgsSjcC&amp;pg=PA65"><i>Introduction To Digital Computer Design An 5Th Ed.</i></a>. PHI Learning Pvt. Ltd.. p. 65. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-81-203-3409-0" title="Special:BookSources/978-81-203-3409-0">978-81-203-3409-0</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=-8MvcOgsSjcC&amp;pg=PA65">http://books.google.com/books?id=-8MvcOgsSjcC&amp;pg=PA65</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+To+Digital+Computer+Design+An+5Th+Ed.&amp;rft.aulast=Rajaraman+%26+Radhakrishnan&amp;rft.au=Rajaraman+%26+Radhakrishnan&amp;rft.pages=p.%26nbsp%3B65&amp;rft.pub=PHI+Learning+Pvt.+Ltd.&amp;rft.isbn=978-81-203-3409-0&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3D-8MvcOgsSjcC%26pg%3DPA65&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-Camara2010-7">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-Camara2010_7-0">^</a></b></span> <span class="reference-text"><span class="citation book">John A. Camara (2010). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=rfHWHeU0jfsC&amp;pg=SA41-PA3"><i>Electrical and Electronics Reference Manual for the Electrical and Computer PE Exam</i></a>. www.ppi2pass.com. p. 41. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-1-59126-166-7" title="Special:BookSources/978-1-59126-166-7">978-1-59126-166-7</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=rfHWHeU0jfsC&amp;pg=SA41-PA3">http://books.google.com/books?id=rfHWHeU0jfsC&amp;pg=SA41-PA3</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Electrical+and+Electronics+Reference+Manual+for+the+Electrical+and+Computer+PE+Exam&amp;rft.aulast=John+A.+Camara&amp;rft.au=John+A.+Camara&amp;rft.date=2010&amp;rft.pages=p.%26nbsp%3B41&amp;rft.pub=www.ppi2pass.com&amp;rft.isbn=978-1-59126-166-7&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DrfHWHeU0jfsC%26pg%3DSA41-PA3&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-Chen2007-8">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-Chen2007_8-0">^</a></b></span> <span class="reference-text"><span class="citation book">Shin-ichi Minato, Saburo Muroga (2007). "Binary Decision Diagrams". In Wai-Kai Chen. <i>The VLSI handbook</i> (2nd ed.). CRC Press. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-8493-4199-1" title="Special:BookSources/978-0-8493-4199-1">978-0-8493-4199-1</a>. chapter 29.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Binary+Decision+Diagrams&amp;rft.atitle=The+VLSI+handbook&amp;rft.aulast=Shin-ichi+Minato%2C+Saburo+Muroga&amp;rft.au=Shin-ichi+Minato%2C+Saburo+Muroga&amp;rft.date=2007&amp;rft.edition=2nd&amp;rft.pub=CRC+Press&amp;rft.isbn=978-0-8493-4199-1&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-Parkes2002-9">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-Parkes2002_9-0">^</a></b></span> <span class="reference-text"><span class="citation book">Alan Parkes (2002). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=sUQXKy8KPcQC&amp;pg=PA276"><i>Introduction to languages, machines and logic: computable languages, abstract machines and formal logic</i></a>. Springer. p. 276. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-1-85233-464-2" title="Special:BookSources/978-1-85233-464-2">978-1-85233-464-2</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=sUQXKy8KPcQC&amp;pg=PA276">http://books.google.com/books?id=sUQXKy8KPcQC&amp;pg=PA276</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+languages%2C+machines+and+logic%3A+computable+languages%2C+abstract+machines+and+formal+logic&amp;rft.aulast=Alan+Parkes&amp;rft.au=Alan+Parkes&amp;rft.date=2002&amp;rft.pages=p.%26nbsp%3B276&amp;rft.pub=Springer&amp;rft.isbn=978-1-85233-464-2&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DsUQXKy8KPcQC%26pg%3DPA276&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-BarwiseEtchemendy1999-10">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-BarwiseEtchemendy1999_10-0">^</a></b></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Jon_Barwise" title="Jon Barwise">Jon Barwise</a>; <a href="http://en.m.wikipedia.org/wiki/John_Etchemendy" title="John Etchemendy">John Etchemendy</a>; Gerard Allwein; Dave Barker-Plummer, Albert Liu (1999). <i>Language, proof, and logic</i>. CSLI Publications. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-1-889119-08-3" title="Special:BookSources/978-1-889119-08-3">978-1-889119-08-3</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Language%2C+proof%2C+and+logic&amp;rft.aulast=%5B%5BJon+Barwise%5D%5D&amp;rft.au=%5B%5BJon+Barwise%5D%5D&amp;rft.au=%5B%5BJohn+Etchemendy%5D%5D&amp;rft.au=Gerard+Allwein&amp;rft.date=1999&amp;rft.pub=CSLI+Publications&amp;rft.isbn=978-1-889119-08-3&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-Goertzel1994-11">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-Goertzel1994_11-0">^</a></b></span> <span class="reference-text"><span class="citation book">Ben Goertzel (1994). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=zVOWoXDunp8C&amp;pg=PA48"><i>Chaotic logic: language, thought, and reality from the perspective of complex systems science</i></a>. Springer. p. 48. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-306-44690-0" title="Special:BookSources/978-0-306-44690-0">978-0-306-44690-0</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=zVOWoXDunp8C&amp;pg=PA48">http://books.google.com/books?id=zVOWoXDunp8C&amp;pg=PA48</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Chaotic+logic%3A+language%2C+thought%2C+and+reality+from+the+perspective+of+complex+systems+science&amp;rft.aulast=Ben+Goertzel&amp;rft.au=Ben+Goertzel&amp;rft.date=1994&amp;rft.pages=p.%26nbsp%3B48&amp;rft.pub=Springer&amp;rft.isbn=978-0-306-44690-0&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DzVOWoXDunp8C%26pg%3DPA48&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-12">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-12">^</a></b></span> <span class="reference-text">Halmos, Paul (1963). Lectures on Boolean Algebras. van Nostrand.</span>
</li>
<li id="cite_note-O.27Regan_p33-13">
<span class="mw-cite-backlink">^ <a href="Boolean_algebra#cite_ref-O.27Regan_p33_13-0"><sup><i><b>a</b></i></sup></a> <a href="Boolean_algebra#cite_ref-O.27Regan_p33_13-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation book">O'Regan, Gerard (2008). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=081H96F1enMC&amp;pg=PA33"><i>A brief history of computing</i></a>. Springer. p. 33. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-1-84800-083-4" title="Special:BookSources/978-1-84800-083-4">978-1-84800-083-4</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=081H96F1enMC&amp;pg=PA33">http://books.google.com/books?id=081H96F1enMC&amp;pg=PA33</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=A+brief+history+of+computing&amp;rft.aulast=O%27Regan%2C+Gerard&amp;rft.au=O%27Regan%2C+Gerard&amp;rft.date=2008&amp;rft.pages=p.%26nbsp%3B33&amp;rft.pub=Springer&amp;rft.isbn=978-1-84800-083-4&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3D081H96F1enMC%26pg%3DPA33&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-GivantHalmos2009-14">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-GivantHalmos2009_14-0">^</a></b></span> <span class="reference-text"><span class="citation book">Steven R. Givant; Paul Richard Halmos (2009). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=ORILyf8sF2sC&amp;pg=PA22"><i>Introduction to Boolean algebras</i></a>. Springer. pp. 21–22. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-387-40293-2" title="Special:BookSources/978-0-387-40293-2">978-0-387-40293-2</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=ORILyf8sF2sC&amp;pg=PA22">http://books.google.com/books?id=ORILyf8sF2sC&amp;pg=PA22</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+Boolean+algebras&amp;rft.aulast=Steven+R.+Givant&amp;rft.au=Steven+R.+Givant&amp;rft.au=Paul+Richard+Halmos&amp;rft.date=2009&amp;rft.pages=pp.%26nbsp%3B21%E2%80%9322&amp;rft.pub=Springer&amp;rft.isbn=978-0-387-40293-2&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DORILyf8sF2sC%26pg%3DPA22&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-15">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-15">^</a></b></span> <span class="reference-text">J. Venn, <i>On the Diagrammatic and Mechanical Representation of Propositions and Reasonings</i>, Philosophical Magazine and Journal of Science, Series 5, vol. <b>10</b>, No. 59, July 1880.</span>
</li>
<li id="cite_note-16">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-16">^</a></b></span> <span class="reference-text"><span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/Claude_Shannon" title="Claude Shannon">Shannon, Claude</a> (1949). "The Synthesis of Two-Terminal Switching Circuits". <i>Bell System Technical Journal</i> <b>28</b>: 59–98.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+Synthesis+of+Two-Terminal+Switching+Circuits&amp;rft.jtitle=Bell+System+Technical+Journal&amp;rft.aulast=Shannon&amp;rft.aufirst=Claude&amp;rft.au=Shannon%2C%26%2332%3BClaude&amp;rft.date=1949&amp;rft.volume=28&amp;rft.pages=59%E2%80%9398&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-17">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-17">^</a></b></span> <span class="reference-text"><span class="citation book">Koppelberg, Sabine (1989). "General Theory of Boolean Algebras". <i>Handbook of Boolean Algebras, Vol. 1 (ed. J. Donald Monk with Robert Bonnet)</i>. Amsterdam: North Holland. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-444-70261-6" title="Special:BookSources/978-0-444-70261-6">978-0-444-70261-6</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=General+Theory+of+Boolean+Algebras&amp;rft.atitle=Handbook+of+Boolean+Algebras%2C+Vol.+1+%28ed.+J.+Donald+Monk+with+Robert+Bonnet%29&amp;rft.aulast=Koppelberg&amp;rft.aufirst=Sabine&amp;rft.au=Koppelberg%2C%26%2332%3BSabine&amp;rft.date=1989&amp;rft.place=Amsterdam&amp;rft.pub=North+Holland&amp;rft.isbn=978-0-444-70261-6&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-18">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-18">^</a></b></span> <span class="reference-text"><span class="citation book">Hausman, Alan; Howard Kahane, Paul Tidman (2010) [2007]. <i>Logic and Philosophy: A Modern Introduction</i>. Wadsworth Cengage Learning. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-495-60158-6" title="Special:BookSources/0-495-60158-6">0-495-60158-6</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Logic+and+Philosophy%3A+A+Modern+Introduction&amp;rft.aulast=Hausman&amp;rft.aufirst=Alan&amp;rft.au=Hausman%2C%26%2332%3BAlan&amp;rft.date=2010&amp;rft.pub=Wadsworth+Cengage+Learning&amp;rft.isbn=0-495-60158-6&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-19">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-19">^</a></b></span> <span class="reference-text"><span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Jean-Yves_Girard" title="Jean-Yves Girard">Girard, Jean-Yves</a>; Paul Taylor, Yves Lafont (1990) [1989]. <a rel="nofollow" class="external text" href="http://www.paultaylor.eu/stable/Proofs%2BTypes.html"><i>Proofs and Types</i></a>. Cambridge University Press (Cambridge Tracts in Theoretical Computer Science, 7). <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-521-37181-3" title="Special:BookSources/0-521-37181-3">0-521-37181-3</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.paultaylor.eu/stable/Proofs%2BTypes.html">http://www.paultaylor.eu/stable/Proofs%2BTypes.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Proofs+and+Types&amp;rft.aulast=Girard&amp;rft.aufirst=Jean-Yves&amp;rft.au=Girard%2C%26%2332%3BJean-Yves&amp;rft.date=1990&amp;rft.pub=Cambridge+University+Press+%28Cambridge+Tracts+in+Theoretical+Computer+Science%2C+7%29&amp;rft.isbn=0-521-37181-3&amp;rft_id=http%3A%2F%2Fwww.paultaylor.eu%2Fstable%2FProofs%252BTypes.html&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-20">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-20">^</a></b></span> <span class="reference-text">Not all search engines support the same query syntax. Additionally, some organizations (such as Google) provide "specialized" search engines that support alternate or extended syntax. (See e.g.,<a rel="nofollow" class="external text" href="http://www.google.com/help/cheatsheet.html">Syntax cheatsheet</a>, <a rel="nofollow" class="external text" href="http://www.google.com/intl/en/help/faq_codesearch.html#regexp">Google codesearch supports regular expressions</a>).</span>
</li>
<li id="cite_note-21">
<span class="mw-cite-backlink"><b><a href="Boolean_algebra#cite_ref-21">^</a></b></span> <span class="reference-text">Doublequote-delimited search terms are called "exact phrase" searches in the Google documentation.</span>
</li>
</ol>
<h2> <span class="mw-headline" id="Further_reading">Further reading</span>
</h2>
<ul>
<li>
<span class="citation book">J. Eldon Whitesitt (1995). <i>Boolean algebra and its applications</i>. Courier Dover Publications. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-486-68483-3" title="Special:BookSources/978-0-486-68483-3">978-0-486-68483-3</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Boolean+algebra+and+its+applications&amp;rft.aulast=J.+Eldon+Whitesitt&amp;rft.au=J.+Eldon+Whitesitt&amp;rft.date=1995&amp;rft.pub=Courier+Dover+Publications&amp;rft.isbn=978-0-486-68483-3&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span> Suitable introduction for students in applied fields.</li>
<li>
<span class="citation book">Dwinger, Philip (1971). <i>Introduction to Boolean algebras</i>. Würzburg: Physica Verlag.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+Boolean+algebras&amp;rft.aulast=Dwinger&amp;rft.aufirst=Philip&amp;rft.au=Dwinger%2C%26%2332%3BPhilip&amp;rft.date=1971&amp;rft.place=W%C3%BCrzburg&amp;rft.pub=Physica+Verlag&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span>
</li>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Roman_Sikorski" title="Roman Sikorski">Sikorski, Roman</a> (1969). <i>Boolean Algebras</i> (3/e ed.). Berlin: Springer-Verlag. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-387-04469-9" title="Special:BookSources/978-0-387-04469-9">978-0-387-04469-9</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Boolean+Algebras&amp;rft.aulast=Sikorski&amp;rft.aufirst=Roman&amp;rft.au=Sikorski%2C%26%2332%3BRoman&amp;rft.date=1969&amp;rft.edition=3%2Fe&amp;rft.place=Berlin&amp;rft.pub=Springer-Verlag&amp;rft.isbn=978-0-387-04469-9&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/J%C3%B3zef_Maria_Boche%C5%84ski" title="Józef Maria Bocheński">Bocheński, Józef Maria</a> (1959). <i>A Précis of Mathematical Logic</i>. Translated from the French and German editions by Otto Bird. Dordrecht, South Holland: D. Reidel.</li>
</ul>
<p><b>Historical perspective</b></p>
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/George_Boole" title="George Boole">George Boole</a> (1848). "<a rel="nofollow" class="external text" href="http://www.maths.tcd.ie/pub/HistMath/People/Boole/CalcLogic/CalcLogic.html">The Calculus of Logic,</a>" <i>Cambridge and Dublin Mathematical Journal III: 183–98.</i>
</li>
<li>
<span class="citation book">Theodore Hailperin (1986). <i>Boole's logic and probability: a critical exposition from the standpoint of contemporary algebra, logic, and probability theory</i> (2nd ed.). Elsevier. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-444-87952-3" title="Special:BookSources/978-0-444-87952-3">978-0-444-87952-3</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Boole%27s+logic+and+probability%3A+a+critical+exposition+from+the+standpoint+of+contemporary+algebra%2C+logic%2C+and+probability+theory&amp;rft.aulast=Theodore+Hailperin&amp;rft.au=Theodore+Hailperin&amp;rft.date=1986&amp;rft.edition=2nd&amp;rft.pub=Elsevier&amp;rft.isbn=978-0-444-87952-3&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span>
</li>
<li>
<span class="citation book">Dov M. Gabbay, John Woods, ed. (2004). <i>The rise of modern logic: from Leibniz to Frege</i>. Handbook of the History of Logic. <b>3</b>. Elsevier. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-444-51611-4" title="Special:BookSources/978-0-444-51611-4">978-0-444-51611-4</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+rise+of+modern+logic%3A+from+Leibniz+to+Frege&amp;rft.date=2004&amp;rft.series=Handbook+of+the+History+of+Logic&amp;rft.volume=3&amp;rft.pub=Elsevier&amp;rft.isbn=978-0-444-51611-4&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span>, several relevant chapters by Hailperin, Valencia, and Grattan-Guinesss</li>
<li>
<span class="citation book">Calixto Badesa (2004). <i>The birth of model theory: Löwenheim's theorem in the frame of the theory of relatives</i>. Princeton University Press. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-691-05853-5" title="Special:BookSources/978-0-691-05853-5">978-0-691-05853-5</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+birth+of+model+theory%3A+L%C3%B6wenheim%27s+theorem+in+the+frame+of+the+theory+of+relatives&amp;rft.aulast=Calixto+Badesa&amp;rft.au=Calixto+Badesa&amp;rft.date=2004&amp;rft.pub=Princeton+University+Press&amp;rft.isbn=978-0-691-05853-5&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span>, chapter 1, "Algebra of Classes and Propositional Calculus"</li>
<li>Burris, Stanley, 2009. <a rel="nofollow" class="external text" href="http://plato.stanford.edu/entries/algebra-logic-tradition/">The Algebra of Logic Tradition</a>. <a href="http://en.m.wikipedia.org/wiki/Stanford_Encyclopedia_of_Philosophy" title="Stanford Encyclopedia of Philosophy">Stanford Encyclopedia of Philosophy</a>.</li>
<li>
<span class="citation book">Radomir S. Stankovic; Jaakko Astola (2011). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=uagvEc2jGTIC"><i>From Boolean Logic to Switching Circuits and Automata: Towards Modern Information Technology</i></a>. Springer. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-3-642-11681-0" title="Special:BookSources/978-3-642-11681-0">978-3-642-11681-0</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=uagvEc2jGTIC">http://books.google.com/books?id=uagvEc2jGTIC</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=From+Boolean+Logic+to+Switching+Circuits+and+Automata%3A+Towards+Modern+Information+Technology&amp;rft.aulast=Radomir+S.+Stankovic&amp;rft.au=Radomir+S.+Stankovic&amp;rft.au=Jaakko+Astola&amp;rft.date=2011&amp;rft.pub=Springer&amp;rft.isbn=978-3-642-11681-0&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DuagvEc2jGTIC&amp;rfr_id=info:sid/en.wikipedia.org:Boolean_algebra"><span style="display: none;"> </span></span>
</li>
</ul>
<h2> <span class="mw-headline" id="External_links">External links</span>
</h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;"><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x"></td>
<td class="mbox-text plainlist" style="">The Wikibook <i><a href="http://en.wikibooks.org/wiki/How_To_Search" class="extiw" title="wikibooks:How To Search">How To Search</a></i> has a page on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/How_To_Search/Boolean_Logic" class="extiw" title="wikibooks:How To Search/Boolean Logic">Boolean Logic</a></b></i>
</td>
</tr></table>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;"><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x"></td>
<td class="mbox-text plainlist" style="">The Wikibook <i><a href="http://en.wikibooks.org/wiki/Electronics" class="extiw" title="wikibooks:Electronics">Electronics</a></i> has a page on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Electronics/Boolean_Algebra" class="extiw" title="wikibooks:Electronics/Boolean Algebra">Boolean Algebra</a></b></i>
</td>
</tr></table>
<ul>
<li><a rel="nofollow" class="external text" href="http://computer.howstuffworks.com/boolean.htm">How Stuff Works – Boolean Logic</a></li>
<li>
<a rel="nofollow" class="external text" href="http://oscience.info/mathematics/boolean-algebra-2/">Science and Technology - Boolean Algebra</a> contains a list and proof of Boolean theorems and laws.</li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;;"><tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;;">
<tr>
<th scope="col" style=";" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Digital_systems" title="Template:Digital systems"><span title="View this template" style=";;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Digital_systems" title="Template talk:Digital systems"><span title="Discuss this template" style=";;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Digital_systems&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;">e</span></a></li>
</ul>
</div>
<div class="" style="font-size:110%;">
<a href="http://en.m.wikipedia.org/wiki/Digital" title="Digital">Digital</a> systems</div>
</th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";;">Components</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Logic_gate" title="Logic gate">Logic gate</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Combinational_logic" title="Combinational logic">Combinational logic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Sequential_logic" title="Sequential logic">Sequential logic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Digital_electronics" title="Digital electronics">Digital circuit</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Integrated_circuit" title="Integrated circuit">Integrated circuit</a> (IC)</li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";;">Theory</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul>
<li><strong class="selflink">Boolean algebra</strong></li>
<li><a href="http://en.m.wikipedia.org/wiki/Logic_synthesis" title="Logic synthesis">Logic synthesis</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Digital_signal_processing" title="Digital signal processing">Digital signal processing</a></li>
<li><a href="Computer_architecture" title="Computer architecture">Computer architecture</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";;">Applications</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Digital_audio" title="Digital audio">Digital audio</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Digital_photography" title="Digital photography">Digital photography</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Digital_video" title="Digital video">Digital video</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Electronic_literature" title="Electronic literature">Electronic literature</a></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr></table>

						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 11 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://af.m.wikipedia.org/wiki/Boolse_algebra" lang="af" hreflang="af">Afrikaans</a></li><li><a href="http://cs.m.wikipedia.org/wiki/Booleova_algebra" lang="cs" hreflang="cs">česky</a></li><li><a href="http://de.m.wikipedia.org/wiki/Boolesche_Algebra" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://es.m.wikipedia.org/wiki/%C3%81lgebra_de_Boole" lang="es" hreflang="es">español</a></li><li><a href="http://fr.m.wikipedia.org/wiki/Alg%C3%A8bre_de_Boole_(logique)" lang="fr" hreflang="fr">français</a></li><li><a href="http://ko.m.wikipedia.org/wiki/%EB%B6%88_%EB%85%BC%EB%A6%AC" lang="ko" hreflang="ko">한국어</a></li><li><a href="http://he.m.wikipedia.org/wiki/%D7%90%D7%9C%D7%92%D7%91%D7%A8%D7%94_%D7%91%D7%95%D7%9C%D7%99%D7%90%D7%A0%D7%99%D7%AA" lang="he" hreflang="he">עברית</a></li><li><a href="http://ja.m.wikipedia.org/wiki/%E3%83%96%E3%83%BC%E3%83%AB%E4%BB%A3%E6%95%B0" lang="ja" hreflang="ja">日本語</a></li><li><a href="http://ru.m.wikipedia.org/wiki/%D0%91%D1%83%D0%BB%D0%B5%D0%B2%D0%B0_%D0%B0%D0%BB%D0%B3%D0%B5%D0%B1%D1%80%D0%B0" lang="ru" hreflang="ru">русский</a></li><li><a href="http://simple.m.wikipedia.org/wiki/Boolean_algebra" lang="simple" hreflang="simple">Simple English</a></li><li><a href="http://zh.m.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E4%BB%A3%E6%95%B0" lang="zh" hreflang="zh">中文</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia ®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Boolean_algebra&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Boolean_algebra&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Boolean+algebra&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>