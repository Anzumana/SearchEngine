<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>C preprocessor - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"C preprocessor","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/C_preprocessor" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=C+preprocessor"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">C preprocessor</h1>			
<p>The <b>C preprocessor</b> or <b>cpp</b> is the <a href="http://en.m.wikipedia.org/wiki/Preprocessor" title="Preprocessor">macro preprocessor</a> for the <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="C++" title="C++">C++</a> computer <a href="Programming_language" title="Programming language">programming languages</a>. The preprocessor provides the ability for the inclusion of <a href="http://en.m.wikipedia.org/wiki/Header_files" title="Header files" class="mw-redirect">header files</a>, <a href="Macro_(computer_science)" title="Macro (computer science)">macro</a> expansions, <a href="Conditional_compilation" title="Conditional compilation">conditional compilation</a>, and line control.</p>
<p>In many C implementations, it is a separate <a href="http://en.m.wikipedia.org/wiki/Computer_program" title="Computer program">program</a> invoked by the <a href="Compiler" title="Compiler">compiler</a> as the first part of translation.</p>
<p>The language of preprocessor directives is agnostic to the grammar of C, so the C preprocessor can also be used independently to process other kinds of <a href="http://en.m.wikipedia.org/wiki/Text_files" title="Text files" class="mw-redirect">text files</a>.</p>
<h2> <span class="mw-headline" id="Phases">Phases</span>
</h2>
<p>Preprocessing is defined by the first four (of eight) <i>phases of translation</i> specified in the C Standard.</p>
<ol>
<li>Trigraph replacement: The preprocessor replaces <a href="http://en.m.wikipedia.org/wiki/C_trigraph" title="C trigraph" class="mw-redirect">trigraph sequences</a> with the characters they represent.</li>
<li>Line splicing: Physical source lines that are continued with <a href="http://en.m.wikipedia.org/wiki/Escape_character" title="Escape character">escaped</a> <a href="Newline" title="Newline">newline</a> sequences are <i>spliced</i> to form logical lines.</li>
<li>Tokenization: The preprocessor breaks the result into <i>preprocessing tokens</i> and <a href="Whitespace_character" title="Whitespace character">whitespace</a>. It replaces comments with whitespace.</li>
<li>Macro expansion and directive handling: <a href="http://en.m.wikipedia.org/wiki/Preprocessing_directive" title="Preprocessing directive" class="mw-redirect">Preprocessing directive</a> lines, including file inclusion and conditional compilation, are executed. The preprocessor simultaneously expands macros and, in the 1999 version of the C standard, handles <code>_Pragma</code> operators.</li>
</ol>
<h3> <span class="mw-headline" id="Including_files">Including files</span>
</h3>
<p>One of the most common uses of the preprocessor is to include another file:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Hello, world!<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>The preprocessor replaces the line <code>#include &lt;stdio.h&gt;</code> with the text of the file 'stdio.h', which declares the <code>printf()</code> <a href="Subroutine" title="Subroutine">function</a> among other things.</p>
<p>This can also be written using double quotes, e.g. <code>#include "stdio.h"</code>. If the filename is enclosed within angle brackets, the file is searched for in the standard compiler include paths. If the filename is enclosed within double quotes, the search path is expanded to include the current source directory. C compilers and programming environments all have a facility which allows the programmer to define where include files can be found. This can be introduced through a command line flag, which can be parameterized using a <a href="http://en.m.wikipedia.org/wiki/Make_(software)" title="Make (software)">makefile</a>, so that a different set of include files can be swapped in for different operating systems, for instance.</p>
<p>By convention, include files are given a <i>.h</i> extension, and files not included by others are given a <i>.c</i> extension. However, there is no requirement that this be observed. Occasionally you will see files with other extensions included: files with a <i>.def</i> extension may denote files designed to be included multiple times, each time expanding the same repetitive content; <code>#include "icon.xbm"</code> is likely to refer to an <a href="http://en.m.wikipedia.org/wiki/XBM" title="XBM" class="mw-redirect">XBM</a> image file (which is at the same time a C source file).</p>
<p><code>#include</code> often compels the use of <a href="http://en.m.wikipedia.org/wiki/Include_guard" title="Include guard"><code>#include</code> guards</a> or <a href="http://en.m.wikipedia.org/wiki/Pragma_once" title="Pragma once"><code>#pragma once</code></a> to prevent double inclusion.</p>
<h3> <span class="mw-headline" id="Conditional_compilation">Conditional compilation</span>
</h3>
<p>The <code>#if</code>, <code>#ifdef</code>, <code>#ifndef</code>, <code>#else</code>, <code>#elif</code> and <code>#endif</code> directives can be used for <a href="Conditional_compilation" title="Conditional compilation">conditional compilation</a>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#if VERBOSE &gt;= 2</span>
  print<span class="br0">(</span><span class="st0">"trace message"</span><span class="br0">)</span><span class="sy4">;</span>
<span class="co2">#endif</span>
</pre>
</div>
</div>
<p>Most compilers targeting <a href="http://en.m.wikipedia.org/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a> implicitly define <code>_WIN32</code>.<sup id="cite_ref-1" class="reference"><a href="C_preprocessor#cite_note-1"><span>[</span>1<span>]</span></a></sup> This allows code, including preprocessor commands, to compile only when targeting Windows systems. A few compilers define <code>WIN32</code> instead. For such compilers that do not implicitly define the <code>_WIN32</code> macro, it can be specified on the compiler's command line, using <code>-D_WIN32</code>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#ifdef __unix__ /* __unix__ is usually defined by compilers targeting Unix systems */</span>
<span class="co2"># include &lt;unistd.h&gt;</span>
<span class="co2">#elif defined _WIN32 /* _Win32 is usually defined by compilers targeting 32 or 64 bit Windows systems */</span>
<span class="co2"># include &lt;windows.h&gt;</span>
<span class="co2">#endif</span>
</pre>
</div>
</div>
<p>The example code tests if a macro <code>__unix__</code> is defined. If it is, the file <code>&lt;unistd.h&gt;</code> is then included. Otherwise, it tests if a macro <code>_WIN32</code> is defined instead. If it is, the file <code>&lt;windows.h&gt;</code> is then included.</p>
<p>A more complex <code>#if</code> example can use operators, for example something like:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#if !(defined __LP64__ || defined __LLP64__) || defined _WIN32 &amp;&amp; !defined _WIN64</span>
        <span class="co1">// we are compiling for a 32-bit system</span>
<span class="co2">#else</span>
        <span class="co1">// we are compiling for a 64-bit system</span>
<span class="co2">#endif</span>
</pre>
</div>
</div>
<p>Translation can also be caused to fail by using the <code>#error</code> directive:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#if RUBY_VERSION == 190</span>
<span class="co2"># error 1.9.0 not supported</span>
<span class="co2">#endif</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Macro_definition_and_expansion">Macro definition and expansion</span>
</h3>
<p>There are two types of macros, <i>object-like</i> and <i>function-like</i>. Object-like macros do not take parameters; function-like macros do. The generic syntax for declaring an identifier as a macro of each type is, respectively:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#define &lt;identifier&gt; &lt;replacement token list&gt;                    // object-like macro</span>
<span class="co2">#define &lt;identifier&gt;(&lt;parameter list&gt;) &lt;replacement token list&gt;  // function-like macro, note parameters</span>
</pre>
</div>
</div>
<p>The <i>function-like</i> macro declaration must not have any whitespace between the identifier and the first, opening, parenthesis. If whitespace is present, the macro will be interpreted as object-like with everything starting from the first parenthesis added to the token list.</p>
<p>A macro definition can be removed with "#undef":</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#undef &lt;identifier&gt;                                              // delete the macro</span>
</pre>
</div>
</div>
<p>Whenever the identifier appears in the source code it is replaced with the replacement token list, which can be empty. For an identifier declared to be a function-like macro, it is only replaced when the following token is also a left parenthesis that begins the argument list of the macro invocation. The exact procedure followed for expansion of function-like macros with arguments is subtle.</p>
<p>Object-like macros were conventionally used as part of good programming practice to create symbolic names for constants, e.g.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#define PI 3.14159</span>
</pre>
</div>
</div>
<p>... instead of hard-coding the <a href="http://en.m.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants" title="Magic number (programming)">numbers</a> throughout the code. An alternative in both C and C++, especially in situations in which a pointer to the number is required, is to apply the <code>const</code> qualifier to a global variable. This causes the value to be stored in memory, instead of being substituted by the preprocessor.</p>
<p>An example of a function-like macro is:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#define RADTODEG(x) ((x) * 57.29578)</span>
</pre>
</div>
</div>
<p>This defines a <a href="http://en.m.wikipedia.org/wiki/Radian" title="Radian">radians</a>-to-degrees conversion which can be inserted in the code where required, i.e., <code>RADTODEG(34)</code>. This is expanded in-place, so that repeated multiplication by the constant is not shown throughout the code. The macro here is written as all uppercase to emphasize that it is a macro, not a compiled function.</p>
<p>The second <code><span class="mw-geshi cpp source-cpp">x</span></code> is enclosed in its own pair of parentheses, avoiding calculations in the wrong order if an expression instead of a single value is passed. For example, the expression <code><span class="mw-geshi cpp source-cpp">RADTODEG<span class="br0">(</span>r <span class="sy2">+</span> <span class="nu0">1</span><span class="br0">)</span></span></code> is expanded correctly as <code><span class="mw-geshi cpp source-cpp"><span class="br0">(</span><span class="br0">(</span>r <span class="sy2">+</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy2">*</span> <span class="nu16">57.29578</span><span class="br0">)</span></span></code>, instead of <code><span class="mw-geshi cpp source-cpp"><span class="br0">(</span>r <span class="sy2">+</span> <span class="nu0">1</span> <span class="sy2">*</span> <span class="nu16">57.29578</span><span class="br0">)</span></span></code> — which gives precedence to the multiplication — without them.</p>
<p>Similarly, the outer pair of parentheses maintain correct order of operation, such as in <code><span class="mw-geshi cpp source-cpp"><span class="nu0">1</span> <span class="sy2">/</span> RADTODEG<span class="br0">(</span>r<span class="br0">)</span></span></code>, which expands to <code><span class="mw-geshi cpp source-cpp"><span class="nu0">1</span> <span class="sy2">/</span> <span class="br0">(</span><span class="br0">(</span>r<span class="br0">)</span> <span class="sy2">*</span> <span class="nu16">57.29578</span><span class="br0">)</span></span></code> instead of the erroneous <code><span class="mw-geshi cpp source-cpp"><span class="nu0">1</span> <span class="sy2">/</span> <span class="br0">(</span>r<span class="br0">)</span> <span class="sy2">*</span> <span class="nu16">57.29578</span></span></code> without them.</p>
<h3> <span class="mw-headline" id="Special_macros_and_directives">Special macros and directives</span>
</h3>
<p>Certain symbols are required to be defined by an implementation during preprocessing. These include <code>__FILE__</code> and <code>__LINE__</code>, predefined by the preprocessor itself, which expand into the current file and line number. For instance the following:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co1">// debugging macros so we can pin down message origin at a glance</span>
<span class="co2">#define WHERESTR  "[file %s, line %d]: "</span>
<span class="co2">#define WHEREARG  __FILE__, __LINE__</span>
<span class="co2">#define DEBUGPRINT2(...)       fprintf(stderr, __VA_ARGS__)</span>
<span class="co2">#define DEBUGPRINT(_fmt, ...)  DEBUGPRINT2(WHERESTR _fmt, WHEREARG, __VA_ARGS__)</span>
<span class="co1">//...</span>
 
  DEBUGPRINT<span class="br0">(</span><span class="st0">"hey, x=%d<span class="es1">\n</span>"</span>, x<span class="br0">)</span><span class="sy4">;</span>
</pre>
</div>
</div>
<p>prints the value of <code>x</code>, preceded by the file and line number to the error stream, allowing quick access to which line the message was produced on. Note that the <code>WHERESTR</code> argument is concatenated with the string following it. The values of <code>__FILE__</code> and <code>__LINE__</code> can be manipulated with the <code>#line</code> directive. The <code>#line</code> directive determines the line number and the file name of the line below. E.g.:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#line 314 "pi.c"</span>
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"line=%d file=%s<span class="es1">\n</span>"</span>, __LINE__, __FILE__<span class="br0">)</span><span class="sy4">;</span>
</pre>
</div>
</div>
<p>generates the printf function:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"line=%d file=%s<span class="es1">\n</span>"</span>, <span class="nu0">314</span>, <span class="st0">"pi.c"</span><span class="br0">)</span><span class="sy4">;</span>
</pre>
</div>
</div>
<p>Source code <a href="http://en.m.wikipedia.org/wiki/Debugger" title="Debugger">debuggers</a> refer also to the source position defined with <code>__FILE__</code> and <code>__LINE__</code>. This allows source code debugging, when C is used as target language of a compiler, for a totally different language. The first <a href="ANSI_C#C89_and_C90" title="ANSI C">C Standard</a> specified that the macro <code>__STDC__</code> be defined to 1 if the implementation conforms to the ISO Standard and 0 otherwise, and the macro <code>__STDC_VERSION__</code> defined as a numeric literal specifying the version of the Standard supported by the implementation. Standard C++ compilers support the <code>__cplusplus</code> macro. Compilers running in non-standard mode must not set these macros, or must define others to signal the differences.</p>
<p>Other Standard macros include <code>__DATE__</code>, the current date, and <code>__TIME__</code>, the current time.</p>
<p>The second edition of the C Standard, <a href="C99" title="C99">C99</a>, added support for <code>__func__</code>, which contains the name of the function definition within which it is contained, but because the preprocessor is <a href="http://en.wiktionary.org/wiki/agnostic" class="extiw" title="wikt:agnostic">agnostic</a> to the grammar of C, this must be done in the compiler itself using a variable local to the function.</p>
<p>Macros that can take a varying number of arguments (<a href="Variadic_macro" title="Variadic macro">variadic macros</a>) are not allowed in C89, but were introduced by a number of compilers and standardised in <a href="C99" title="C99">C99</a>. Variadic macros are particularly useful when writing wrappers to functions taking a variable number of parameters, such as <code><a href="Printf" title="Printf" class="mw-redirect">printf</a></code>, for example when logging warnings and errors.</p>
<p>One little-known usage pattern of the C preprocessor is known as "X-Macros".<sup id="cite_ref-X_macros_2-0" class="reference"><a href="C_preprocessor#cite_note-X_macros-2"><span>[</span>2<span>]</span></a></sup><sup id="cite_ref-3" class="reference"><a href="C_preprocessor#cite_note-3"><span>[</span>3<span>]</span></a></sup><sup id="cite_ref-4" class="reference"><a href="C_preprocessor#cite_note-4"><span>[</span>4<span>]</span></a></sup> An X-Macro is a <a href="Header_file" title="Header file">header file</a>. Commonly these use the extension ".def" instead of the traditional ".h". This file contains a list of similar macro calls, which can be referred to as "component macros". The include file is then referenced repeatedly.</p>
<p>Many compilers define additional, non-standard, macros, although these are often poorly documented. A common reference for these macros is the <a rel="nofollow" class="external text" href="http://predef.sourceforge.net/">Pre-defined C/C++ Compiler Macros project</a>, which lists "various pre-defined compiler macros that can be used to identify standards, compilers, operating systems, hardware architectures, and even basic run-time libraries at compile-time".</p>
<h4> <span class="mw-headline" id="Token_concatenation">Token concatenation</span>
</h4>
<p>The ## operator concatenates two tokens into one token, as in this example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#define DECLARE_STRUCT_TYPE(name) typedef struct name##_s name##_t</span>
 
DECLARE_STRUCT_TYPE<span class="br0">(</span>g_object<span class="br0">)</span><span class="sy4">;</span> <span class="co1">// Outputs typedef struct g_object_s g_object_t;</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="User-defined_compilation_errors">User-defined compilation errors</span>
</h3>
<p>The <code>#error</code> directive outputs a message through the error stream.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="text source-text">
<pre class="de1">
#error "error message"
</pre>
</div>
</div>
<h2> <span class="mw-headline" id="Implementations">Implementations</span>
</h2>
<h3> <span class="mw-headline" id="Compiler-specific_preprocessor_features">Compiler-specific preprocessor features</span>
</h3>
<p>The <code>#pragma</code> directive is a <a href="http://en.m.wikipedia.org/wiki/Compiler_directive" title="Compiler directive" class="mw-redirect">compiler specific directive</a> which compiler vendors may use for their own purposes. For instance, a <code>#pragma</code> is often used to allow suppression of specific error messages, manage heap and stack debugging and so on. A compiler with support for the <a href="http://en.m.wikipedia.org/wiki/OpenMP" title="OpenMP">OpenMP</a> parallelization library can automatically parallelize a <code>for</code> loop with <code>#pragma omp parallel for</code>.</p>
<p>C99 introduced a few standard <code>#pragma</code> directives, taking the form <code>#pragma STDC ...</code>, which are used to control the floating-point implementation.</p>
<ul>
<li>Many implementations do not support trigraphs or do not replace them by default.</li>
<li>Many implementations (including, e.g., the C-compilers by GNU, Intel, Microsoft and IBM) provide a non-standard directive to print out a warning message in the output, but not stop the compilation process. A typical use is to warn about the usage of some old code, which is now <a href="http://en.m.wikipedia.org/wiki/Deprecated" title="Deprecated" class="mw-redirect">deprecated</a> and only included for compatibility reasons, e.g.:</li>
</ul>
<p>(GNU, Intel and IBM)</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="text source-text">
<pre class="de1">
#warning "Do not use ABC, which is deprecated. Use XYZ instead."
</pre>
</div>
</div>
<p>(Microsoft)</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="text source-text">
<pre class="de1">
#pragma message("Do not use ABC, which is deprecated. Use XYZ instead.")
</pre>
</div>
</div>
<ul>
<li>Some <a href="Unix" title="Unix">Unix</a> preprocessors traditionally provided "assertions", which have little similarity to <a href="http://en.m.wikipedia.org/wiki/Assertion_(computing)" title="Assertion (computing)">assertions</a> used in programming.<sup id="cite_ref-5" class="reference"><a href="C_preprocessor#cite_note-5"><span>[</span>5<span>]</span></a></sup>
</li>
<li>GCC provides <code>#include_next</code> for chaining headers of the same name.<sup id="cite_ref-6" class="reference"><a href="C_preprocessor#cite_note-6"><span>[</span>6<span>]</span></a></sup>
</li>
<li>
<a href="Objective-C" title="Objective-C">Objective-C</a> preprocessors have <code>#import</code>, which is like <code>#include</code> but only includes the file once.</li>
</ul>
<h2> <span class="mw-headline" id="Uses">Uses</span>
</h2>
<h3> <span class="mw-headline" id="As_a_general-purpose_preprocessor_.28GPP.29">As a general-purpose preprocessor (GPP)</span>
</h3>
<p>Since the C preprocessor can be invoked independently to process files other than those containing to-be-compiled source code, it can also be used as a "general purpose preprocessor" (GPP) for other types of text processing. One particularly notable example is the now-deprecated <a href="http://en.m.wikipedia.org/wiki/Imake" title="Imake">imake</a> system.</p>
<p>GPP does work acceptably with most <a href="Assembly_language" title="Assembly language">assembly languages</a>. GNU mentions assembly as one of the target languages among C, C++ and Objective-C in the documentation of its implementation of the preprocessor. This requires that the assembler syntax not conflict with GPP syntax, which means no lines starting with <code>#</code> and that double quotes, which cpp interprets as <a href="http://en.m.wikipedia.org/wiki/String_literal" title="String literal">string literals</a> and thus ignores, don't have syntactical meaning other than that.</p>
<p>However, since the C preprocessor does not have features of some other preprocessors, such as recursive macros, selective expansion according to quoting, string evaluation in conditionals, and Turing completeness, it is very limited in comparison to a more general macro processor such as <a href="http://en.m.wikipedia.org/wiki/M4_(computer_language)" title="M4 (computer language)">m4</a>.</p>
<h2> <span class="mw-headline" id="See_also">See also</span>
</h2>
<ul>
<li><a href="C_syntax" title="C syntax">C syntax</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Make_(software)" title="Make (software)">Make</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Preprocessor" title="Preprocessor">Preprocessor</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/M4_(computer_language)" title="M4 (computer language)">m4 (computer language)</a></li>
</ul>
<h2> <span class="mw-headline" id="References">References</span>
</h2>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="C_preprocessor#cite_ref-1">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/b0084kay.aspx">List of predefined ANSI C and Microsoft C++ implementation macros.</a></span>
</li>
<li id="cite_note-X_macros-2">
<span class="mw-cite-backlink"><b><a href="C_preprocessor#cite_ref-X_macros_2-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://liw.iki.fi/liw/texts/cpp-trick.html">Wirzenius, Lars. C "Preprocessor Trick For Implementing Similar Data Types". Retrieved January 9, 2011</a></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="C_preprocessor#cite_ref-3">^</a></b></span> <span class="reference-text"><span class="citation Journal">Meyers, Randy (May 2001). <a rel="nofollow" class="external text" href="http://www.ddj.com/cpp/184401387">"The New C: X Macros"</a>. <i>Dr. Dobb's Journal</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.ddj.com/cpp/184401387">http://www.ddj.com/cpp/184401387</a></span><span class="reference-accessdate">. Retrieved 1 May 2008</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+New+C%3A+X+Macros&amp;rft.jtitle=Dr.+Dobb%27s+Journal&amp;rft.aulast=Meyers&amp;rft.aufirst=Randy&amp;rft.au=Meyers%2C%26%2332%3BRandy&amp;rft.date=May+2001&amp;rft_id=http%3A%2F%2Fwww.ddj.com%2Fcpp%2F184401387&amp;rfr_id=info:sid/en.wikipedia.org:C_preprocessor"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="C_preprocessor#cite_ref-4">^</a></b></span> <span class="reference-text"><span class="citation Journal">Beal, Stephan (August 2004). <a rel="nofollow" class="external text" href="http://wanderinghorse.net/computing/papers/#supermacros"><i>Supermacros</i></a><span class="printonly">. <a rel="nofollow" class="external free" href="http://wanderinghorse.net/computing/papers/#supermacros">http://wanderinghorse.net/computing/papers/#supermacros</a></span><span class="reference-accessdate">. Retrieved 27 October 2008</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Supermacros&amp;rft.aulast=Beal&amp;rft.aufirst=Stephan&amp;rft.au=Beal%2C%26%2332%3BStephan&amp;rft.date=August+2004&amp;rft_id=http%3A%2F%2Fwanderinghorse.net%2Fcomputing%2Fpapers%2F%23supermacros&amp;rfr_id=info:sid/en.wikipedia.org:C_preprocessor"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-5">
<span class="mw-cite-backlink"><b><a href="C_preprocessor#cite_ref-5">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/cpp/Obsolete-Features.html">GCC Obsolete features</a></span>
</li>
<li id="cite_note-6">
<span class="mw-cite-backlink"><b><a href="C_preprocessor#cite_ref-6">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://gcc.gnu.org/onlinedocs/cpp/Wrapper-Headers.html">http://gcc.gnu.org/onlinedocs/cpp/Wrapper-Headers.html</a></span>
</li>
</ol>
</div>
<h2> <span class="mw-headline" id="External_links">External links</span>
</h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;"><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x"></td>
<td class="mbox-text plainlist" style="">Wikibooks has a book on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/C_Programming/Preprocessor" class="extiw" title="wikibooks:C Programming/Preprocessor">C Programming/Preprocessor</a></b></i>
</td>
</tr></table>
<ul>
<li>
<a rel="nofollow" class="external text" href="http://www.open-std.org/JTC1/SC22/WG14/www/standards">ISO/IEC 9899</a>. The official C:1999 standard, along with defect reports and a rationale. As of 2005 the latest version is <a rel="nofollow" class="external text" href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf">ISO/IEC 9899:TC2</a>.</li>
<li><a rel="nofollow" class="external text" href="http://gcc.gnu.org/onlinedocs/cpp/index.html">GNU CPP online manual</a></li>
<li><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/y4skk93w(VS.80).aspx">Visual Studio .NET preprocessor reference</a></li>
<li>
<a rel="nofollow" class="external text" href="http://predef.sourceforge.net/">Pre-defined C/C++ Compiler Macros project</a>: lists "various pre-defined compiler macros that can be used to identify standards, compilers, operating systems, hardware architectures, and even basic run-time libraries at compile-time"</li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;;"><tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;;">
<tr>
<th scope="col" style=";background:#B0C4DE;" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="Template:CProLang" title="Template:CProLang"><span title="View this template" style=";background:#B0C4DE;;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="Template_talk:CProLang" title="Template talk:CProLang"><span title="Discuss this template" style=";background:#B0C4DE;;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit"><span title="Edit this template" style=";background:#B0C4DE;;background:none transparent;border:none;">e</span></a></li>
</ul>
</div>
<div class="" style="font-size:110%;"><a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C programming language</a></div>
</th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-abovebelow" style=";background:#EEE;" colspan="2">
<div>
<ul>
<li>
<a href="ANSI_C" title="ANSI C">ANSI C</a>
<ul>
<li><a href="ANSI_C#C89_and_C90" title="ANSI C">C89 and C90</a></li>
</ul>
</li>
<li><a href="C99" title="C99">C99</a></li>
<li><a href="C11_(C_standard_revision)" title="C11 (C standard revision)">C11</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;"><a href="Category:C_compilers" title="Category:C compilers">Compilers</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li><a href="Borland_Turbo_C" title="Borland Turbo C">Borland Turbo C</a></li>
<li><a href="Clang" title="Clang">Clang</a></li>
<li><a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a></li>
<li><a href="LCC_(compiler)" title="LCC (compiler)">LCC</a></li>
<li><a href="Pelles_C" title="Pelles C">Pelles C</a></li>
<li><a href="Portable_C_Compiler" title="Portable C Compiler">PCC</a></li>
<li><a href="Tiny_C_Compiler" title="Tiny C Compiler">TCC</a></li>
<li>
<a href="Visual_C++" title="Visual C++">Visual C++</a>
<ul>
<li><a href="C++/CLI" title="C++/CLI">C++/CLI</a></li>
<li><a href="C++/CX" title="C++/CX">C++/CX</a></li>
</ul>
</li>
<li><a href="Watcom_C/C++_compiler" title="Watcom C/C++ compiler">Watcom C/C++ compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;"><a href="Category:C_libraries" title="Category:C libraries">Libraries</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul>
<li><a href="C_standard_library" title="C standard library">C standard library</a></li>
<li><a href="GNU_C_Library" title="GNU C Library">glibc</a></li>
<li><a href="Dietlibc" title="Dietlibc">dietlibc</a></li>
<li><a href="UClibc" title="UClibc">uClibc</a></li>
<li><a href="Newlib" title="Newlib">Newlib</a></li>
<li><a href="Embedded_GLIBC" title="Embedded GLIBC">EGLIBC</a></li>
<li><a href="Bionic_(software)" title="Bionic (software)">Bionic</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;">Features</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li><a href="Null-terminated_string" title="Null-terminated string">String</a></li>
<li><a href="C_syntax" title="C syntax">Syntax</a></li>
<li><strong class="selflink">Preprocessor</strong></li>
<li><a href="C_data_types" title="C data types">Variable types and declarations</a></li>
<li><a href="C_standard_library" title="C standard library">Functions</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;">Select descendants</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul>
<li><a href="C++" title="C++">C++</a></li>
<li><a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></li>
<li><a href="D_(programming_language)" title="D (programming language)">D</a></li>
<li><a href="Objective-C" title="Objective-C">Objective-C</a></li>
<li><a href="Alef_(programming_language)" title="Alef (programming language)">Alef</a></li>
<li><a href="Limbo_(programming_language)" title="Limbo (programming language)">Limbo</a></li>
<li><a href="Go_(programming_language)" title="Go (programming language)">Go</a></li>
<li><a href="Vala_(programming_language)" title="Vala (programming language)">Vala</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;">C and other languages</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li>C and C++
<ul>
<li><a href="Compatibility_of_C_and_C++" title="Compatibility of C and C++">Compatibility</a></li>
<li><a href="Operators_in_C_and_C++" title="Operators in C and C++">Operators</a></li>
</ul>
</li>
<li><a href="Comparison_of_Pascal_and_C" title="Comparison of Pascal and C">Comparison of Pascal and C</a></li>
<li><a href="Java_virtual_machine#C_to_bytecode_compilers" title="Java virtual machine">C to Java byte-code compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-abovebelow" style=";background:#EEE;" colspan="2">
<div>
<ul>
<li>
<img alt="Category" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png" width="16" height="14" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/24px-Folder_Hexagonal_Icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/32px-Folder_Hexagonal_Icon.svg.png 2x"><b><a href="Category:C_programming_language" title="Category:C programming language">Category:C programming language</a></b>
</li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr></table>

						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 9 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://cs.m.wikipedia.org/wiki/Preprocesor_jazyka_C" lang="cs" hreflang="cs">česky</a></li><li><a href="http://de.m.wikipedia.org/wiki/C-Pr%C3%A4prozessor" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://es.m.wikipedia.org/wiki/Preprocesador_de_C" lang="es" hreflang="es">español</a></li><li><a href="http://fr.m.wikipedia.org/wiki/Pr%C3%A9processeur_C" lang="fr" hreflang="fr">français</a></li><li><a href="http://hu.m.wikipedia.org/wiki/C_el%C5%91ford%C3%ADt%C3%B3" lang="hu" hreflang="hu">magyar</a></li><li><a href="http://pl.m.wikipedia.org/wiki/CPP_(preprocesor)" lang="pl" hreflang="pl">polski</a></li><li><a href="http://ru.m.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D1%80_%D0%A1%D0%B8" lang="ru" hreflang="ru">русский</a></li><li><a href="http://fi.m.wikipedia.org/wiki/Cpp" lang="fi" hreflang="fi">suomi</a></li><li><a href="http://tr.m.wikipedia.org/wiki/C_%C3%B6ni%C5%9Flemcisi" lang="tr" hreflang="tr">Türkçe</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia ®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=C_preprocessor&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=C_preprocessor&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=C+preprocessor&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>