<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>Polymorphism (computer science) - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Polymorphism (computer science)","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Polymorphism_(computer_science)" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Polymorphism+%28computer+science%29"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">Polymorphism (computer science)</h1>			<div class="dablink">This article is about the <a href="http://en.m.wikipedia.org/wiki/Programming_language_theory" title="Programming language theory">programming language theory</a> concepts with direct application to <a href="http://en.m.wikipedia.org/wiki/Functional_programming_languages" title="Functional programming languages" class="mw-redirect">functional programming languages</a>.  For a gentler introduction of these notions as commonly implemented in <a href="Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, see <a href="http://en.m.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming">Polymorphism in object-oriented programming</a>.</div>
<table class="vertical-navbox nowraplinks" cellspacing="5" style="float: right; clear: right; background-color: #f9f9f9; border: 1px solid #aaa; width:22em; margin: 0 0 1em 1em; padding: 0.2em; border-spacing: 0.4em 0; text-align: center; line-height: 1.4em; font-size: 88%;" cellpadding="0"><tr><th class="" style="padding: 0.2em 0.4em 0.2em; font-size: 145%; line-height: 1.2em;">Theories and practice of polymorphism</th>
</tr><tr><td class="plainlist" style="padding-top: 0.2em; padding-bottom: 0.2em; text-align: left;">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Double_dispatch" title="Double dispatch">Double dispatch</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Multiple_dispatch" title="Multiple dispatch">Multiple dispatch</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Operator_overloading" title="Operator overloading">Operator overloading</a></li>
<li><strong class="selflink">Polymorphism in computer science</strong></li>
<li><a href="http://en.m.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming">Polymorphism in OOP</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Subtyping" title="Subtyping">Subtyping</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Virtual_function" title="Virtual function">Virtual function</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Dynamic_dispatch" title="Dynamic dispatch">Single &amp; dynamic dispatch</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Parametric_polymorphism" title="Parametric polymorphism">Parametric polymorphism</a></li>
</ul></td>
</tr><tr><td style="text-align: right; font-size: 115%;">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul><li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Polymorphism" title="Template:Polymorphism"><span title="View this template" style="">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Polymorphism" title="Template talk:Polymorphism"><span title="Discuss this template" style="">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Polymorphism&amp;action=edit"><span title="Edit this template" style="">e</span></a></li>
</ul></div>
</td>
</tr></table><p>In <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, <b>polymorphism</b> is a <a href="Programming_language" title="Programming language">programming language</a> feature that allows values of different <a href="Data_type" title="Data type">data types</a> to be handled using a uniform interface. The concept of parametric polymorphism applies to both data types and <a href="http://en.m.wikipedia.org/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">functions</a>. A function that can evaluate to or be applied to values of different types is known as a <i>polymorphic function.</i> A data type that can appear to be of a generalized type (e.g., a <a href="http://en.m.wikipedia.org/wiki/List_(computing)" title="List (computing)" class="mw-redirect">list</a> with elements of arbitrary type) is designated <i>polymorphic data type</i> like the generalized type from which such specializations are made.</p>
<p>There are several fundamentally different kinds of polymorphism, two of which were originally informally described by <a href="http://en.m.wikipedia.org/wiki/Christopher_Strachey" title="Christopher Strachey">Christopher Strachey</a> in 1967. If the function denotes different and potentially heterogeneous implementations depending on a limited range of individually specified types and combination, it is called <b><a href="http://en.m.wikipedia.org/wiki/Ad-hoc_polymorphism" title="Ad-hoc polymorphism">ad-hoc polymorphism</a></b>. Ad-hoc polymorphism is supported in many languages using <a href="http://en.m.wikipedia.org/wiki/Function_overloading" title="Function overloading">function</a> and <a href="http://en.m.wikipedia.org/wiki/Method_overloading" title="Method overloading" class="mw-redirect">method overloading</a>.</p>
<p>If all code is written without mention of any specific type and thus can be used transparently with any number of new types, it is called <b><a href="http://en.m.wikipedia.org/wiki/Parametric_polymorphism" title="Parametric polymorphism">parametric polymorphism</a></b>. <a href="http://en.m.wikipedia.org/wiki/John_C._Reynolds" title="John C. Reynolds">John C. Reynolds</a> (and later <a href="http://en.m.wikipedia.org/wiki/Jean-Yves_Girard" title="Jean-Yves Girard">Jean-Yves Girard</a>) formally developed this notion of polymorphism as an extension to lambda calculus (called the <a href="http://en.m.wikipedia.org/wiki/Polymorphic_Lambda_Calculus" title="Polymorphic Lambda Calculus" class="mw-redirect">polymorphic lambda calculus</a>, or <a href="http://en.m.wikipedia.org/wiki/System_F" title="System F">System F</a>). Parametric polymorphism is widely supported in <a href="Static_typing" title="Static typing" class="mw-redirect">statically typed</a> <a href="http://en.m.wikipedia.org/wiki/Functional_programming_language" title="Functional programming language" class="mw-redirect">functional programming languages</a>. In the object-oriented programming community, programming using parametric polymorphism is often called <i><a href="Generic_programming" title="Generic programming">generic programming</a></i>.</p>
<p>In <a href="Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, <b><a href="http://en.m.wikipedia.org/wiki/Subtype_polymorphism" title="Subtype polymorphism" class="mw-redirect">subtype polymorphism</a></b> or <b>inclusion polymorphism</b> is a concept in <a href="http://en.m.wikipedia.org/wiki/Type_theory" title="Type theory">type theory</a> wherein a name may denote instances of many different classes as long as they are related by some common super class.<sup id="cite_ref-gbooch_1-0" class="reference"><a href="Type_polymorphism#cite_note-gbooch-1"><span>[</span>1<span>]</span></a></sup> Inclusion polymorphism is generally supported through <a href="http://en.m.wikipedia.org/wiki/Subtyping" title="Subtyping">subtyping</a>, i.e., objects of different types are entirely substitutable for objects of another type (their base type(s)) and thus can be handled via a common interface.</p>
<p>Interaction between parametric polymorphism and subtyping leads to the concepts of <a href="http://en.m.wikipedia.org/wiki/Bounded_quantification" title="Bounded quantification">bounded quantification</a> and <a href="http://en.m.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)" title="Covariance and contravariance (computer science)">covariance and contravariance</a> (or polarity) of <a href="http://en.m.wikipedia.org/wiki/Type_constructor" title="Type constructor">type constructors</a>.</p>
<h2> <span class="mw-headline" id="History">History</span></h2>
<p>Polymorphism derives from Ancient Greek πολύς (polus, “many, much”) and μορφή (morphē, “form, shape”). The earliest reference to Polymorphism is in a set of lecture notes written by <i><a href="http://en.m.wikipedia.org/wiki/Christopher_Strachey" title="Christopher Strachey">Christopher Strachey</a></i> called <i><a href="http://en.m.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages" title="Fundamental Concepts in Programming Languages">Fundamental Concepts in Programming Languages</a></i> <sup id="cite_ref-2" class="reference"><a href="Type_polymorphism#cite_note-2"><span>[</span>2<span>]</span></a></sup>. Polymorphism first appeared in the <i><a href="http://en.m.wikipedia.org/wiki/ML_programming_language" title="ML programming language" class="mw-redirect">ML programming language</a></i>, along with fellow concepts <i><a href="http://en.m.wikipedia.org/wiki/Inheritance_(object-oriented_programming)" title="Inheritance (object-oriented programming)">Inheritance (object-oriented programming)</a></i> and <i><a href="http://en.m.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)" title="Encapsulation (object-oriented programming)">Encapsulation (object-oriented programming)</a></i>. Some years later, the <i><a href="http://en.m.wikipedia.org/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">Common Lisp Object System</a></i> was first standardised, and was essentially the first <i><a href="Object-oriented_programming" title="Object-oriented programming">Object-oriented programming</a></i> standard, which paved the way for the likes of the <i><a href="http://en.m.wikipedia.org/wiki/C_Programming_Language" title="C Programming Language" class="mw-redirect">C Programming Language</a></i> as well as the <i><a href="http://en.m.wikipedia.org/wiki/Smalltalk_programming_language" title="Smalltalk programming language" class="mw-redirect">Smalltalk programming language</a></i> , and eventually <i><a href="C++" title="C++">C++</a></i> and the <i><a href="http://en.m.wikipedia.org/wiki/Java_programming_language" title="Java programming language" class="mw-redirect">Java programming language</a></i>.</p>
<h2> <span class="mw-headline" id="Forms_of_polymorphism">Forms of polymorphism</span></h2>
<h3> <span class="mw-headline" id="Ad-hoc_polymorphism">Ad-hoc polymorphism</span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Ad-hoc_polymorphism" title="Ad-hoc polymorphism">Ad-hoc polymorphism</a></div>
<p><a href="http://en.m.wikipedia.org/wiki/Chris_Strachey" title="Chris Strachey" class="mw-redirect">Chris Strachey</a><sup id="cite_ref-3" class="reference"><a href="Type_polymorphism#cite_note-3"><span>[</span>3<span>]</span></a></sup> chose the term <b><a href="http://en.m.wikipedia.org/wiki/Ad-hoc_polymorphism" title="Ad-hoc polymorphism">ad-hoc polymorphism</a></b> to refer to polymorphic functions which can be applied to arguments of different types, but which behave differently depending on the type of the argument to which they are applied (also known as <a href="http://en.m.wikipedia.org/wiki/Function_overloading" title="Function overloading">function overloading</a> or <a href="http://en.m.wikipedia.org/wiki/Operator_overloading" title="Operator overloading">operator overloading</a>). The term "<a href="http://en.m.wikipedia.org/wiki/Ad_hoc" title="Ad hoc">ad hoc</a>" in this context is not intended to be pejorative; it refers simply to the fact that this type of polymorphism is not a fundamental feature of the type system. In the example below, the <code>Add</code> functions seems to work generically over various types when looking at the invocations, but are considered to be two entirely distinct functions by the compiler for all intents and purposes:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">program</span> Adhoc<span class="sy1">;</span>
 
<span class="kw1">function</span> Add<span class="br0">(</span> x<span class="sy1">,</span> y <span class="sy1">:</span> <span class="kw4">Integer</span> <span class="br0">)</span> <span class="sy1">:</span> <span class="kw4">Integer</span><span class="sy1">;</span>
<span class="kw1">begin</span>
    Add <span class="sy1">:</span><span class="sy3">=</span> x <span class="sy3">+</span> y
<span class="kw1">end</span><span class="sy1">;</span>
 
<span class="kw1">function</span> Add<span class="br0">(</span> s<span class="sy1">,</span> t <span class="sy1">:</span> <span class="kw4">String</span> <span class="br0">)</span> <span class="sy1">:</span> <span class="kw4">String</span><span class="sy1">;</span>
<span class="kw1">begin</span>
    Add <span class="sy1">:</span><span class="sy3">=</span> Concat<span class="br0">(</span> s<span class="sy1">,</span> t <span class="br0">)</span>
<span class="kw1">end</span><span class="sy1">;</span>
 
<span class="kw1">begin</span>
    <span class="kw3">Writeln</span><span class="br0">(</span>Add<span class="br0">(</span><span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span>
    <span class="kw3">Writeln</span><span class="br0">(</span>Add<span class="br0">(</span><span class="st0">'Hello, '</span><span class="sy1">,</span> <span class="st0">'World!'</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span>
<span class="kw1">end</span><span class="sy1">.</span>
</pre></div>
</div>
<p>In <a href="http://en.m.wikipedia.org/wiki/Dynamically_typed" title="Dynamically typed" class="mw-redirect">dynamically typed</a> languages the situation can be more complex as the correct function that needs to be invoked might only be determinable at run time.</p>
<h3> <span class="mw-headline" id="Parametric_polymorphism">Parametric polymorphism</span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Parametric_polymorphism" title="Parametric polymorphism">Parametric polymorphism</a></div>
<p><b><a href="http://en.m.wikipedia.org/wiki/Parametric_polymorphism" title="Parametric polymorphism">Parametric polymorphism</a></b> allows a function or a data type to be written generically, so that it can handle values <i>identically</i> without depending on their type.<sup id="cite_ref-bjpierce_4-0" class="reference"><a href="Type_polymorphism#cite_note-bjpierce-4"><span>[</span>4<span>]</span></a></sup> Parametric polymorphism is a way to make a language more expressive, while still maintaining full static <a href="http://en.m.wikipedia.org/wiki/Type-safety" title="Type-safety" class="mw-redirect">type-safety</a>.</p>
<p>Parametric polymorphism is ubiquitous in functional programming, where it is often simply referred to as "polymorphism". The following example shows a parametrized list data type and two parametrically polymorphic functions on them:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="haskell source-haskell">
<pre class="de1">
<span class="kw1">data</span> List a <span class="sy0">=</span> Nil <span class="sy0">|</span> Cons a <span class="br0">(</span>List a<span class="br0">)</span>
 
<span class="kw3">length</span> <span class="sy0">::</span> List a <span class="sy0">-&gt;</span> <span class="kw4">Integer</span>
<span class="kw3">length</span> Nil         <span class="sy0">=</span> <span class="nu0">0</span>
<span class="kw3">length</span> <span class="br0">(</span>Cons x xs<span class="br0">)</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="sy0">+</span> <span class="kw3">length</span> xs
 
<span class="kw3">map</span> <span class="sy0">::</span> <span class="br0">(</span>a <span class="sy0">-&gt;</span> b<span class="br0">)</span> <span class="sy0">-&gt;</span> List a <span class="sy0">-&gt;</span> List b
<span class="kw3">map</span> f Nil         <span class="sy0">=</span> Nil
<span class="kw3">map</span> f <span class="br0">(</span>Cons x xs<span class="br0">)</span> <span class="sy0">=</span> Cons <span class="br0">(</span>f x<span class="br0">)</span> <span class="br0">(</span><span class="kw3">map</span> f xs<span class="br0">)</span>
</pre></div>
</div>
<p>Parametric polymorphism is also available in several object-oriented languages, where it goes under the name "generics":</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="csharp source-csharp">
<pre class="de1">
<span class="kw4">class</span> List<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="br0">{</span>
    <span class="kw4">class</span> Node<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="br0">{</span>
        T elem<span class="sy0">;</span>
        Node<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> next<span class="sy0">;</span>
    <span class="br0">}</span>
    Node<span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> head<span class="sy0">;</span>
    <span class="kw4">int</span> length<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="sy0">...</span> <span class="br0">}</span>
<span class="br0">}</span>
 
List map<span class="br0">(</span>Func<span class="sy0">&lt;</span>A,B<span class="sy0">&gt;</span> f, List<span class="sy0">&lt;</span>A<span class="sy0">&gt;</span> xs<span class="br0">)</span> <span class="br0">{</span>
    <span class="sy0">...</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>Any parametrically polymorphic function is necessarily restricted in what it can do, working on the shape of the data instead of its value, leading to the concept of <a href="http://en.m.wikipedia.org/wiki/Parametricity" title="Parametricity">parametricity</a>.</p>
<h3> <span class="mw-headline" id="Subtype_polymorphism_.28or_inclusion_polymorphism.29"><span id="Subtype_polymorphism"></span> Subtype polymorphism (or inclusion polymorphism)</span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Subtype_polymorphism" title="Subtype polymorphism" class="mw-redirect">Subtype polymorphism</a></div>
<p>Some languages employ the idea of <i>subtypes</i> to restrict the range of types that can be used in a particular case of parametric polymorphism. In these languages, <b><a href="http://en.m.wikipedia.org/wiki/Subtyping_polymorphism" title="Subtyping polymorphism" class="mw-redirect">subtyping polymorphism</a></b> (sometimes referred to as dynamic polymorphism) allows a function to be written to take an object of a certain type <i>T</i>, but also work correctly if passed an object that belongs to a type <i>S</i> that is a subtype of <i>T</i> (according to the <a href="http://en.m.wikipedia.org/wiki/Liskov_substitution_principle" title="Liskov substitution principle">Liskov substitution principle</a>). This type relation is sometimes written <i>S</i> &lt;: <i>T</i>. Conversely, <i>T</i> is said to be a <i>supertype</i> of <i>S</i>—written <i>T</i> :&gt; <i>S</i>.</p>
<p>For example, if <code>Number</code>, <code>Rational</code>, and <code>Integer</code> are types such that <code>Number</code> :&gt; <code>Rational</code> and <code>Number</code> :&gt; <code>Integer</code>, a function written to take a <code>Number</code> will work equally well when passed an <code>Integer</code> or <code>Rational</code> as when passed a <code>Number</code>. The actual type of the object can be hidden from clients into a <a href="http://en.m.wikipedia.org/wiki/Black_box_(systems)" title="Black box (systems)" class="mw-redirect">black box</a>, and accessed via object <a href="http://en.m.wikipedia.org/wiki/Identity_(object-oriented_programming)" title="Identity (object-oriented programming)">identity</a>. In fact, if the <code>Number</code> type is <i>abstract</i>, it may not even be possible to get your hands on an object whose <i>most-derived</i> type is <code>Number</code> (see <a href="http://en.m.wikipedia.org/wiki/Abstract_data_type" title="Abstract data type">abstract data type</a>, <a href="http://en.m.wikipedia.org/wiki/Abstract_class" title="Abstract class" class="mw-redirect">abstract class</a>). This particular kind of type hierarchy is known—especially in the context of the <a href="http://en.m.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme programming language</a>—as a <i><a href="http://en.m.wikipedia.org/wiki/Numerical_tower" title="Numerical tower">numerical tower</a></i>, and usually contains many more types.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Object-oriented_programming_language" title="Object-oriented programming language" class="mw-redirect">Object-oriented programming languages</a> offer subtyping polymorphism using <i><a href="http://en.m.wikipedia.org/wiki/Subclass_(computer_science)" title="Subclass (computer science)" class="mw-redirect">subclassing</a></i> (also known as <i><a href="http://en.m.wikipedia.org/wiki/Inheritance_in_object-oriented_programming" title="Inheritance in object-oriented programming" class="mw-redirect">inheritance</a></i>). In typical implementations, each class contains what is called a <i><a href="http://en.m.wikipedia.org/wiki/Virtual_table" title="Virtual table" class="mw-redirect">virtual table</a></i>—a table of functions that implement the polymorphic part of the class interface—and each object contains a pointer to the "vtable" of its class, which is then consulted whenever a polymorphic method is called. This mechanism is an example of:</p>
<ul><li><i><a href="http://en.m.wikipedia.org/wiki/Late_binding" title="Late binding">late binding</a></i>, because virtual function calls are not bound until the time of invocation, and</li>
<li><i><a href="http://en.m.wikipedia.org/wiki/Single_dispatch" title="Single dispatch" class="mw-redirect">single dispatch</a></i> (i.e., single-argument polymorphism), because virtual function calls are bound simply by looking through the vtable provided by the first argument (the <code>this</code> object), so the runtime types of the other arguments are completely irrelevant.</li>
</ul><p>The same goes for most other popular object systems. Some, however, such as <a href="http://en.m.wikipedia.org/wiki/CLOS" title="CLOS" class="mw-redirect">CLOS</a>, provide <i><a href="http://en.m.wikipedia.org/wiki/Multiple_dispatch" title="Multiple dispatch">multiple dispatch</a></i>, under which method calls are polymorphic in <i>all</i> arguments.</p>
<p>In the following example we make cats and dogs subtypes of animals. The procedure write accepts an animal, but will also work correctly if a subtype is passed to it:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="java source-java">
<pre class="de1">
<span class="kw1">abstract</span> <span class="kw1">class</span> Animal <span class="br0">{</span>
    <span class="kw3">String</span> talk<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw1">class</span> Cat <span class="kw1">extends</span> Animal <span class="br0">{</span>
    <span class="kw3">String</span> talk<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="st0">"Meow!"</span><span class="sy0">;</span> <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw1">class</span> Dog <span class="kw1">extends</span> Animal <span class="br0">{</span>
    <span class="kw3">String</span> talk<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> <span class="st0">"Woof!"</span><span class="sy0">;</span> <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="kw1">public</span> <span class="kw1">class</span> MyClass <span class="br0">{</span>
 
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> write<span class="br0">(</span>Animal a<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>a.<span class="me1">talk</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
 
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
        write<span class="br0">(</span><span class="kw1">new</span> Cat<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
        write<span class="br0">(</span><span class="kw1">new</span> Dog<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
 
<span class="br0">}</span>
</pre></div>
</div>
<h2> <span class="mw-headline" id="See_also">See also</span></h2>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming">Polymorphism in object-oriented programming</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Duck_typing" title="Duck typing">Duck typing</a> for polymorphism without (static) types</li>
<li><a href="http://en.m.wikipedia.org/wiki/Polymorphic_code" title="Polymorphic code">Polymorphic code</a> (Computer virus terminology)</li>
<li><a href="http://en.m.wikipedia.org/wiki/System_F" title="System F">System F</a> for a <a href="http://en.m.wikipedia.org/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a> with parametric polymorphism.</li>
<li><a href="http://en.m.wikipedia.org/wiki/Virtual_inheritance" title="Virtual inheritance">Virtual inheritance</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Type_class" title="Type class">Type class</a></li>
</ul><h2> <span class="mw-headline" id="References">References</span></h2>
<div class="reflist references-column-count references-column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2; list-style-type: decimal;">
<ol class="references"><li id="cite_note-gbooch-1"><span class="mw-cite-backlink"><b><a href="Type_polymorphism#cite_ref-gbooch_1-0">^</a></b></span> <span class="reference-text">Booch, et all 2007 <i>Object-Oriented Analysis and Design with Applications.</i> Addison-Wesley.</span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="Type_polymorphism#cite_ref-2">^</a></b></span> <span class="reference-text">C Strachey - <i>Fundamental Concepts in Programming Languages</i> <a rel="nofollow" class="external free" href="http://www.itu.dk/courses/BPRD/E2009/fundamental-1967.pdf">http://www.itu.dk/courses/BPRD/E2009/fundamental-1967.pdf</a></span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="Type_polymorphism#cite_ref-3">^</a></b></span> <span class="reference-text">C. Strachey, Fundamental concepts in programming languages. Lecture notes for International Summer School in Computer Programming, Copenhagen, August 1967</span></li>
<li id="cite_note-bjpierce-4"><span class="mw-cite-backlink"><b><a href="Type_polymorphism#cite_ref-bjpierce_4-0">^</a></b></span> <span class="reference-text">Pierce, B. C. 2002 <i>Types and Programming Languages.</i> MIT Press.</span></li>
</ol></div>
<h2> <span class="mw-headline" id="Further_reading">Further reading</span></h2>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Christopher_Strachey" title="Christopher Strachey">Christopher Strachey</a> (1967). <i><a href="http://en.m.wikipedia.org/wiki/Fundamental_Concepts_in_Programming_Languages" title="Fundamental Concepts in Programming Languages">Fundamental Concepts in Programming Languages</a></i>. - <a rel="nofollow" class="external free" href="http://www.itu.dk/courses/BPRD/E2009/fundamental-1967.pdf">http://www.itu.dk/courses/BPRD/E2009/fundamental-1967.pdf</a></li>
<li><span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/Luca_Cardelli" title="Luca Cardelli">Cardelli, Luca</a>; <a href="http://en.m.wikipedia.org/wiki/Peter_Wegner" title="Peter Wegner">Wegner, Peter</a> (December 1985). <a rel="nofollow" class="external text" href="http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf">"On Understanding Types, Data Abstraction, and Polymorphism"</a>. <i><a href="http://en.m.wikipedia.org/wiki/ACM_Computing_Surveys" title="ACM Computing Surveys">ACM Computing Surveys</a></i> (New York, NY, USA: <a href="Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a>) <b>17</b> (4): 471–523. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F6041.6042">10.1145/6041.6042</a>. <a href="http://en.m.wikipedia.org/wiki/International_Standard_Serial_Number" title="International Standard Serial Number">ISSN</a> <a rel="nofollow" class="external text" href="http://www.worldcat.org/issn/0360-0300">0360-0300</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf">http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=On+Understanding+Types%2C+Data+Abstraction%2C+and+Polymorphism&amp;rft.jtitle=%5B%5BACM+Computing+Surveys%5D%5D&amp;rft.aulast=Cardelli&amp;rft.aufirst=Luca&amp;rft.au=Cardelli%2C%26%2332%3BLuca&amp;rft.au=Wegner%2C%26%2332%3BPeter&amp;rft.date=December+1985&amp;rft.volume=17&amp;rft.issue=4&amp;rft.pages=471%26ndash%3B523&amp;rft.place=New+York%2C+NY%2C+USA&amp;rft.pub=%5B%5BAssociation+for+Computing+Machinery%7CACM%5D%5D&amp;rft_id=info:doi/10.1145%2F6041.6042&amp;rft.issn=0360-0300&amp;rft_id=http%3A%2F%2Flucacardelli.name%2FPapers%2FOnUnderstanding.A4.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Polymorphism_(computer_science)"><span style="display: none;"> </span></span></li>
<li>Philip Wadler, Stephen Blott. <i><a rel="nofollow" class="external text" href="http://homepages.inf.ed.ac.uk/wadler/topics/type-classes.html">How to make ad-hoc polymorphism less ad hoc</a>,</i> from Proc. 16th ACM Symposium on Principles of Programming Languages, (January, 1989)</li>
<li>Booch, et All. <i>Object-Oriented Analysis and Design with Application</i>.</li>
</ul><h2> <span class="mw-headline" id="External_links">External links</span></h2>
<ul><li><a rel="nofollow" class="external text" href="http://www.cplusplus.com/doc/tutorial/polymorphism/">C++ examples of polymorphism</a></li>
<li><a rel="nofollow" class="external text" href="http://wiki.visual-prolog.com/index.php?title=Objects_and_Polymorphism">Objects and Polymorphism (Visual Prolog)</a></li>
</ul><table cellspacing="0" class="navbox" style="border-spacing:0;;"><tr><td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;;"><tr><th scope="col" style=";" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul><li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Data_types" title="Template:Data types"><span title="View this template" style=";;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:Data_types" title="Template talk:Data types"><span title="Discuss this template" style=";;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Data_types&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;">e</span></a></li>
</ul></div>
<div class="" style="font-size:110%;"><a href="Data_type" title="Data type">Data types</a></div>
</th>
</tr><tr style="height:2px;"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;">Uninterpreted</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul><li><a href="Bit" title="Bit">Bit</a></li>
<li><a href="Byte" title="Byte">Byte</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Ternary_numeral_system" title="Ternary numeral system">Trit</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Ternary_numeral_system#Tryte" title="Ternary numeral system">Tryte</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Word_(computer_architecture)" title="Word (computer architecture)">Word</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;">Numeric</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Integer_(computer_science)" title="Integer (computer science)">Integer</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Signedness" title="Signedness">signedness</a></li>
</ul></li>
<li><a href="Fixed-point_arithmetic" title="Fixed-point arithmetic">Fixed-point</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Floating_point" title="Floating point">Floating-point</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Rational_data_type" title="Rational data type">Rational</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Complex_data_type" title="Complex data type">Complex</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Arbitrary-precision_arithmetic" title="Arbitrary-precision arithmetic">Bignum</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Interval_arithmetic" title="Interval arithmetic">Interval</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Decimal_data_type" title="Decimal data type">Decimal</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;"><a href="http://en.m.wikipedia.org/wiki/Plain_text" title="Plain text">Text</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Character_(computing)" title="Character (computing)">Character</a></li>
<li><a href="String_(computer_science)" title="String (computer science)">String</a>
<ul><li><a href="Null-terminated_string" title="Null-terminated string">null-terminated</a></li>
</ul></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;"><a href="Pointer_(computer_programming)" title="Pointer (computer programming)">Pointer</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Memory_address" title="Memory address">Address</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Physical_address" title="Physical address">physical</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Virtual_address_space" title="Virtual address space">virtual</a></li>
</ul></li>
<li><a href="Reference_(computer_science)" title="Reference (computer science)">Reference</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;"><a href="http://en.m.wikipedia.org/wiki/Composite_data_type" title="Composite data type">Composite</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Algebraic_data_type" title="Algebraic data type">Algebraic data type</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Generalized_algebraic_data_type" title="Generalized algebraic data type">generalized</a></li>
</ul></li>
<li><a href="Array_data_type" title="Array data type">Array</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Associative_array" title="Associative array">Associative array</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Class_(computer_programming)" title="Class (computer programming)">Class</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/List_(computing)" title="List (computing)" class="mw-redirect">List</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Object_(computer_science)" title="Object (computer science)">Object</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Metaobject" title="Metaobject">Metaobject</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Option_type" title="Option type">Option type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Product_type" title="Product type">Product</a></li>
<li><a href="Record_(computer_science)" title="Record (computer science)">Record</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Set_(computer_science)" title="Set (computer science)" class="mw-redirect">Set</a></li>
<li><a href="Union_(computer_science)" title="Union (computer science)">Union</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Tagged_union" title="Tagged union">tagged</a></li>
</ul></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;">Other</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Boolean_data_type" title="Boolean data type">Boolean</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bottom_type" title="Bottom type">Bottom type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Container_(data_structure)" title="Container (data structure)" class="mw-redirect">Collection</a></li>
<li><a href="Enumerated_type" title="Enumerated type">Enumerated type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Exception_handling" title="Exception handling">Exception</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Function_type" title="Function type">Function type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Opaque_data_type" title="Opaque data type">Opaque data type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Recursive_data_type" title="Recursive data type">Recursive data type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Semaphore_(programming)" title="Semaphore (programming)">Semaphore</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Stream_(computing)" title="Stream (computing)">Stream</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Top_type" title="Top type">Top type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Type_class" title="Type class">Type class</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Unit_type" title="Unit type">Unit type</a></li>
<li><a href="Void_type" title="Void type">Void</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;">Related topics</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul><li><a href="Type_system" title="Type system">Type system</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Abstract_data_type" title="Abstract data type">Abstract data type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Data_structure" title="Data structure">Data structure</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Protocol_(object-oriented_programming)" title="Protocol (object-oriented programming)">Protocol</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Interface_(computing)#Software_interfaces_in_object-oriented_languages" title="Interface (computing)">Interface</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Kind_(type_theory)" title="Kind (type theory)">Kind</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Metaclass" title="Metaclass">Metaclass</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Primitive_data_type" title="Primitive data type">Primitive data type</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Subtyping" title="Subtyping">Subtyping</a></li>
<li><a href="Generic_programming" title="Generic programming">Generic</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Type_constructor" title="Type constructor">Type constructor</a></li>
<li><a href="Type_conversion" title="Type conversion">Type conversion</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Parametric_polymorphism" title="Parametric polymorphism">Parametric polymorphism</a></li>
</ul></div>
</td>
</tr></table></td>
</tr></table>						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 23 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://be-x-old.m.wikipedia.org/wiki/%D0%9F%D0%B0%D0%BB%D1%96%D0%BC%D0%B0%D1%80%D1%84%D1%96%D0%B7%D0%BC" lang="be-x-old" hreflang="be-x-old">беларуская (тарашкевіца)‎</a></li><li><a href="http://bg.m.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D1%8A%D0%BC_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)" lang="bg" hreflang="bg">български</a></li><li><a href="http://bs.m.wikipedia.org/wiki/Polimorfizam_(informatika)" lang="bs" hreflang="bs">bosanski</a></li><li><a href="http://cs.m.wikipedia.org/wiki/Polymorfismus_(programov%C3%A1n%C3%AD)" lang="cs" hreflang="cs">česky</a></li><li><a href="http://de.m.wikipedia.org/wiki/Polymorphie_(Programmierung)" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://et.m.wikipedia.org/wiki/Pol%C3%BCmorfism_(informaatika)" lang="et" hreflang="et">eesti</a></li><li><a href="http://es.m.wikipedia.org/wiki/Polimorfismo_(inform%C3%A1tica)" lang="es" hreflang="es">español</a></li><li><a href="http://fr.m.wikipedia.org/wiki/Polymorphisme_(informatique)" lang="fr" hreflang="fr">français</a></li><li><a href="http://ko.m.wikipedia.org/wiki/%EB%8B%A4%ED%98%95%EC%84%B1" lang="ko" hreflang="ko">한국어</a></li><li><a href="http://hi.m.wikipedia.org/wiki/%E0%A4%AA%E0%A5%8B%E0%A4%B2%E0%A4%BF%E0%A4%AE%E0%A5%8B%E0%A4%B0%E0%A5%8D%E0%A4%AB%E0%A4%BC%E0%A4%BF%E0%A4%9C%E0%A5%8D%E0%A4%AE_(%E0%A4%95%E0%A4%82%E0%A4%AA%E0%A5%8D%E0%A4%AF%E0%A5%82%E0%A4%9F%E0%A4%B0_%E0%A4%B5%E0%A4%BF%E0%A4%9C%E0%A5%8D%E0%A4%9E%E0%A4%BE%E0%A4%A8)" lang="hi" hreflang="hi">हिन्दी</a></li><li><a href="http://hr.m.wikipedia.org/wiki/Polimorfizam_(ra%C4%8Dunarstvo)" lang="hr" hreflang="hr">hrvatski</a></li><li><a href="http://it.m.wikipedia.org/wiki/Polimorfismo_(informatica)" lang="it" hreflang="it">italiano</a></li><li><a href="http://he.m.wikipedia.org/wiki/%D7%A4%D7%95%D7%9C%D7%99%D7%9E%D7%95%D7%A8%D7%A4%D7%99%D7%96%D7%9D_(%D7%9E%D7%93%D7%A2%D7%99_%D7%94%D7%9E%D7%97%D7%A9%D7%91)" lang="he" hreflang="he">עברית</a></li><li><a href="http://lt.m.wikipedia.org/wiki/Polimorfizmas_(programavime)" lang="lt" hreflang="lt">lietuvių</a></li><li><a href="http://nl.m.wikipedia.org/wiki/Polymorfisme_(informatica)" lang="nl" hreflang="nl">Nederlands</a></li><li><a href="http://ja.m.wikipedia.org/wiki/%E3%83%9D%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%95%E3%82%A3%E3%82%BA%E3%83%A0" lang="ja" hreflang="ja">日本語</a></li><li><a href="http://pl.m.wikipedia.org/wiki/Polimorfizm_(informatyka)" lang="pl" hreflang="pl">polski</a></li><li><a href="http://pt.m.wikipedia.org/wiki/Polimorfismo" lang="pt" hreflang="pt">português</a></li><li><a href="http://ru.m.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%B8%D0%BC%D0%BE%D1%80%D1%84%D0%B8%D0%B7%D0%BC_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" lang="ru" hreflang="ru">русский</a></li><li><a href="http://sv.m.wikipedia.org/wiki/Polymorfism_(objektorienterad_programmering)" lang="sv" hreflang="sv">svenska</a></li><li><a href="http://ta.m.wikipedia.org/wiki/%E0%AE%AA%E0%AE%B2%E0%AF%8D%E0%AE%B2%E0%AF%81%E0%AE%B0%E0%AF%81%E0%AE%A4%E0%AF%8D%E0%AE%A4%E0%AF%8B%E0%AE%B1%E0%AF%8D%E0%AE%B1%E0%AE%AE%E0%AF%8D" lang="ta" hreflang="ta">தமிழ்</a></li><li><a href="http://te.m.wikipedia.org/wiki/%E0%B0%AA%E0%B0%BE%E0%B0%B2%E0%B1%80_%E0%B0%AE%E0%B0%BE%E0%B0%B0%E0%B1%8D%E0%B0%AB%E0%B0%BF%E0%B0%9C%E0%B0%82_(%E0%B0%AC%E0%B0%B9%E0%B1%81%E0%B0%B0%E0%B1%82%E0%B0%AA%E0%B0%A4)(%E0%B0%95%E0%B0%82%E0%B0%AA%E0%B1%8D%E0%B0%AF%E0%B1%82%E0%B0%9F%E0%B0%B0%E0%B1%8D_%E0%B0%B8%E0%B1%88%E0%B0%A8%E0%B1%8D%E0%B0%B8%E0%B1%81)" lang="te" hreflang="te">తెలుగు</a></li><li><a href="http://uk.m.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D1%96%D0%BC%D0%BE%D1%80%D1%84%D1%96%D0%B7%D0%BC_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F)" lang="uk" hreflang="uk">українська</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia ®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Type_polymorphism&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Type_polymorphism&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Polymorphism+%28computer+science%29&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>