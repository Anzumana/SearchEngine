<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>C++/CLI - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/C%2B%2B/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"C++\/CLI","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/C%2B%2B/CLI" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="../Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="../Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=C%2B%2B%2FCLI"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="../Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">C++/CLI</h1>			<p><b>C++/CLI</b> (<a href="http://en.m.wikipedia.org/wiki/Common_Language_Infrastructure" title="Common Language Infrastructure">Common Language Infrastructure</a>) is a language specification created by <a href="http://en.m.wikipedia.org/wiki/Microsoft" title="Microsoft">Microsoft</a> and intended to supersede <a href="http://en.m.wikipedia.org/wiki/Managed_Extensions_for_C%2B%2B" title="Managed Extensions for C++">Managed Extensions for C++</a>. It is a complete revision that aims to simplify the older Managed C++ syntax, which is now deprecated. C++/CLI was standardized by <a href="http://en.m.wikipedia.org/wiki/Ecma_International" title="Ecma International">Ecma</a> as <b>ECMA-372</b>. It is currently available only in <a href="http://en.m.wikipedia.org/wiki/Visual_Studio" title="Visual Studio" class="mw-redirect">Visual Studio</a> 2005, 2008, 2010 and 2012, including the Express editions.</p>
<h2> <span class="mw-headline" id="Syntax_changes">Syntax changes</span></h2>
<p>C++/CLI should be thought of as a language of its own (with a new set of keywords, for example), instead of the C++ superset-oriented <a href="http://en.m.wikipedia.org/wiki/Managed_Extensions_for_C%2B%2B" title="Managed Extensions for C++">Managed C++</a> (MC++) (whose non-standard keywords were styled like <span class="mw-geshi cpp source-cpp">__gc</span> or<span class="mw-geshi cpp source-cpp">Â __value</span>). Because of this, there are some major syntactic changes, especially related to the elimination of ambiguous identifiers and the addition of .NET-specific features.</p>
<p>Many conflicting syntaxes, such as the multiple versions of operator <span class="mw-geshi cpp source-cpp"><span class="kw3">new</span><span class="br0">(</span><span class="br0">)</span></span> in MC++ have been split: in C++/CLI, .NET reference types are created with the new keyword <span class="mw-geshi cpp source-cpp">gcnew</span>. Also, C++/CLI has introduced the concept of generics (conceptually similar to standard C++ templates, but quite different in their implementation).</p>
<h3> <span class="mw-headline" id="Handles">Handles</span></h3>
<p>In MC++, there were two different types of <a href="../Pointer_(computer_programming)" title="Pointer (computer programming)">pointers</a>: <span class="mw-geshi cpp source-cpp">__nogc</span> pointers were normal C++ pointers, while <span class="mw-geshi cpp source-cpp">__gc</span> pointers worked on .NET reference types. In C++/CLI the only type of pointer is the normal C++ pointer, and the .NET reference types are accessed through a "handle", with the new syntax <span class="mw-geshi cpp source-cpp">ClassName<span class="sy3">^</span></span> instead of <span class="mw-geshi cpp source-cpp">ClassName<span class="sy2">*</span></span>. This new construct is especially helpful when managed and standard C++ code is mixed; it clarifies which objects are under .NET automatic garbage collection and which objects the programmer must remember to explicitly destroy.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co1">// Managed extensions for C++</span>
<span class="co2">#using &lt;mscorlib.dll&gt;</span>
<span class="kw2">using</span> <span class="kw2">namespace</span> System<span class="sy4">::</span><span class="me2">Collections</span><span class="sy4">;</span>
__gc <span class="kw2">class</span> referencetype
<span class="br0">{</span>
<span class="kw2">protected</span><span class="sy4">:</span>
    String <span class="sy2">*</span>stringVar<span class="sy4">;</span>
    <span class="kw4">int</span> intArr __gc<span class="br0">[</span><span class="br0">]</span><span class="sy4">;</span>
    ArrayList <span class="sy2">*</span>doubleList<span class="sy4">;</span>
<span class="kw2">public</span><span class="sy4">:</span>
    referencetype<span class="br0">(</span>String <span class="sy2">*</span>str, <span class="kw4">int</span> <span class="sy2">*</span>pointer, <span class="kw4">int</span> number<span class="br0">)</span> <span class="co1">// Which one is managed?</span>
    <span class="br0">{</span>
        doubleList <span class="sy1">=</span> <span class="kw3">new</span> ArrayList<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
        System<span class="sy4">::</span><span class="me2">Console</span><span class="sy4">::</span><span class="me2">WriteLine</span><span class="br0">(</span>str<span class="sy2">-</span><span class="sy1">&gt;</span>Trim<span class="br0">(</span><span class="br0">)</span> <span class="sy2">+</span> number.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="sy4">;</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co1">// C++/CLI</span>
<span class="co2">#using &lt;mscorlib.dll&gt;</span>
<span class="kw2">using</span> <span class="kw2">namespace</span> System<span class="sy4">::</span><span class="me2">Collections</span><span class="sy4">::</span><span class="me2">Generic</span><span class="sy4">;</span>
ref <span class="kw2">class</span> referencetype
<span class="br0">{</span>
<span class="kw2">protected</span><span class="sy4">:</span>
    String <span class="sy3">^</span>stringVar<span class="sy4">;</span>
    array<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> <span class="sy3">^</span>intArr<span class="sy4">;</span>
    List<span class="sy1">&lt;</span><span class="kw4">double</span><span class="sy1">&gt;</span> <span class="sy3">^</span>doubleList<span class="sy4">;</span>
<span class="kw2">public</span><span class="sy4">:</span>
    referencetype<span class="br0">(</span>String <span class="sy3">^</span>str, <span class="kw4">int</span> <span class="sy2">*</span>pointer, <span class="kw4">int</span> number<span class="br0">)</span> <span class="co1">// Ambiguous no more</span>
    <span class="br0">{</span>
        doubleList <span class="sy1">=</span> gcnew List<span class="sy1">&lt;</span><span class="kw4">double</span><span class="sy1">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
        System<span class="sy4">::</span><span class="me2">Console</span><span class="sy4">::</span><span class="me2">WriteLine</span><span class="br0">(</span>str<span class="sy2">-</span><span class="sy1">&gt;</span>Trim<span class="br0">(</span><span class="br0">)</span> <span class="sy2">+</span> number<span class="br0">)</span><span class="sy4">;</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="sy4">;</span>
</pre></div>
</div>
<h3> <span class="mw-headline" id="Tracking_references">Tracking references</span></h3>
<p>A <b>tracking reference</b> in C++/CLI is a handle of a passed-by-reference variable. It corresponds to the "<span class="mw-geshi cpp source-cpp">ref</span>" keyword applied to types in C#, or "<span class="mw-geshi cpp source-cpp">ByRef</span>" in <a href="http://en.m.wikipedia.org/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a>. C++/CLI uses a "<span class="mw-geshi cpp source-cpp"><span class="sy3">^</span><span class="sy2">%</span></span>" syntax to indicate a tracking reference to a handle. It is similar in concept to using "<span class="mw-geshi cpp source-cpp"><span class="sy2">*</span><span class="sy3">&amp;</span></span>" (reference to a pointer) in Standard C++.</p>
<p>The following code shows an example of the use of tracking references. Replacing the tracking reference with a regular handle variable would leave the resulting string array with 10 uninitialized string handles, as only copies of the string handles in the array would be set, due to their being passed by value rather than by reference.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    array<span class="sy1">&lt;</span>String<span class="sy3">^</span><span class="sy1">&gt;</span> <span class="sy3">^</span>arr <span class="sy1">=</span> gcnew array<span class="sy1">&lt;</span>String<span class="sy3">^</span><span class="sy1">&gt;</span><span class="br0">(</span><span class="nu0">10</span><span class="br0">)</span><span class="sy4">;</span>
    <span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
 
    <span class="kw1">for</span> each<span class="br0">(</span>String<span class="sy3">^</span><span class="sy2">%</span> s in arr<span class="br0">)</span>
        s <span class="sy1">=</span> i<span class="sy2">++</span>.<span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
 
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>Note that this would be illegal in C#, which does not allow <span class="mw-geshi cpp source-cpp">foreach</span> loops to pass values by reference. Hence, a workaround would be required.</p>
<h3> <span class="mw-headline" id="Finalizers_and_automatic_variables">Finalizers and automatic variables</span></h3>
<p>Another change in C++/CLI is the introduction of the <a href="http://en.m.wikipedia.org/wiki/Finalizer" title="Finalizer">finalizer</a> syntax <span class="mw-geshi cpp source-cpp"><span class="sy3">!</span>ClassName<span class="br0">(</span><span class="br0">)</span></span>, a special type of nondeterministic destructor that is run as a part of the <a href="../Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection routine</a>, so now the destructor syntax <span class="mw-geshi cpp source-cpp">~ClassName<span class="br0">(</span><span class="br0">)</span></span> better reflects the "traditional" C++ semantics of deterministic destruction (that is, destructors that can be called by user code). Moreover, the destruction of all managed objects with a defined destructor in a method can be made automatic with the new syntax shown in the example.</p>
<p>In the raw .NET paradigm (for example, direct programming in <a href="http://en.m.wikipedia.org/wiki/Common_Intermediate_Language" title="Common Intermediate Language">CIL</a>), the deterministic destruction model is implemented through the <span class="mw-geshi cpp source-cpp">IDisposable</span> <a href="http://en.m.wikipedia.org/wiki/Interface_(computer_science)" title="Interface (computer science)" class="mw-redirect">interface</a> method <span class="mw-geshi cpp source-cpp">Dispose</span> (which the C++/CLI compiler turns the destructor into), while the nondeterministic one overrides the protected <span class="mw-geshi cpp source-cpp">Finalize</span> method of the root <span class="mw-geshi cpp source-cpp">Object</span> class.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co1">// C++/CLI</span>
ref <span class="kw2">class</span> MyClass <span class="co1">// : IDisposable (this is added by the compiler)</span>
<span class="br0">{</span>
<span class="kw2">public</span><span class="sy4">:</span>
    MyClass<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>  <span class="co1">// constructor</span>
    ~MyClass<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// (deterministic) destructor (turned into IDisposable.Dispose() by the compiler)</span>
<span class="kw2">protected</span><span class="sy4">:</span>
    <span class="sy3">!</span>MyClass<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// finalizer (non-deterministic destructor) (former destructor syntax =&gt; virtual void Finalize())</span>
 
<span class="kw2">public</span><span class="sy4">:</span>
    <span class="kw4">static</span> <span class="kw4">void</span> Test<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        MyClass automatic<span class="sy4">;</span> <span class="co1">// Not a handle, no initialization: compiler calls constructor here</span>
        <span class="co1">// Use 'automatic' anywhere in the method</span>
 
        <span class="co1">// Equivalent user code:</span>
 
        MyClass <span class="sy3">^</span>user <span class="sy1">=</span> gcnew MyClass<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
        <span class="kw2">try</span> <span class="br0">{</span> <span class="coMULTI">/* Use user here */</span> <span class="br0">}</span> finally <span class="br0">{</span> <span class="kw3">delete</span> user<span class="sy4">;</span> <span class="br0">}</span>
 
        <span class="co1">// Compiler calls automatic's destructor in the finally of a try containing the whole method</span>
    <span class="br0">}</span>
<span class="br0">}</span><span class="sy4">;</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="csharp source-csharp">
<pre class="de1">
<span class="co1">// C#</span>
<span class="kw4">class</span> MyClass <span class="sy0">:</span> IDisposable
<span class="br0">{</span>
    <span class="kw1">public</span> MyClass<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span> <span class="co1">// constructor</span>
    <span class="kw1">public</span> <span class="kw4">void</span> Dispose<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span> <span class="co1">// Dispose method (C++/CLI deterministic destructor)</span>
    ~MyClass<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><span class="br0">}</span> <span class="co1">// destructor (non-deterministic) (C++/CLI finalizer =&gt; protected override void Finalize())</span>
 
    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Test<span class="br0">(</span><span class="br0">)</span>
    <span class="br0">{</span>
        <span class="kw1">using</span><span class="br0">(</span>MyClass automatic <span class="sy0">=</span> <span class="kw3">new</span> MyClass<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span> <span class="coMULTI">/* Use automatic here */</span> <span class="br0">}</span>
        <span class="co1">// Compiler calls automatic.Dispose(), in the finally of a try containing the using block</span>
 
        <span class="co1">// Equivalent user code:</span>
 
        MyClass user <span class="sy0">=</span> <span class="kw3">new</span> MyClass<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw1">try</span> <span class="br0">{</span> <span class="coMULTI">/* Use user here */</span> <span class="br0">}</span> <span class="kw1">finally</span> <span class="br0">{</span> user<span class="sy0">.</span><span class="me1">Dispose</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
</div>
<h2> <span class="mw-headline" id="Operator_overloading">Operator overloading</span></h2>
<p>Operator overloading works analogously to standard C++. Every * becomes a ^, every &amp; becomes anÂ %, but the rest of the syntax is unchanged, except for an important addition: Operator overloading is possible not only for classes themselves, but also for references to those classes. This feature is necessary to give a ref class the semantics for operator overloading expected from .NET ref classes. In reverse, this also means that for .Net framework ref classes, reference operator overloading often is implicitly implemented in C++/CLI.</p>
<p>This means that comparing, e.g., two distinct String references via the operator == will give true whenever the two strings are equal. The operator overloading is static. Thus, casting to Object ^ will remove the overloading semantics.</p>
<p>The standard C++ semantics would be to only overload by object for native and value types, and to overload only by reference (^) for ref classes. Of course, in C++-only projects, it may be reasonable to decide against overloading by reference, and stick to standard C++ operator overloading semantics also for ref classes, which, as experience tells<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from November 2007">citation needed</span></a></i>]</sup>, will often enough be used with on-the-stack semantics and implemented with a copy constructor and assignment operator.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co1">//effects of reference operator overloading</span>
String <span class="sy3">^</span>s1 <span class="sy1">=</span> <span class="st0">"abc"</span><span class="sy4">;</span>
String <span class="sy3">^</span>s2 <span class="sy1">=</span> <span class="st0">"ab"</span> <span class="sy2">+</span> <span class="st0">"c"</span><span class="sy4">;</span>
Object <span class="sy3">^</span>o1 <span class="sy1">=</span> s1<span class="sy4">;</span>
Object <span class="sy3">^</span>o2 <span class="sy1">=</span> s2<span class="sy4">;</span>
s1 <span class="sy1">==</span> s2<span class="sy4">;</span> <span class="co1">// true</span>
o1 <span class="sy1">==</span> o2<span class="sy4">;</span> <span class="co1">// false</span>
</pre></div>
</div>
<h2> <span class="mw-headline" id="Template_syntax">Template syntax</span></h2>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
 <span class="co1">// a template ref class with operator overloading, copy constructor and assignment operator</span>
 <span class="kw2">template</span> <span class="sy1">&lt;</span><span class="kw2">typename</span> T<span class="sy1">&gt;</span>
 <span class="kw2">public</span> ref <span class="kw2">class</span> ptr_wrapper sealed
 <span class="br0">{</span>
 <span class="kw2">private</span><span class="sy4">:</span>
        T <span class="sy2">*</span>m_ptr<span class="sy4">;</span>
        ptr_wrapper<span class="br0">(</span>T <span class="sy2">*</span>i_ptr<span class="br0">)</span>
        <span class="sy4">:</span>m_ptr<span class="br0">(</span>i_ptr<span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw1">if</span> <span class="br0">(</span>i_ptr <span class="sy1">==</span> <span class="nu0">0</span><span class="br0">)</span>
                <span class="br0">{</span>
                        <span class="kw1">throw</span> gcnew System<span class="sy4">::</span><span class="me2">Exception</span><span class="br0">(</span><span class="st0">"Trying to initialize ptr_wrapper with null pointer"</span><span class="br0">)</span><span class="sy4">;</span>
                <span class="br0">}</span>
        <span class="br0">}</span>
 <span class="kw2">public</span><span class="sy4">:</span>
        ptr_wrapper<span class="br0">(</span><span class="kw4">const</span> T <span class="sy3">&amp;</span>i_ref<span class="br0">)</span>
                <span class="sy4">:</span>m_ptr<span class="br0">(</span><span class="kw3">new</span> T<span class="br0">(</span>i_ref<span class="br0">)</span><span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
        ptr_wrapper<span class="br0">(</span><span class="kw4">const</span> ptr_wrapper <span class="sy2">%</span>i_other<span class="br0">)</span>
                <span class="sy4">:</span>m_ptr<span class="br0">(</span><span class="kw3">new</span> T<span class="br0">(</span><span class="kw2">const_cast</span><span class="sy1">&lt;</span><span class="kw4">const</span> T<span class="sy3">&amp;</span><span class="sy1">&gt;</span><span class="br0">(</span><span class="sy2">*</span>i_other<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
        <span class="br0">{</span>
        <span class="br0">}</span>
        <span class="kw4">static</span> ptr_wrapper take<span class="br0">(</span>T <span class="sy2">*</span>i_ptr<span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw1">return</span> ptr_wrapper<span class="br0">(</span>i_ptr<span class="br0">)</span><span class="sy4">;</span>
        <span class="br0">}</span>
        ~ptr_wrapper<span class="br0">(</span><span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw3">delete</span> m_ptr<span class="sy4">;</span>
        <span class="br0">}</span>
        ptr_wrapper <span class="sy2">%</span> operator <span class="sy1">=</span> <span class="br0">(</span><span class="kw4">const</span> ptr_wrapper <span class="sy2">%</span>other<span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw1">if</span> <span class="br0">(</span>other.<span class="me1">m_ptr</span> <span class="sy3">!</span><span class="sy1">=</span> m_ptr<span class="br0">)</span>
                <span class="br0">{</span>
                        T<span class="sy2">*</span> new_ptr <span class="sy1">=</span> <span class="kw3">new</span> T<span class="br0">(</span><span class="sy2">*</span>other<span class="br0">)</span><span class="sy4">;</span>
                        <span class="kw3">delete</span> m_ptr<span class="sy4">;</span>
                        m_ptr <span class="sy1">=</span> new_ptr<span class="sy4">;</span>
                <span class="br0">}</span>
        <span class="br0">}</span>
        <span class="kw4">static</span> T<span class="sy3">&amp;</span> operator <span class="sy2">*</span> <span class="br0">(</span>ptr_wrapper<span class="sy1">&lt;</span>T<span class="sy1">&gt;</span> <span class="sy2">%</span>inst<span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw1">return</span> <span class="sy2">*</span><span class="br0">(</span>inst.<span class="me1">m_ptr</span><span class="br0">)</span><span class="sy4">;</span>
        <span class="br0">}</span>
        <span class="kw4">static</span> <span class="kw4">const</span> T<span class="sy3">&amp;</span> operator <span class="sy2">*</span> <span class="br0">(</span><span class="kw4">const</span> ptr_wrapper <span class="sy2">%</span>inst<span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw1">return</span> <span class="sy2">*</span><span class="br0">(</span>inst.<span class="me1">m_ptr</span><span class="br0">)</span><span class="sy4">;</span>
        <span class="br0">}</span>
        <span class="kw4">static</span> T<span class="sy2">*</span> operator <span class="sy2">-</span><span class="sy1">&gt;</span> <span class="br0">(</span>ptr_wrapper <span class="sy2">%</span>inst<span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw1">return</span> inst.<span class="me1">m_ptr</span><span class="sy4">;</span>
        <span class="br0">}</span>
        <span class="kw4">static</span> <span class="kw4">const</span> T<span class="sy2">*</span> operator <span class="sy2">-</span><span class="sy1">&gt;</span> <span class="br0">(</span><span class="kw4">const</span> ptr_wrapper<span class="sy1">&lt;</span>T<span class="sy1">&gt;</span> <span class="sy2">%</span>inst<span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw1">return</span> inst.<span class="me1">m_ptr</span><span class="sy4">;</span>
        <span class="br0">}</span>
        <span class="kw4">static</span> operation_start <span class="sy2">-</span><span class="sy1">&gt;</span> <span class="br0">(</span>ptr_wrapper<span class="sy1">&lt;</span>T<span class="sy1">&gt;</span> <span class="sy2">%</span>inst<span class="br0">)</span>
        <span class="br0">{</span>
                <span class="kw1">return</span> inst.<span class="me1">m_ptr</span><span class="sy4">;</span>
        <span class="br0">}</span>
        <span class="kw4">static</span> cont. <span class="me1">null_return</span> pointer <span class="sy2">-</span><span class="sy1">&gt;</span> <span class="br0">(</span>ptr_wrapper <span class="sy2">%</span>inst<span class="br0">)</span>
        <span class="br0">{</span>
                 <span class="kw1">return</span> inst.<span class="me1">m_ptr</span> pointer_reload 
        <span class="br0">}</span>
        <span class="kw4">static</span> operation_end <span class="sy2">-</span><span class="sy1">&gt;</span> <span class="br0">(</span>ptr_wrapper <span class="sy2">%</span>inst<span class="br0">)</span>
        <span class="br0">{</span>
                 return_program end<span class="sy1">&lt;</span>subject<span class="sy1">&gt;</span> inst.<span class="me1">m_ptr</span>
        <span class="br0">}</span>
        <span class="kw4">static</span> operation_final pointer end <span class="sy1">&lt;</span>subject<span class="sy1">&gt;</span> <span class="sy2">%</span>inst end <span class="sy1">&lt;</span>subject<span class="sy1">&gt;</span>
 
<span class="br0">}</span><span class="sy4">;</span>
</pre></div>
</div>
<h2> <span class="mw-headline" id="C.2B.2B.2FCX">C++/CX</span></h2>
<p>The new <a href="CX" title="C++/CX">C++/CX</a> targeting <a href="http://en.m.wikipedia.org/wiki/WinRT" title="WinRT" class="mw-redirect">WinRT</a>, although it produces entirely unmanaged code, borrows the ref and ^ syntax for the reference-counted components that WinRT, which are similar to <a href="http://en.m.wikipedia.org/wiki/Component_Object_Model" title="Component Object Model">COM</a> "objects".<sup id="cite_ref-1" class="reference"><a href="CLI#cite_note-1"><span>[</span>1<span>]</span></a></sup></p>
<h2> <span class="mw-headline" id="References">References</span></h2>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references"><li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="CLI#cite_ref-1">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://blogs.msdn.com/b/vcblog/archive/2011/10/20/10228473.aspx">http://blogs.msdn.com/b/vcblog/archive/2011/10/20/10228473.aspx</a></span></li>
</ol></div>
<h2> <span class="mw-headline" id="External_links">External links</span></h2>
<ul><li><a rel="nofollow" class="external text" href="http://www.stroustrup.com/bs_faq.html#CppCLI">Bjarne Stroustrup's (designer/author of C++) views on C++/CLI</a></li>
<li><a rel="nofollow" class="external text" href="http://www.ecma-international.org/publications/standards/Ecma-372.htm">ECMA 372: C++/CLI Language Specification</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Herb_Sutter" title="Herb Sutter">Herb Sutter</a>: <a rel="nofollow" class="external text" href="http://blogs.msdn.com/hsutter/archive/2003/11/23/53519.aspx">C++/CLI keywords: Under the hood</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Herb_Sutter" title="Herb Sutter">Herb Sutter</a>: <a rel="nofollow" class="external text" href="http://www.gotw.ca/publications/C++CLIRationale.pdf">C++/CLI Rationale</a></li>
<li><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/xey702bw.aspx">MSDN documentation for C++/CLI</a></li>
<li><a rel="nofollow" class="external text" href="http://appft1.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&amp;Sect2=HITOFF&amp;d=PG01&amp;p=1&amp;u=%2Fnetahtml%2FPTO%2Fsrchnum.html&amp;r=1&amp;f=G&amp;l=50&amp;s1=%2220060089942%22.PGNR.&amp;OS=DN/20060089942&amp;RS=DN/20060089942">Patent application regarding whitespace in keywords</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Stanley_B._Lippman" title="Stanley B. Lippman">Stanley B. Lippman</a>: <a rel="nofollow" class="external text" href="http://msdn.microsoft.com/msdnmag/issues/06/00/PureC/default.aspx">Hello, C++/CLI</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Stanley_B._Lippman" title="Stanley B. Lippman">Stanley B. Lippman</a>: <a rel="nofollow" class="external text" href="http://blogs.msdn.com/slippman/archive/2004/08/05/209606.aspx">Why C++/CLI Supports both Templates for CLI Types and the CLI Generic Mechanism</a></li>
</ul><table cellspacing="0" class="navbox" style="border-spacing:0;;"><tr><td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;;"><tr><th scope="col" style=";" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul><li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:.NET" title="Template:.NET"><span title="View this template" style=";;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="http://en.m.wikipedia.org/wiki/Template_talk:.NET" title="Template talk:.NET"><span title="Discuss this template" style=";;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:.NET&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;">e</span></a></li>
</ul></div>
<div class="" style="font-size:110%;"><a href="http://en.m.wikipedia.org/wiki/.NET_Framework" title=".NET Framework">.NET Framework</a></div>
</th>
</tr><tr style="height:2px;"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;"><a href="http://en.m.wikipedia.org/wiki/Software_architecture" title="Software architecture">Architecture</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Base_Class_Library" title="Base Class Library">Base Class Library</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Common_Language_Runtime" title="Common Language Runtime">Common Language Runtime</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Code_Access_Security" title="Code Access Security">Code Access Security</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Assembly_(CLI)" title="Assembly (CLI)">Assembly</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Manifest_(CLI)" title="Manifest (CLI)">Manifest</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Metadata_(CLI)" title="Metadata (CLI)">Metadata</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/COM_Interop" title="COM Interop">COM Interop</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;line-height:1.1em;"><a href="http://en.m.wikipedia.org/wiki/Common_Language_Infrastructure" title="Common Language Infrastructure">Common Language<br>
Infrastructure (CLI)</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Common_Language_Infrastructure" title="Common Language Infrastructure">Common Language Infrastructure</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Common_Type_System" title="Common Type System">Common Type System</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Common_Intermediate_Language" title="Common Intermediate Language">Common Intermediate Language</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Virtual_Execution_System" title="Virtual Execution System">Virtual Execution System</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;"><a href="http://en.m.wikipedia.org/wiki/List_of_CLI_languages" title="List of CLI languages">CLI Languages</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em"></div>
<table cellspacing="0" class="nowraplinks navbox-subgroup" style="border-spacing:0;;;;"><tr><th scope="row" class="navbox-group" style=";padding-left:0em;padding-right:0em;padding:0.25em 0; font-weight:normal;;">
<div style="padding:0em 0.75em;">Common<sup><small>1</small></sup></div>
</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul><li><a href="../C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a></li>
<li><strong class="selflink">C++/CLI</strong>
<ul><li><a href="http://en.m.wikipedia.org/wiki/Managed_Extensions_for_C%2B%2B" title="Managed Extensions for C++">Managed</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/J_Sharp" title="J Sharp">J#</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/JScript_.NET" title="JScript .NET">JScript .NET</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Windows_PowerShell" title="Windows PowerShell">Windows PowerShell</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";padding-left:0em;padding-right:0em;padding:0.25em 0; font-weight:normal;;">
<div style="padding:0em 0.75em;">Other<sup><small>2</small></sup></div>
</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Axum_(programming_language)" title="Axum (programming language)">Axum</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/A_Sharp_(.NET)" title="A Sharp (.NET)">A#</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Boo_(programming_language)" title="Boo (programming language)">Boo</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Cobra_(programming_language)" title="Cobra (programming language)">Cobra</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/M_(programming_language)" title="M (programming language)">M</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Oxygene_(programming_language)" title="Oxygene (programming language)">Oxygene</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/IronScheme" title="IronScheme">IronScheme</a> (<a href="http://en.m.wikipedia.org/wiki/IronLisp" title="IronLisp">IronLisp</a>)</li>
<li><a href="http://en.m.wikipedia.org/wiki/IronPython" title="IronPython">IronPython</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/IronRuby" title="IronRuby">IronRuby</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Nemerle" title="Nemerle">Nemerle</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Phalanger_(compiler)" title="Phalanger (compiler)">Phalanger</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/P_Sharp" title="P Sharp">P#</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a></li>
</ul></div>
</td>
</tr></table></td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;"><a href="http://en.m.wikipedia.org/wiki/Component-based_software_engineering" title="Component-based software engineering">Components</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/ADO.NET" title="ADO.NET">ADO.NET</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/ADO.NET_Entity_Framework" title="ADO.NET Entity Framework">Entity Framework</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/WCF_Data_Services" title="WCF Data Services">Data Services</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/ASP.NET" title="ASP.NET">ASP.NET</a>
<ul><li><a href="http://en.m.wikipedia.org/wiki/ASP.NET_AJAX" title="ASP.NET AJAX">AJAX</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/ASP.NET_MVC_Framework" title="ASP.NET MVC Framework">MVC</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/ASP.NET_Dynamic_Data" title="ASP.NET Dynamic Data">Dynamic Data</a></li>
</ul></li>
<li><a href="http://en.m.wikipedia.org/wiki/Windows_CardSpace" title="Windows CardSpace">CardSpace</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/ClickOnce" title="ClickOnce">ClickOnce</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/CLR_Profiler" title="CLR Profiler">CLR Profiler</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Windows_Communication_Foundation" title="Windows Communication Foundation">Communication Foundation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Dynamic_Language_Runtime" title="Dynamic Language Runtime">Dynamic Language Runtime</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Windows_Forms" title="Windows Forms">Forms</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Language_Integrated_Query" title="Language Integrated Query">LINQ</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Managed_Extensibility_Framework" title="Managed Extensibility Framework">Managed Extensibility Framework</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Parallel_Extensions" title="Parallel Extensions">Parallel Extensions</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Windows_Presentation_Foundation" title="Windows Presentation Foundation">Presentation Foundation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/.NET_Remoting" title=".NET Remoting">Remoting</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Microsoft_codename_%22Roslyn%22" title='Microsoft codename "Roslyn"' class="mw-redirect">"Roslyn"</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Windows_Workflow_Foundation" title="Windows Workflow Foundation">Workflow Foundation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Extensible_Application_Markup_Language" title="Extensible Application Markup Language">XAML</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;">Other implementations</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Mono_(software)" title="Mono (software)">Mono</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/.NET_Compact_Framework" title=".NET Compact Framework">Compact Framework</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Microsoft_XNA" title="Microsoft XNA">XNA Framework</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/.NET_Micro_Framework" title=".NET Micro Framework">Micro Framework</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Portable.NET" title="Portable.NET">Portable.NET</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Microsoft_Silverlight" title="Microsoft Silverlight">Silverlight</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Shared_Source_Common_Language_Infrastructure" title="Shared Source Common Language Infrastructure">SSCLI</a></li>
</ul></div>
</td>
</tr><tr style="height:2px"><td></td>
</tr><tr><th scope="row" class="navbox-group" style=";;">Comparisons</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even hlist">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java" title="Comparison of C Sharp and Java">Java and C#</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Visual_Basic_.NET" title="Comparison of C Sharp and Visual Basic .NET">C# and Visual Basic .NET</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Comparison_of_the_Java_and_.NET_platforms" title="Comparison of the Java and .NET platforms">Java and .NET platforms</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Comparison_of_Visual_Basic_and_Visual_Basic_.NET" title="Comparison of Visual Basic and Visual Basic .NET">Visual Basic and Visual Basic .NET</a></li>
</ul></div>
</td>
</tr><tr style="height:2px;"><td></td>
</tr><tr><td class="navbox-abovebelow plainlist" style=";padding:0.4em 0.2em 0.2em; line-height:1.2em;" colspan="2">
<div>
<ul><li><sup><small>1</small></sup> Languages that had been supported, are supported, or will be supported, in <a href="../Microsoft_Visual_Studio" title="Microsoft Visual Studio">Visual Studio</a> or <a href="http://en.m.wikipedia.org/wiki/.NET_Framework" title=".NET Framework">.NET Framework</a>.</li>
<li><sup><small>2</small></sup> Non-academic or research languages with relatively large user-bases.</li>
</ul></div>
</td>
</tr></table></td>
</tr></table><table cellspacing="0" class="navbox" style="border-spacing:0;;"><tr><td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;;"><tr><th scope="col" style=";" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul><li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Ecma_International_Standards" title="Template:Ecma International Standards"><span title="View this template" style=";;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><span class="new" title="Template talk:Ecma International Standards (page does not exist)">t</span></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Ecma_International_Standards&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;">e</span></a></li>
</ul></div>
<div class="" style="font-size:110%;">Standards of <a href="http://en.m.wikipedia.org/wiki/Ecma_International" title="Ecma International">Ecma International</a></div>
</th>
</tr><tr style="height:2px;"><td></td>
</tr><tr><td colspan="2" style="width:100%;padding:0px;;;" class="navbox-list navbox-odd hlist">
<div style="padding:0em 0.25em">
<ul><li><a href="http://en.m.wikipedia.org/wiki/Advanced_Intelligent_Tape" title="Advanced Intelligent Tape">AIT</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/ANSI_escape_code" title="ANSI escape code">ANSI escape code</a></li>
<li><strong class="selflink">C++/CLI</strong></li>
<li><a href="../C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Yellow_Book_(CD_standard)" title="Yellow Book (CD standard)">CD-ROM</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/ISO_9660" title="ISO 9660">CDFS</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Common_Language_Infrastructure" title="Common Language Infrastructure">CLI</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Digital_Data_Storage" title="Digital Data Storage">DDS</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Digital_Linear_Tape" title="Digital Linear Tape">DLT</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/ECMAScript_for_XML" title="ECMAScript for XML">E4X</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/ECMAScript" title="ECMAScript">ECMAScript</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/File_Allocation_Table" title="File Allocation Table">FAT</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Floppy_disk" title="Floppy disk">FD</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Holographic_Versatile_Disc" title="Holographic Versatile Disc">HVD</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Near_Field_Communication" title="Near Field Communication" class="mw-redirect">NFC</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Office_Open_XML" title="Office Open XML">Office Open XML</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Open_XML_Paper_Specification" title="Open XML Paper Specification">OpenXPS</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Digital_Linear_Tape" title="Digital Linear Tape">Super DLT</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Universal_3D" title="Universal 3D">U3D</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Universal_Disk_Format" title="Universal Disk Format">UDF</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Ultra_Density_Optical" title="Ultra Density Optical">UDO</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Linear_Tape-Open" title="Linear Tape-Open">Ultrium-1</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Universal_Media_Disc" title="Universal Media Disc">UMD</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Ultra-wideband" title="Ultra-wideband">UWB</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/VXA" title="VXA">VXA</a></li>
</ul></div>
</td>
</tr><tr style="height:2px;"><td></td>
</tr><tr><td class="navbox-abovebelow" style=";" colspan="2">
<div><a href="http://en.m.wikipedia.org/wiki/List_of_Ecma_standards" title="List of Ecma standards">List of Ecma standards</a></div>
</td>
</tr></table></td>
</tr></table>						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 8 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://de.m.wikipedia.org/wiki/C%2B%2B/CLI" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://ko.m.wikipedia.org/wiki/C%2B%2B/CLI" lang="ko" hreflang="ko">íêµ­ì´</a></li><li><a href="http://ja.m.wikipedia.org/wiki/C%2B%2B/CLI" lang="ja" hreflang="ja">æ¥æ¬èª</a></li><li><a href="http://pl.m.wikipedia.org/wiki/C%2B%2B/CLI" lang="pl" hreflang="pl">polski</a></li><li><a href="http://pt.m.wikipedia.org/wiki/C%2B%2B/CLI" lang="pt" hreflang="pt">portuguÃªs</a></li><li><a href="http://ru.m.wikipedia.org/wiki/C%2B%2B/CLI" lang="ru" hreflang="ru">ÑÑÑÑÐºÐ¸Ð¹</a></li><li><a href="http://uk.m.wikipedia.org/wiki/C%2B%2B/CLI" lang="uk" hreflang="uk">ÑÐºÑÐ°ÑÐ½ÑÑÐºÐ°</a></li><li><a href="http://zh.m.wikipedia.org/wiki/C%2B%2B/CLI" lang="zh" hreflang="zh">ä¸­æ</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia Â®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=C%2B%2B/CLI&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=C%2B%2B/CLI&amp;action=history">contributors</a> like you<br>
				Content available under <a href="../Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=C%2B%2B%2FCLI&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="../Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="../Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>