<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>Evaluation strategy - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Evaluation strategy","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Evaluation+strategy"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">Evaluation strategy</h1>			
<table class="metadata plainlinks ambox ambox-style ambox-More_footnotes" style=""><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/60px-Text_document_with_red_question_mark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/80px-Text_document_with_red_question_mark.svg.png 2x"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article includes a <a href="Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, but <b>its sources remain unclear because it has insufficient <a href="http://en.m.wikipedia.org/wiki/Wikipedia:INCITE" title="Wikipedia:INCITE" class="mw-redirect">inline citations</a></b>. <span class="hide-when-compact">Please help to <a href="http://en.m.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by <a href="http://en.m.wikipedia.org/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">introducing</a> more precise citations.</span> <small><i>(April 2012)</i></small> </span></td>
</tr></table>
<table class="vertical-navbox nowraplinks" cellspacing="5" style="float: right; clear: right; background-color: #f9f9f9; border: 1px solid #aaa; width:22em; margin: 0 0 1em 1em; padding: 0.2em; border-spacing: 0.4em 0; text-align: center; line-height: 1.4em; font-size: 88%;" cellpadding="0">
<tr>
<th class="" style="padding: 0.2em 0.4em 0.2em; font-size: 145%; line-height: 1.2em;"><strong class="selflink">Evaluation strategies</strong></th>
</tr>
<tr>
<td class="" style="padding-top: 0.2em; padding-bottom: 0.2em; text-align: left;">
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/Strict_evaluation" title="Strict evaluation" class="mw-redirect">Strict evaluation</a>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Applicative_order" title="Applicative order" class="mw-redirect">Applicative order</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Call_by_value" title="Call by value" class="mw-redirect">Call by value</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Call_by_reference" title="Call by reference" class="mw-redirect">Call by reference</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Call_by_sharing" title="Call by sharing" class="mw-redirect">Call by sharing</a></li>
<li><span class="new" title="Call by copy-restore (page does not exist)">Call by copy-restore</span></li>
</ul>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Non-strict_evaluation" title="Non-strict evaluation" class="mw-redirect">Non-strict evaluation</a>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Evaluation_strategy#Normal_order" title="Evaluation strategy">Normal order</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Call_by_name" title="Call by name" class="mw-redirect">Call by name</a></li>
<li>Call by need, <a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a>
</li>
<li><span class="new" title="Call by macro expansion (page does not exist)">Call by macro expansion</span></li>
</ul>
</li>
<li>
<span class="new" title="Nondeterministic strategies (page does not exist)">Nondeterministic strategies</span>
<ul>
<li><span class="new" title="Full-reduction (page does not exist)">Full-reduction</span></li>
<li><span class="new" title="Call by future (page does not exist)">Call by future</span></li>
<li><span class="new" title="Optimistic evaluation (page does not exist)">Optimistic evaluation</span></li>
</ul>
</li>
<li>Other
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Partial_evaluation" title="Partial evaluation">Partial evaluation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Remote_evaluation" title="Remote evaluation">Remote evaluation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Short-circuit_evaluation" title="Short-circuit evaluation">Short-circuit evaluation</a></li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td style="text-align: right; font-size: 115%;">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="http://en.m.wikipedia.org/wiki/Template:Evaluation_strategy" title="Template:Evaluation strategy"><span title="View this template" style="">v</span></a></li>
<li class="nv-talk"><span class="new" title="Template talk:Evaluation strategy (page does not exist)">t</span></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Evaluation_strategy&amp;action=edit"><span title="Edit this template" style="">e</span></a></li>
</ul>
</div>
</td>
</tr>
</table>
<p>In <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, an <b>evaluation strategy</b> is a set of (usually deterministic) rules for evaluating <a href="Expression_(programming)" title="Expression (programming)" class="mw-redirect">expressions</a> in a <a href="Programming_language" title="Programming language">programming language</a>. Emphasis is typically placed on <a href="http://en.m.wikipedia.org/wiki/Subprogram" title="Subprogram" class="mw-redirect">functions</a> or <a href="Operator_(programming)" title="Operator (programming)" class="mw-redirect">operators</a>: an evaluation strategy defines when and in what order the arguments to a function are evaluated, when they are substituted into the function, and what form that substitution takes. The <a href="http://en.m.wikipedia.org/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>, a <a href="http://en.m.wikipedia.org/wiki/Formal_system" title="Formal system">formal system</a> for the study of functions, has often been used to model evaluation strategies, where they are usually called <b>reduction strategies</b>. Evaluation strategies divide into two basic groups, strict and non-strict, based on how arguments to a function are handled. A language may combine several evaluation strategies; for example, <a href="C++" title="C++">C++</a> combines call-by-value with call-by-reference. Most languages that are predominantly <a href="Call-by-value#Strict_evaluation">strict</a> use some form of <a href="Call-by-value#Non-strict_evaluation">non-strict evaluation</a> for boolean expressions and if-statements.</p>
<h2> <span class="mw-headline" id="Strict_evaluation">Strict evaluation</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Strict_evaluation" title="Strict evaluation" class="mw-redirect">Strict evaluation</a>
</div>
<p>In <i>strict evaluation,</i> the arguments to a <a href="Subroutine" title="Subroutine">function</a> are always evaluated completely before the function is applied.</p>
<p>Under <a href="http://en.m.wikipedia.org/wiki/Church_encoding" title="Church encoding">Church encoding</a>, <a href="http://en.m.wikipedia.org/wiki/Eager_evaluation" title="Eager evaluation">eager evaluation</a> of <a href="Operator_(programming)" title="Operator (programming)" class="mw-redirect">operators</a> maps to strict evaluation of functions; for this reason, strict evaluation is sometimes called "eager". Most existing programming languages use strict evaluation for functions.</p>
<h3> <span class="mw-headline" id="Applicative_order">Applicative order</span>
</h3>
<p><i>Applicative order</i> (or <i>leftmost innermost</i> or <i>rightmost outermost</i><sup id="cite_ref-1" class="reference"><a href="Call-by-value#cite_note-1"><span>[</span>1<span>]</span></a></sup><sup id="cite_ref-2" class="reference"><a href="Call-by-value#cite_note-2"><span>[</span>2<span>]</span></a></sup>) evaluation refers to an evaluation strategy in which the arguments of a function are evaluated from left to right in a <a href="http://en.m.wikipedia.org/wiki/Post-order_traversal" title="Post-order traversal" class="mw-redirect">post-order traversal</a> of reducible expressions (<a href="http://en.wiktionary.org/wiki/redex" class="extiw" title="wiktionary:redex">redexes</a>). Unlike call-by-value, applicative order evaluation reduces terms within a function body as much as possible before the function is applied.</p>
<h3> <span class="mw-headline" id="Call_by_value">Call by value <span id="Call-by-value"></span></span>
</h3>
<p><i>Call-by-value</i> evaluation (also referred to as <i>pass-by-value</i>) is the most common evaluation strategy, used in languages as different as <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="http://en.m.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>. In call-by-value, the argument expression is evaluated, and the resulting value is bound to the corresponding variable in the function (frequently by copying the value into a new memory region). If the function or procedure is able to assign values to its parameters, only its local copy is assigned — that is, anything passed into a function call is unchanged in the caller's <a href="Scope_(programming)" title="Scope (programming)" class="mw-redirect">scope</a> when the function returns.</p>
<p>Call-by-value is not a single evaluation strategy, but rather the family of evaluation strategies in which a function's argument is evaluated before being passed to the function. While many programming languages (such as Eiffel and Java) that use call-by-value evaluate function arguments left-to-right, some evaluate functions and their arguments right-to-left, and others (such as Scheme, OCaml and C) leave the order unspecified (though they generally require implementations to be consistent).</p>
<h4> <span class="mw-headline" id="Implicit_limitations">Implicit limitations</span>
</h4>
<p>In some cases, the term "call-by-value" is problematic, as the value which is passed is not the value of the variable as understood by the ordinary meaning of value, but an implementation-specific <a href="Reference_(computer_science)" title="Reference (computer science)">reference</a> to the value. The effect is that what syntactically looks like call-by-value may end up rather behaving like call-by-reference or <a href="Call-by-value#Call_by_sharing">call-by-sharing</a>, often depending on very subtle aspects of the language semantics.</p>
<p>The reason for passing a reference is often that the language technically does not provide a value representation of complicated data, but instead represents them as a data structure while preserving some semblance of value appearance in the source code. Exactly where the boundary is drawn between proper values and data structures masquerading as such is often hard to predict. In <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a>, a vector (of which strings are special cases) is a data structure and thus treated as a reference to a memory area, but a <a href="Struct_(C_programming_language)" title="Struct (C programming language)">struct</a> is a value even if it has fields that are vectors. In <a href="http://en.m.wikipedia.org/wiki/Maple_(software)" title="Maple (software)">Maple</a>, a vector is a special case of a table and therefore a data structure, but a list (which gets rendered and can be indexed in exactly the same way) is a value.</p>
<p>The description "call-by-value where the value is a reference" is common (but should not be understood as being call-by-reference); another term is <a href="Call-by-value#Call_by_sharing">call-by-sharing</a>. Thus the behaviour of call-by-value Java or Visual Basic and call-by-value C or Pascal are significantly different: in C or Pascal, calling a function with a large structure as an argument will cause the entire structure to be copied, <i>potentially</i> causing serious performance degradation, and mutations to the structure are invisible to the caller. However, in Java or Visual Basic only the reference to the structure is copied, which is fast, and mutations to the structure are visible to the caller.</p>
<h3> <span class="mw-headline" id="Call_by_reference">Call by reference <span id="Call-by-reference"></span></span>
</h3>
<p>In <i>call-by-reference</i> evaluation (also referred to as <i>pass-by-reference</i>), a function receives an implicit <a href="Reference_(computer_science)" title="Reference (computer science)">reference</a> to a variable used as argument, rather than a copy of its value. This typically means that the function can modify (i.e. <a href="Assignment_(computer_science)" title="Assignment (computer science)">assign to</a>) the variable used as argument—something that will be seen by its caller. Call-by-reference can therefore be used to provide an additional channel of communication between the called function and the calling function. The same effect can be emulated in languages like C by passing a pointer (not to be confused with call-by-reference), or in languages like Java by passing a holding object, that can be set by the caller. A call-by-reference language makes it more difficult for a programmer to track the effects of a function call, and may introduce subtle bugs.</p>
<p>Many languages support call-by-reference in some form or another, but comparatively few use it as a default, e.g. <a href="Perl" title="Perl">Perl</a>. A few languages, such as <a href="C++" title="C++">C++</a>, <a href="PHP" title="PHP">PHP</a>, <a href="http://en.m.wikipedia.org/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a>, <a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> and <a href="http://en.m.wikipedia.org/wiki/REALbasic" title="REALbasic" class="mw-redirect">REALbasic</a>, default to call-by-value, but offer special syntax for call-by-reference parameters. C++ additionally offers call-by-reference-to-<a href="http://en.m.wikipedia.org/wiki/Const-correctness" title="Const-correctness">const</a>. In <a href="http://en.m.wikipedia.org/wiki/Purely_functional" title="Purely functional">purely functional</a> languages there is typically no semantic difference between the two strategies (since their data structures are immutable, so there is no possibility for a function to modify any of its arguments), so they are typically described as call-by-value even though implementations frequently use call-by-reference internally for the efficiency benefits.</p>
<p>Even among languages that don't exactly support call-by-reference, many, including <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="http://en.m.wikipedia.org/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, support explicit <a href="Reference_(computer_science)" title="Reference (computer science)">references</a> (objects that refer to other objects), such as <a href="Pointer_(computer_programming)" title="Pointer (computer programming)">pointers</a> (objects representing the memory addresses of other objects), and these can be used to effect or simulate call-by-reference (but with the complication that a function's caller must explicitly generate the reference to supply as an argument).</p>
<p>Example that demonstrates call-by-reference in <a href="http://en.m.wikipedia.org/wiki/E_(programming_language)" title="E (programming language)">E</a>:</p>
<pre>
def modify(var p, &amp;q) {
    p := 27 # passed by value - only the local parameter is modified
    q := 27 # passed by reference - variable used in call is modified
}
</pre>
<pre>
? var a := 1
# value: 1
? var b := 2
# value: 2
? modify(a,&amp;b)
? a
# value: 1
? b
# value: 27
</pre>
<p>Example that simulates call-by-reference in <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">void</span> Modify<span class="br0">(</span><span class="kw4">int</span> p<span class="sy0">,</span> <span class="kw4">int</span> <span class="sy0">*</span> q<span class="sy0">,</span> <span class="kw4">int</span> <span class="sy0">*</span> o<span class="br0">)</span>
<span class="br0">{</span>
    p <span class="sy0">=</span> <span class="nu0">27</span><span class="sy0">;</span> <span class="co1">// passed by value - only the local parameter is modified</span>
    <span class="sy0">*</span>q <span class="sy0">=</span> <span class="nu0">27</span><span class="sy0">;</span> <span class="co1">// passed by value or reference, check call site to determine which</span>
    <span class="sy0">*</span>o <span class="sy0">=</span> <span class="nu0">27</span><span class="sy0">;</span> <span class="co1">// passed by value or reference, check call site to determine which</span>
<span class="br0">}</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> a <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="kw4">int</span> b <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="kw4">int</span> x <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="kw4">int</span> <span class="sy0">*</span> c <span class="sy0">=</span> <span class="sy0">&amp;</span>x<span class="sy0">;</span>
    Modify<span class="br0">(</span>a<span class="sy0">,</span> <span class="sy0">&amp;</span>b<span class="sy0">,</span> c<span class="br0">)</span><span class="sy0">;</span>   <span class="co1">// a is passed by value, b is passed by reference by creating a pointer,</span>
                        <span class="co1">// c is a pointer passed by value</span>
    <span class="co1">// b and x are changed</span>
    <span class="kw1">return</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Call_by_sharing">Call by sharing</span>
</h3>
<p>Also known as "call by object" or "call by object-sharing" is an evaluation strategy first named by <a href="http://en.m.wikipedia.org/wiki/Barbara_Liskov" title="Barbara Liskov" class="mw-redirect">Barbara Liskov</a> et al. for the language <a href="http://en.m.wikipedia.org/wiki/CLU_programming_language" title="CLU programming language" class="mw-redirect">CLU</a> in 1974.<sup id="cite_ref-CLU_Reference_Manual_3-0" class="reference"><a href="Call-by-value#cite_note-CLU_Reference_Manual-3"><span>[</span>3<span>]</span></a></sup> It is used by languages such as <a href="Python_(programming_language)" title="Python (programming language)">Python</a>,<sup id="cite_ref-Lundh_Call_By_Object_4-0" class="reference"><a href="Call-by-value#cite_note-Lundh_Call_By_Object-4"><span>[</span>4<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Iota_and_Jot" title="Iota and Jot">Iota</a>, <a href="Java_(programming_language)" title="Java (programming language)">Java</a> (for object references),<sup id="cite_ref-5" class="reference"><a href="Call-by-value#cite_note-5"><span>[</span>5<span>]</span></a></sup> Ruby, Scheme, OCaml, <a href="http://en.m.wikipedia.org/wiki/AppleScript" title="AppleScript">AppleScript</a>, and many other languages. However, the term "call by sharing" is not in common use; the terminology is inconsistent across different sources. For example, in the Java community, they say that Java is pass-by-value, whereas in the Ruby community, they say that Ruby is pass-by-reference<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from January 2011">citation needed</span></a></i>]</sup>, even though the two languages exhibit the same semantics. Call-by-sharing implies that values in the language are based on objects rather than <a href="http://en.m.wikipedia.org/wiki/Primitive_types" title="Primitive types" class="mw-redirect">primitive types</a>.</p>
<p>The semantics of call-by-sharing differ from call-by-reference in that assignments to function arguments within the function aren't visible to the caller (unlike by-reference semantics)<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from October 2009">citation needed</span></a></i>]</sup>, so e.g. if a variable was passed, it is not possible to simulate an assignment on that variable in the caller's scope. However since the function has access to the same object as the caller (no copy is made), mutations to those objects, if the objects are <a href="http://en.m.wikipedia.org/wiki/Mutable_object" title="Mutable object" class="mw-redirect">mutable</a>, within the function are visible to the caller, which may appear to differ from call-by-value semantics. For <a href="http://en.m.wikipedia.org/wiki/Immutable_object" title="Immutable object">immutable objects</a>, there is no real difference between call-by-sharing and call-by-value, except for the object identity.</p>
<p>Although this term has widespread usage in the Python community, identical semantics in other languages such as Java and Visual Basic are often described as call-by-value, where the value is implied to be a reference to the object.</p>
<h3> <span class="mw-headline" id="Call_by_copy-restore">Call by copy-restore</span>
</h3>
<p><i>Call-by-copy-restore</i>, <i>copy-in copy-out</i>, <i>call-by-value-result</i> or <i>call-by-value-return</i> (as termed in the <a href="Fortran" title="Fortran">Fortran</a> community) is a special case of call-by-reference where the provided reference is unique to the caller. This variant has gained attention in multiprocessing contexts: if a parameter to a function call is a reference that might be accessible by another thread of execution, its contents may be copied to a new reference that is not; when the function call returns, the updated contents of this new reference are copied back to the original reference ("restored").</p>
<p>The semantics of call-by-copy-restore also differ from those of call-by-reference where two or more function arguments <a href="http://en.m.wikipedia.org/wiki/Aliasing_(computing)" title="Aliasing (computing)">alias</a> one another; that is, point to the same variable in the caller's environment. Under call-by-reference, writing to one will affect the other; call-by-copy-restore avoids this by giving the function distinct copies, but leaves the result in the caller's environment <a href="http://en.m.wikipedia.org/wiki/Undefined_behaviour" title="Undefined behaviour" class="mw-redirect">undefined</a> depending on which of the aliased arguments is copied back first - will the copies be made in left-to-right order both on entry and on return?</p>
<p>When the reference is passed to the callee uninitialized, this evaluation strategy may be called <i>call-by-result</i>.</p>
<h3> <span class="mw-headline" id="Partial_evaluation">Partial evaluation</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Partial_evaluation" title="Partial evaluation">Partial evaluation</a>
</div>
<p>In <i>partial evaluation</i>, evaluation may continue into the body of a function that has not been applied. Any sub-expressions that do not contain unbound variables are evaluated, and function applications whose argument values are known may be reduced. In the presence of side-effects, complete partial evaluation may produce unintended results; for this reason, systems that support partial evaluation tend to do so only for "pure" expressions (expressions without side-effects) within functions.</p>
<h2> <span class="mw-headline" id="Non-strict_evaluation">Non-strict evaluation</span>
</h2>
<p>In <i>non-strict evaluation,</i> arguments to a function are not evaluated unless they are actually used in the evaluation of the function body.</p>
<p>Under Church encoding, <a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a> of operators maps to <a href="http://en.m.wikipedia.org/wiki/Non-strict" title="Non-strict" class="mw-redirect">non-strict</a> evaluation of functions; for this reason, non-strict evaluation is often referred to as "lazy". Boolean expressions in many languages use a form of non-strict evaluation called <a href="http://en.m.wikipedia.org/wiki/Short-circuit_evaluation" title="Short-circuit evaluation">short-circuit evaluation</a>, where evaluation returns as soon as it can be determined that an unambiguous Boolean will result — for example, in a disjunctive expression where <i>true</i> is encountered, or in a conjunctive expression where <i>false</i> is encountered, and so forth. Conditional expressions also usually use lazy evaluation, where evaluation returns as soon as an unambiguous branch will result.</p>
<h3> <span class="mw-headline" id="Normal_order">Normal order</span>
</h3>
<p><i>Normal-order</i> (or <i>leftmost outermost</i>) evaluation is the evaluation strategy where the outermost redex is always reduced, applying functions before evaluating function arguments.</p>
<p>In contrast, a call-by-name strategy does not evaluate inside the body of an unapplied function.</p>
<h3> <span class="mw-headline" id="Call_by_name">Call by name</span>
</h3>
<p>In <i>call-by-name</i> evaluation, the arguments to a function are not evaluated before the function is called — rather, they are substituted directly into the function body (using <a href="http://en.m.wikipedia.org/wiki/Capture-avoiding_substitution" title="Capture-avoiding substitution" class="mw-redirect">capture-avoiding substitution</a>) and then left to be evaluated whenever they appear in the function. If an argument is not used in the function body, the argument is never evaluated; if it is used several times, it is re-evaluated each time it appears. (See <a href="http://en.m.wikipedia.org/wiki/Jensen%27s_Device" title="Jensen's Device">Jensen's Device</a>.)</p>
<p>Call-by-name evaluation is occasionally preferable over call-by-value evaluation. If a function's argument is not used in the function, call-by-name will save time by not evaluating the argument, whereas call-by-value will evaluate it regardless. If the argument is a non-terminating computation, the advantage is enormous. However, when the function argument is used, call-by-name is often slower, requiring a mechanism such as a <a href="http://en.m.wikipedia.org/wiki/Thunk_(functional_programming)#Call_by_name" title="Thunk (functional programming)">thunk</a>.</p>
<p>.NET languages can simulate call-by-name using delegates or Expression&lt;T&gt; parameters. The latter results in an abstract syntax tree being given to the function. <a href="http://en.m.wikipedia.org/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a> provides agents, which represents an operation to be evaluated when needed.</p>
<h3> <span class="mw-headline" id="Call_by_need">Call by need</span>
</h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a>
</div>
<p><i>Call-by-need</i> is a <a href="http://en.m.wikipedia.org/wiki/Memoization" title="Memoization">memoized</a> version of call-by-name where, <i>if the function argument is evaluated,</i> that value is stored for subsequent uses. In a "pure" (effect-free) setting, this produces the same results as call-by-name; when the function argument is used two or more times, call-by-need is almost always faster.</p>
<p>Because evaluation of expressions may happen arbitrarily far into a computation, languages using call-by-need generally do not support computational effects (such as <a href="http://en.m.wikipedia.org/wiki/Mutable_object" title="Mutable object" class="mw-redirect">mutation</a>) except through the use of <a href="http://en.m.wikipedia.org/wiki/Monads_in_functional_programming" title="Monads in functional programming" class="mw-redirect">monads</a> and <a href="http://en.m.wikipedia.org/wiki/Uniqueness_type" title="Uniqueness type">uniqueness types</a>. This eliminates any unexpected behavior from variables whose values change prior to their delayed evaluation.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> is the most commonly used implementation strategy for call-by-need semantics, but variations exist — for instance <a href="Call-by-value#Optimistic_evaluation">optimistic evaluation</a>.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> is the most well-known language that uses call-by-need evaluation. <a href="http://en.m.wikipedia.org/wiki/R_(programming_language)" title="R (programming language)">R</a> also uses a form of call-by-need. .NET languages can simulate call-by-need using the type <code>Lazy&lt;T&gt;</code>.</p>
<h3> <span class="mw-headline" id="Call_by_macro_expansion">Call by macro expansion</span>
</h3>
<p><i>Call-by-macro-expansion</i> is similar to call-by-name, but uses textual substitution rather than capture-avoiding substitution. With uncautious use, macro substitution may result in <span class="new" title="Variable capture (page does not exist)">variable capture</span> and lead to undesired behavior. <a href="http://en.m.wikipedia.org/wiki/Hygienic_macros" title="Hygienic macros" class="mw-redirect">Hygienic macros</a> avoid this problem by checking for and replacing shadowed variables that are not parameters.</p>
<h2> <span class="mw-headline" id="Nondeterministic_strategies">Nondeterministic strategies</span>
</h2>
<h3> <span class="mw-headline" id="Full_.CE.B2-reduction">Full β-reduction</span>
</h3>
<p>Under <i>full β-reduction,</i> any function application may be reduced (substituting the function's argument into the function using capture-avoiding substitution) at any time. This may be done even within the body of an unapplied function.</p>
<h3> <span class="mw-headline" id="Call_by_future">Call by future</span>
</h3>
<div class="rellink boilerplate seealso">See also: <a href="http://en.m.wikipedia.org/wiki/Futures_and_promises" title="Futures and promises">Futures and promises</a>
</div>
<p><i>Call-by-future</i> (or <i>parallel call-by-name</i>) is like call-by-need, except that the function's argument may be evaluated in parallel with the function body (rather than only if used). The two threads of execution synchronize when the argument is needed in the evaluation of the function body; if the argument is never used, the argument thread may be killed.</p>
<h3> <span class="mw-headline" id="Optimistic_evaluation">Optimistic evaluation</span>
</h3>
<p><i>Optimistic evaluation</i> is another variant of call-by-need in which the function's argument is partially evaluated for some amount of time (which may be adjusted at runtime), after which evaluation is aborted and the function is applied using call-by-need. This approach avoids some of the runtime expense of call-by-need, while still retaining the desired termination characteristics.</p>
<h2> <span class="mw-headline" id="See_also">See also</span>
</h2>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Beta_normal_form" title="Beta normal form">Beta normal form</a></li>
<li><a href="Comparison_of_programming_languages" title="Comparison of programming languages">Comparison of programming languages</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a></li>
<li><a href="Parameter_(computer_science)" title="Parameter (computer science)" class="mw-redirect">Parameter (computer science)</a></li>
</ul>
<h2> <span class="mw-headline" id="Notes">Notes</span>
</h2>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="Call-by-value#cite_ref-1">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="https://www.cs.uiowa.edu/~hzhang/c123/Lecture5.pdf">https://www.cs.uiowa.edu/~hzhang/c123/Lecture5.pdf</a></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="Call-by-value#cite_ref-2">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://encyclopedia2.thefreedictionary.com/applicative+order+reduction">http://encyclopedia2.thefreedictionary.com/applicative+order+reduction</a></span>
</li>
<li id="cite_note-CLU_Reference_Manual-3">
<span class="mw-cite-backlink"><b><a href="Call-by-value#cite_ref-CLU_Reference_Manual_3-0">^</a></b></span> <span class="reference-text"><span class="citation web">Liskov, Barbara; Atkinson, Russ; Bloom, Toby; Moss, Eliot; Schaffert, Craig; Scheifler, Craig; Snyder, Alan (October 1979). <a rel="nofollow" class="external text" href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf">"CLU Reference Manual"</a> (PDF). <i>Laboratory for Computer Science</i>. Massachusetts Institute of Technology<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf">http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf</a></span><span class="reference-accessdate">. Retrieved 2011-05-19</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=CLU+Reference+Manual&amp;rft.atitle=Laboratory+for+Computer+Science&amp;rft.aulast=Liskov&amp;rft.aufirst=Barbara&amp;rft.au=Liskov%2C%26%2332%3BBarbara&amp;rft.au=Atkinson%2C%26%2332%3BRuss&amp;rft.au=Bloom%2C%26%2332%3BToby&amp;rft.au=Moss%2C%26%2332%3BEliot&amp;rft.au=Schaffert%2C%26%2332%3BCraig&amp;rft.au=Scheifler%2C%26%2332%3BCraig&amp;rft.au=Snyder%2C%26%2332%3BAlan&amp;rft.date=October+1979&amp;rft.pub=Massachusetts+Institute+of+Technology&amp;rft_id=http%3A%2F%2Fwww.lcs.mit.edu%2Fpublications%2Fpubs%2Fpdf%2FMIT-LCS-TR-225.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-Lundh_Call_By_Object-4">
<span class="mw-cite-backlink"><b><a href="Call-by-value#cite_ref-Lundh_Call_By_Object_4-0">^</a></b></span> <span class="reference-text"><span class="citation web">Lundh, Fredrik. <a rel="nofollow" class="external text" href="http://effbot.org/zone/call-by-object.htm">"Call By Object"</a>. <i>effbot.org</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://effbot.org/zone/call-by-object.htm">http://effbot.org/zone/call-by-object.htm</a></span><span class="reference-accessdate">. Retrieved 2011-05-19</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Call+By+Object&amp;rft.atitle=effbot.org&amp;rft.aulast=Lundh&amp;rft.aufirst=Fredrik&amp;rft.au=Lundh%2C%26%2332%3BFredrik&amp;rft_id=http%3A%2F%2Feffbot.org%2Fzone%2Fcall-by-object.htm&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-5">
<span class="mw-cite-backlink"><b><a href="Call-by-value#cite_ref-5">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.cs.cornell.edu/courses/cs412/2001sp/iota/iota.html">"Iota Language Definition"</a>. <i>CS 412/413 Introduction to Compilers</i>. Cornell University. 2001<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.cs.cornell.edu/courses/cs412/2001sp/iota/iota.html">http://www.cs.cornell.edu/courses/cs412/2001sp/iota/iota.html</a></span><span class="reference-accessdate">. Retrieved 2011-05-19</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Iota+Language+Definition&amp;rft.atitle=CS+412%2F413+Introduction+to+Compilers&amp;rft.date=2001&amp;rft.pub=Cornell+University&amp;rft_id=http%3A%2F%2Fwww.cs.cornell.edu%2Fcourses%2Fcs412%2F2001sp%2Fiota%2Fiota.html&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span></span>
</li>
</ol>
</div>
<h2> <span class="mw-headline" id="References">References</span>
</h2>
<table class="metadata plainlinks ambox ambox-style ambox-More_footnotes" style=""><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/60px-Text_document_with_red_question_mark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/80px-Text_document_with_red_question_mark.svg.png 2x"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article includes a <a href="Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, but <b>its sources remain unclear because it has insufficient <a href="http://en.m.wikipedia.org/wiki/Wikipedia:INCITE" title="Wikipedia:INCITE" class="mw-redirect">inline citations</a></b>. <span class="hide-when-compact">Please help to <a href="http://en.m.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by <a href="http://en.m.wikipedia.org/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">introducing</a> more precise citations.</span> <small><i>(August 2009)</i></small> </span></td>
</tr></table>
<ul>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Hal_Abelson" title="Hal Abelson">Abelson, Harold</a>; <a href="http://en.m.wikipedia.org/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Sussman, Gerald Jay</a> (1996). <a rel="nofollow" class="external text" href="http://mitpress.mit.edu/sicp/full-text/book/book.html"><i>Structure and Interpretation of Computer Programs</i></a> (Second ed.). Cambridge, Massachusetts: The MIT Press. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0-262-01153-2" title="Special:BookSources/978-0-262-01153-2">978-0-262-01153-2</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://mitpress.mit.edu/sicp/full-text/book/book.html">http://mitpress.mit.edu/sicp/full-text/book/book.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Structure+and+Interpretation+of+Computer+Programs&amp;rft.aulast=Abelson&amp;rft.aufirst=Harold&amp;rft.au=Abelson%2C%26%2332%3BHarold&amp;rft.au=Sussman%2C%26%2332%3BGerald+Jay&amp;rft.date=1996&amp;rft.edition=Second&amp;rft.place=Cambridge%2C+Massachusetts&amp;rft.pub=The+MIT+Press&amp;rft.isbn=978-0-262-01153-2&amp;rft_id=http%3A%2F%2Fmitpress.mit.edu%2Fsicp%2Ffull-text%2Fbook%2Fbook.html&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span>
</li>
<li>
<span class="citation Journal">Baker-Finch, Clem; King, David; Hall, Jon; Trinder, Phil (1999-03-10). <a rel="nofollow" class="external text" href="http://cs.anu.edu.au/people/Clem.Baker-Finch/Research/par-cbn-tr/">"An Operational Semantics for Parallel Call-by-Need"</a> (ps). <i>Research report</i> (Faculty of Mathematics &amp; Computing, The Open University) <b>99</b> (1)<span class="printonly">. <a rel="nofollow" class="external free" href="http://cs.anu.edu.au/people/Clem.Baker-Finch/Research/par-cbn-tr/">http://cs.anu.edu.au/people/Clem.Baker-Finch/Research/par-cbn-tr/</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=An+Operational+Semantics+for+Parallel+Call-by-Need&amp;rft.jtitle=Research+report&amp;rft.aulast=Baker-Finch&amp;rft.aufirst=Clem&amp;rft.au=Baker-Finch%2C%26%2332%3BClem&amp;rft.au=King%2C%26%2332%3BDavid&amp;rft.au=Hall%2C%26%2332%3BJon&amp;rft.au=Trinder%2C%26%2332%3BPhil&amp;rft.date=1999-03-10&amp;rft.volume=99&amp;rft.issue=1&amp;rft.pub=Faculty+of+Mathematics+%26+Computing%2C+The+Open+University&amp;rft_id=http%3A%2F%2Fcs.anu.edu.au%2Fpeople%2FClem.Baker-Finch%2FResearch%2Fpar-cbn-tr%2F&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span>
</li>
<li>
<span class="citation book">Ennals, Robert; Peyton Jones, Simon (2003). <a rel="nofollow" class="external text" href="http://research.microsoft.com/en-us/um/people/simonpj/Papers/optimistic/icfp2003.pdf">"Optimistic Evaluation: a fast evaluation strategy for non-strict programs"</a> (PDF). International Conference on Functional Programming. ACM Press<span class="printonly">. <a rel="nofollow" class="external free" href="http://research.microsoft.com/en-us/um/people/simonpj/Papers/optimistic/icfp2003.pdf">http://research.microsoft.com/en-us/um/people/simonpj/Papers/optimistic/icfp2003.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Optimistic+Evaluation%3A+a+fast+evaluation+strategy+for+non-strict+programs&amp;rft.atitle=&amp;rft.aulast=Ennals&amp;rft.aufirst=Robert&amp;rft.au=Ennals%2C%26%2332%3BRobert&amp;rft.au=Peyton+Jones%2C%26%2332%3BSimon&amp;rft.date=2003&amp;rft.pub=ACM+Press&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2FPapers%2Foptimistic%2Ficfp2003.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span>
</li>
<li>
<span class="citation web">Ludäscher, Bertram (2001-01-24). <a rel="nofollow" class="external text" href="http://users.sdsc.edu/~ludaesch/CSE130/ln5.html">"CSE 130 lecture notes"</a>. <i>CSE 130: Programming Languages: Principles &amp; Paradigms</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://users.sdsc.edu/~ludaesch/CSE130/ln5.html">http://users.sdsc.edu/~ludaesch/CSE130/ln5.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=CSE+130+lecture+notes&amp;rft.atitle=CSE+130%3A+Programming+Languages%3A+Principles+%26+Paradigms&amp;rft.aulast=Lud%C3%A4scher&amp;rft.aufirst=Bertram&amp;rft.au=Lud%C3%A4scher%2C%26%2332%3BBertram&amp;rft.date=2001-01-24&amp;rft_id=http%3A%2F%2Fusers.sdsc.edu%2F%7Eludaesch%2FCSE130%2Fln5.html&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span>
</li>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Benjamin_C._Pierce" title="Benjamin C. Pierce">Pierce, Benjamin C.</a> (2002). <i><a href="http://en.m.wikipedia.org/wiki/Types_and_Programming_Languages" title="Types and Programming Languages">Types and Programming Languages</a></i>. <a href="http://en.m.wikipedia.org/wiki/MIT_Press" title="MIT Press">MIT Press</a>. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-262-16209-1" title="Special:BookSources/0-262-16209-1">0-262-16209-1</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=%5B%5BTypes+and+Programming+Languages%5D%5D&amp;rft.aulast=Pierce&amp;rft.aufirst=Benjamin+C.&amp;rft.au=Pierce%2C%26%2332%3BBenjamin+C.&amp;rft.date=2002&amp;rft.pub=%5B%5BMIT+Press%5D%5D&amp;rft.isbn=0-262-16209-1&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span>
</li>
<li>
<span class="citation book">Sestoft, Peter (2002). <a rel="nofollow" class="external text" href="http://www.dina.kvl.dk/~sestoft/papers/sestoft-lamreduce.pdf">"Demonstrating Lambda Calculus Reduction"</a>. In Mogensen, T; Schmidt, D; Sudborough, I. H. (PDF). <i>The essence of computation : complexity, analysis, trnasformation : essays dedicated to Neil D. Jones</i>. Lecture Notes in Computer Science. <b>2566</b>. Springer-Verlag. pp. 420–435. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a> <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/3-540-00326-6" title="Special:BookSources/3-540-00326-6">3-540-00326-6</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.dina.kvl.dk/~sestoft/papers/sestoft-lamreduce.pdf">http://www.dina.kvl.dk/~sestoft/papers/sestoft-lamreduce.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Demonstrating+Lambda+Calculus+Reduction&amp;rft.atitle=The+essence+of+computation+%3A+complexity%2C+analysis%2C+trnasformation+%3A+essays+dedicated+to+Neil+D.+Jones&amp;rft.aulast=Sestoft&amp;rft.aufirst=Peter&amp;rft.au=Sestoft%2C%26%2332%3BPeter&amp;rft.date=2002&amp;rft.series=Lecture+Notes+in+Computer+Science&amp;rft.volume=2566&amp;rft.pages=pp.%26nbsp%3B420%E2%80%93435&amp;rft.pub=Springer-Verlag&amp;rft.isbn=3-540-00326-6&amp;rft_id=http%3A%2F%2Fwww.dina.kvl.dk%2F%7Esestoft%2Fpapers%2Fsestoft-lamreduce.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span>
</li>
<li>
<span class="citation web"><a rel="nofollow" class="external text" href="http://digg.com/newsbar/topnews/c_programming_lesson_call_by_value_and_call_by_reference">"Call by Value and Call by Reference in C Programming"</a>. <i>Call by Value and Call by Reference in C Programming explained.</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://digg.com/newsbar/topnews/c_programming_lesson_call_by_value_and_call_by_reference">http://digg.com/newsbar/topnews/c_programming_lesson_call_by_value_and_call_by_reference</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Call+by+Value+and+Call+by+Reference+in+C+Programming&amp;rft.atitle=Call+by+Value+and+Call+by+Reference+in+C+Programming+explained.&amp;rft_id=http%3A%2F%2Fdigg.com%2Fnewsbar%2Ftopnews%2Fc_programming_lesson_call_by_value_and_call_by_reference&amp;rfr_id=info:sid/en.wikipedia.org:Evaluation_strategy"><span style="display: none;"> </span></span>
</li>
</ul>

						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 6 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://de.m.wikipedia.org/wiki/Auswertung_(Informatik)" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://ja.m.wikipedia.org/wiki/%E8%A9%95%E4%BE%A1%E6%88%A6%E7%95%A5" lang="ja" hreflang="ja">日本語</a></li><li><a href="http://pt.m.wikipedia.org/wiki/Estrat%C3%A9gia_de_avalia%C3%A7%C3%A3o" lang="pt" hreflang="pt">português</a></li><li><a href="http://ru.m.wikipedia.org/wiki/%D0%9F%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B0_%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D0%B0_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)" lang="ru" hreflang="ru">русский</a></li><li><a href="http://sk.m.wikipedia.org/wiki/Vyhodnocovacia_strat%C3%A9gia" lang="sk" hreflang="sk">slovenčina</a></li><li><a href="http://zh.m.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5" lang="zh" hreflang="zh">中文</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia ®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Call-by-value&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Call-by-value&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Evaluation+strategy&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>