<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>Compiler - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Compiler","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Compiler" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Compiler"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">Compiler</h1>			
<div class="dablink">This article is about the computing term.  For the anime, see <a href="http://en.m.wikipedia.org/wiki/Compiler_(anime)" title="Compiler (anime)">Compiler (anime)</a>.</div>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;">
<a href="http://en.m.wikipedia.org/wiki/File:Compiler.svg" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/Compiler.svg/300px-Compiler.svg.png" width="300" height="339" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6b/Compiler.svg/450px-Compiler.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6b/Compiler.svg/600px-Compiler.svg.png 2x"></a>
<div class="thumbcaption">

A diagram of the operation of a typical multi-language, multi-target compiler</div>
</div>
</div>
<p>A <b>compiler</b> is a <a href="http://en.m.wikipedia.org/wiki/Computer_program" title="Computer program">computer program</a> (or set of programs) that transforms <a href="Source_code" title="Source code">source code</a> written in a <a href="Programming_language" title="Programming language">programming language</a> (the <i>source language</i>) into another computer language (the <i>target language</i>, often having a binary form known as <i><a href="Object_code" title="Object code">object code</a></i>). The most common reason for wanting to transform source code is to create an <a href="http://en.m.wikipedia.org/wiki/Executable" title="Executable">executable</a> program.</p>
<p>The name "compiler" is primarily used for programs that translate source code from a <a href="http://en.m.wikipedia.org/wiki/High-level_programming_language" title="High-level programming language">high-level programming language</a> to a lower level language (e.g., <a href="Assembly_language" title="Assembly language">assembly language</a> or <a href="http://en.m.wikipedia.org/wiki/Machine_code" title="Machine code">machine code</a>). If the compiled program can run on a computer whose <a href="http://en.m.wikipedia.org/wiki/CPU" title="CPU" class="mw-redirect">CPU</a> or <a href="Operating_system" title="Operating system">operating system</a> is different from the one on which the compiler runs, the compiler is known as a <a href="http://en.m.wikipedia.org/wiki/Cross-compiler" title="Cross-compiler" class="mw-redirect">cross-compiler</a>. A program that translates from a low level language to a higher level one is a <i><a href="http://en.m.wikipedia.org/wiki/Decompiler" title="Decompiler">decompiler</a></i>. A program that translates between high-level languages is usually called a <i><a href="http://en.m.wikipedia.org/wiki/Translator_(computing)" title="Translator (computing)">language translator</a></i>, <i>source to source translator</i>, or <i>language converter</i>. A <i>language <a href="http://en.m.wikipedia.org/wiki/Rewriting" title="Rewriting">rewriter</a></i> is usually a program that translates the form of expressions without a change of language.</p>
<p>A compiler is likely to perform many or all of the following operations: <a href="http://en.m.wikipedia.org/wiki/Lexical_analysis" title="Lexical analysis">lexical analysis</a>, <a href="Preprocessing" title="Preprocessing" class="mw-redirect">preprocessing</a>, <a href="http://en.m.wikipedia.org/wiki/Parsing" title="Parsing">parsing</a>, semantic analysis (<a href="http://en.m.wikipedia.org/wiki/Syntax-directed_translation" title="Syntax-directed translation">Syntax-directed translation</a>), <a href="http://en.m.wikipedia.org/wiki/Code_generation_(compiler)" title="Code generation (compiler)">code generation</a>, and <a href="http://en.m.wikipedia.org/wiki/Code_optimization" title="Code optimization" class="mw-redirect">code optimization</a>.</p>
<p>Program faults caused by incorrect compiler behavior can be very difficult to track down and work around; therefore, compiler implementors invest significant effort to ensure the <a href="http://en.m.wikipedia.org/wiki/Compiler_correctness" title="Compiler correctness">correctness of their software</a>.</p>
<p>The term <a href="http://en.m.wikipedia.org/wiki/Compiler-compiler" title="Compiler-compiler">compiler-compiler</a> is sometimes used to refer to a <a href="http://en.m.wikipedia.org/wiki/Parser_generator" title="Parser generator" class="mw-redirect">parser generator</a>, a tool often used to help create the <a href="http://en.m.wikipedia.org/wiki/Lexical_analysis" title="Lexical analysis">lexer</a> and <a href="http://en.m.wikipedia.org/wiki/Parser" title="Parser" class="mw-redirect">parser</a>.</p>
<h2> <span class="mw-headline" id="History">History</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/History_of_compiler_construction" title="History of compiler construction">History of compiler construction</a>
</div>
<p>Software for early computers was primarily written in assembly language. Higher level programming languages were not invented until the benefits of being able to reuse software on different kinds of <a href="http://en.m.wikipedia.org/wiki/CPU" title="CPU" class="mw-redirect">CPUs</a> started to become significantly greater than the costs of writing a compiler. The limited <a href="http://en.m.wikipedia.org/wiki/Main_memory" title="Main memory" class="mw-redirect">memory</a> capacity of early computers led to substantial technical challenges when designing the first compilers.</p>
<p>Towards the end of the 1950s machine-independent programming languages were first proposed. Subsequently several experimental compilers were developed. The first compiler was written by <a href="http://en.m.wikipedia.org/wiki/Grace_Hopper" title="Grace Hopper">Grace Hopper</a>, in 1952, for the <a href="http://en.m.wikipedia.org/wiki/A-0_programming_language" title="A-0 programming language" class="mw-redirect">A-0 programming language</a>. The <a href="FORTRAN" title="FORTRAN" class="mw-redirect">FORTRAN</a> team led by <a href="http://en.m.wikipedia.org/wiki/John_Backus" title="John Backus">John Backus</a> at <a href="http://en.m.wikipedia.org/wiki/IBM" title="IBM">IBM</a> is generally credited as having introduced the first complete compiler in 1957. <a href="http://en.m.wikipedia.org/wiki/COBOL" title="COBOL">COBOL</a> was an early language to be compiled on multiple architectures, in 1960.<sup id="cite_ref-1" class="reference"><a href="Compiler#cite_note-1"><span>[</span>1<span>]</span></a></sup></p>
<p>In many application domains the idea of using a higher level language quickly caught on. Because of the expanding functionality supported by newer <a href="Programming_language" title="Programming language">programming languages</a> and the increasing complexity of computer architectures, compilers have become more complex.</p>
<p>Early compilers were written in assembly language. The first <i><a href="http://en.m.wikipedia.org/wiki/Self-hosting" title="Self-hosting">self-hosting</a></i> compiler — capable of compiling its own source code in a high-level language — was created in 1962 for <a href="http://en.m.wikipedia.org/wiki/Lisp_programming_language" title="Lisp programming language" class="mw-redirect">Lisp</a> by Tim Hart and Mike Levin at <a href="http://en.m.wikipedia.org/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">MIT</a>.<sup id="cite_ref-2" class="reference"><a href="Compiler#cite_note-2"><span>[</span>2<span>]</span></a></sup> Since the 1970s it has become common practice to implement a compiler in the language it compiles, although both <a href="Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a> and <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> have been popular choices for implementation language. Building a self-hosting compiler is a <a href="http://en.m.wikipedia.org/wiki/Bootstrapping_(compilers)" title="Bootstrapping (compilers)">bootstrapping</a> problem—the first such compiler for a language must be compiled either by hand or by a compiler written in a different language, or (as in Hart and Levin's Lisp compiler) compiled by running the compiler in an <a href="http://en.m.wikipedia.org/wiki/Interpreter_(computing)" title="Interpreter (computing)">interpreter</a>.</p>
<h3> <span class="mw-headline" id="Compilers_in_education">Compilers in education</span>
</h3>
<p>Compiler construction and <a href="http://en.m.wikipedia.org/wiki/Compiler_optimization" title="Compiler optimization" class="mw-redirect">compiler optimization</a> are taught at universities and schools as part of a <a href="http://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a> curriculum.<sup id="cite_ref-3" class="reference"><a href="Compiler#cite_note-3"><span>[</span>3<span>]</span></a></sup> Such courses are usually supplemented with the implementation of a compiler for an <a href="http://en.m.wikipedia.org/wiki/Educational_programming_language" title="Educational programming language" class="mw-redirect">educational programming language</a>. A well-documented example is <a href="http://en.m.wikipedia.org/wiki/Niklaus_Wirth" title="Niklaus Wirth">Niklaus Wirth</a>'s <a href="http://en.m.wikipedia.org/wiki/PL/0" title="PL/0">PL/0</a> compiler, which Wirth used to teach compiler construction in the 1970s.<sup id="cite_ref-4" class="reference"><a href="Compiler#cite_note-4"><span>[</span>4<span>]</span></a></sup> In spite of its simplicity, the PL/0 compiler introduced several influential concepts to the field:</p>
<ol>
<li>Program development by stepwise refinement (also the title of a 1971 paper by Wirth)<sup id="cite_ref-5" class="reference"><a href="Compiler#cite_note-5"><span>[</span>5<span>]</span></a></sup>
</li>
<li>The use of a <a href="http://en.m.wikipedia.org/wiki/Recursive_descent_parser" title="Recursive descent parser">recursive descent parser</a>
</li>
<li>The use of <a href="http://en.m.wikipedia.org/wiki/EBNF" title="EBNF" class="mw-redirect">EBNF</a> to specify the <a href="Syntax_(programming_languages)" title="Syntax (programming languages)">syntax</a> of a language</li>
<li>A <a href="http://en.m.wikipedia.org/wiki/Code_generation_(compiler)" title="Code generation (compiler)">code generator</a> producing portable <a href="http://en.m.wikipedia.org/wiki/P-code" title="P-code">P-code</a>
</li>
<li>The use of <a href="http://en.m.wikipedia.org/wiki/T-diagram" title="T-diagram" class="mw-redirect">T-diagrams</a><sup id="cite_ref-6" class="reference"><a href="Compiler#cite_note-6"><span>[</span>6<span>]</span></a></sup> in the formal description of the <a href="http://en.m.wikipedia.org/wiki/Bootstrapping_(compilers)" title="Bootstrapping (compilers)">bootstrapping</a> problem</li>
</ol>
<h2> <span class="mw-headline" id="Compilation">Compilation</span>
</h2>
<p>Compilers enabled the development of programs that are machine-independent. Before the development of FORTRAN (FORmula TRANslator), the first higher-level language, in the 1950s, machine-dependent <a href="Assembly_language" title="Assembly language">assembly language</a> was widely used. While assembly language produces more reusable and relocatable programs than machine code on the same architecture, it has to be modified or rewritten if the program is to be executed on different <a href="http://en.m.wikipedia.org/wiki/Computer_hardware" title="Computer hardware">computer hardware</a> architecture.</p>
<p>With the advance of high-level programming languages that followed FORTRAN, such as COBOL, C, and BASIC, programmers could write machine-independent source programs. A compiler translates the high-level source programs into target programs in machine languages for the specific hardwares. Once the target program is generated, the user can execute the program.</p>
<h3> <span class="mw-headline" id="Structure_of_a_compiler">Structure of a compiler</span>
</h3>
<p>Compilers bridge source programs in high-level languages with the underlying hardware. A compiler requires 1) determining the correctness of the syntax of programs, 2) generating correct and efficient object code, 3) run-time organization, and 4) formatting output according to assembler and/or linker conventions. A compiler consists of three main parts: the frontend, the middle-end, and the backend.</p>
<p>The <b>front end</b> checks whether the program is correctly written in terms of the programming language syntax and semantics. Here legal and illegal programs are recognized. Errors are reported, if any, in a useful way. <a href="Programming_language#Type_system" title="Programming language">Type</a> checking is also performed by collecting type information. The frontend then generates an <i>intermediate representation</i> or <i>IR</i> of the source code for processing by the middle-end.</p>
<p>The <b>middle end</b> is where optimization takes place. Typical transformations for optimization are removal of useless or unreachable code, discovery and propagation of constant values, relocation of computation to a less frequently executed place (e.g., out of a loop), or specialization of computation based on the context. The middle-end generates another IR for the following backend. Most optimization efforts are focused on this part.</p>
<p>The <b>back end</b> is responsible for translating the IR from the middle-end into assembly code. The target instruction(s) are chosen for each IR instruction. <a href="http://en.m.wikipedia.org/wiki/Register_allocation" title="Register allocation">Register allocation</a> assigns <a href="http://en.m.wikipedia.org/wiki/Processor_register" title="Processor register">processor registers</a> for the program variables where possible. The backend utilizes the hardware by figuring out how to keep parallel <a href="http://en.m.wikipedia.org/wiki/Execution_unit" title="Execution unit">execution units</a> busy, filling <a href="http://en.m.wikipedia.org/wiki/Delay_slot" title="Delay slot">delay slots</a>, and so on. Although most algorithms for optimization are in <a href="http://en.m.wikipedia.org/wiki/NP_(complexity)" title="NP (complexity)">NP</a>, heuristic techniques are well-developed.</p>
<h2> <span class="mw-headline" id="Compiler_output">Compiler output</span>
</h2>
<p>One classification of compilers is by the <a href="http://en.m.wikipedia.org/wiki/Platform_(computing)" title="Platform (computing)" class="mw-redirect">platform</a> on which their generated code executes. This is known as the <i>target platform.</i></p>
<p>A <i>native</i> or <i>hosted</i> compiler is one which output is intended to directly run on the same type of computer and operating system that the compiler itself runs on. The output of a <a href="http://en.m.wikipedia.org/wiki/Cross_compiler" title="Cross compiler">cross compiler</a> is designed to run on a different platform. Cross compilers are often used when developing software for <a href="Embedded_system" title="Embedded system">embedded systems</a> that are not intended to support a software development environment.</p>
<p>The output of a compiler that produces code for a <a href="http://en.m.wikipedia.org/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> (VM) may or may not be executed on the same platform as the compiler that produced it. For this reason such compilers are not usually classified as native or cross compilers.</p>
<p>The lower level language that is the target of a compiler may itself be a <a href="http://en.m.wikipedia.org/wiki/High-level_programming_language" title="High-level programming language">high-level programming language</a>. <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a>, often viewed as some sort of portable <a href="Assembly_language" title="Assembly language">assembler</a>, can also be the target language of a compiler. E.g.: <a href="http://en.m.wikipedia.org/wiki/Cfront" title="Cfront">Cfront</a>, the original compiler for <a href="C++" title="C++">C++</a> used C as target language. The C created by such a compiler is usually not intended to be read and maintained by humans. So <a href="http://en.m.wikipedia.org/wiki/Indent_style" title="Indent style">indent style</a> and pretty C intermediate code are irrelevant. Some features of C turn it into a good target language. E.g.: C code with <a href="C_preprocessor#Special_macros_and_directives" title="C preprocessor"><code>#line</code></a> directives can be generated to support <a href="http://en.m.wikipedia.org/wiki/Debugging" title="Debugging">debugging</a> of the original source.</p>
<h3> <span class="mw-headline" id="Compiled_versus_interpreted_languages">Compiled versus interpreted languages</span>
</h3>
<p>Higher-level programming languages usually appear with a type of <a href="http://en.m.wikipedia.org/wiki/Translator_(computing)" title="Translator (computing)">translation</a> in mind: either designed as <a href="http://en.m.wikipedia.org/wiki/Compiled_language" title="Compiled language">compiled language</a> or <a href="Interpreted_language" title="Interpreted language">interpreted language</a>. However, in practice there is rarely anything about a language that <i>requires</i> it to be exclusively compiled or exclusively interpreted, although it is possible to design languages that rely on re-interpretation at run time. The categorization usually reflects the most popular or widespread implementations of a language — for instance, <a href="http://en.m.wikipedia.org/wiki/BASIC" title="BASIC">BASIC</a> is sometimes called an interpreted language, and C a compiled one, despite the existence of BASIC compilers and C interpreters.</p>
<p>Interpretation does not replace compilation completely. It only hides it from the user and makes it gradual. Even though an interpreter can itself be interpreted, a directly executed program is needed somewhere at the bottom of the stack (see <a href="http://en.m.wikipedia.org/wiki/Machine_language" title="Machine language" class="mw-redirect">machine language</a>). Modern trends toward <a href="http://en.m.wikipedia.org/wiki/Just-in-time_compilation" title="Just-in-time compilation">just-in-time compilation</a> and <a href="http://en.m.wikipedia.org/wiki/Bytecode" title="Bytecode">bytecode interpretation</a> at times blur the traditional categorizations of compilers and interpreters.</p>
<p>Some language specifications spell out that implementations <i>must</i> include a compilation facility; for example, <a href="http://en.m.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>. However, there is nothing inherent in the definition of Common Lisp that stops it from being interpreted. Other languages have features that are very easy to implement in an interpreter, but make writing a compiler much harder; for example, <a href="http://en.m.wikipedia.org/wiki/APL_(programming_language)" title="APL (programming language)">APL</a>, <a href="http://en.m.wikipedia.org/wiki/SNOBOL4" title="SNOBOL4" class="mw-redirect">SNOBOL4</a>, and many scripting languages allow programs to construct arbitrary source code at runtime with regular string operations, and then execute that code by passing it to a special evaluation function. To implement these features in a compiled language, programs must usually be shipped with a <a href="http://en.m.wikipedia.org/wiki/Runtime_library" title="Runtime library">runtime library</a> that includes a version of the compiler itself.</p>
<h3> <span class="mw-headline" id="Hardware_compilation">Hardware compilation</span>
</h3>
<p>The output of some compilers may target <a href="http://en.m.wikipedia.org/wiki/Computer_hardware" title="Computer hardware">computer hardware</a> at a very low level, for example a <a href="http://en.m.wikipedia.org/wiki/Field_Programmable_Gate_Array" title="Field Programmable Gate Array" class="mw-redirect">Field Programmable Gate Array</a> (FPGA) or structured <a href="http://en.m.wikipedia.org/wiki/Application-specific_integrated_circuit" title="Application-specific integrated circuit">Application-specific integrated circuit</a> (ASIC). Such compilers are said to be <i><a href="http://en.m.wikipedia.org/wiki/Hardware_compiler" title="Hardware compiler" class="mw-redirect">hardware compilers</a></i> or synthesis tools because the source code they compile effectively controls the final configuration of the hardware and how it operates; the output of the compilation is not instructions that are executed in sequence - only an interconnection of transistors or lookup tables. For example, XST is the Xilinx Synthesis Tool used for configuring FPGAs. Similar tools are available from Altera, Synplicity, Synopsys and other vendors.</p>
<h2> <span class="mw-headline" id="Compiler_construction">Compiler construction</span>
</h2>
<table class="metadata plainlinks ambox mbox-small-left ambox-content ambox-Unreferenced" style=""><tr>
<td class="mbox-image"><a href="File:Question_book-new.svg" class="image"><img alt="Question book-new.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x"></a></td>
<td class="mbox-text" style=""><span class="mbox-text-span">This section <b>does not <a href="Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. <small><i>(September 2010)</i></small></span></td>
</tr></table>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Compiler_construction" title="Compiler construction">Compiler construction</a>
</div>
<p>In the early days, the approach taken to compiler design used to be directly affected by the complexity of the processing, the experience of the person(s) designing it, and the resources available.</p>
<p>A compiler for a relatively simple language written by one person might be a single, monolithic piece of software. When the source language is large and complex, and high quality output is required, the design may be split into a number of relatively independent phases. Having separate phases means development can be parceled up into small parts and given to different people. It also becomes much easier to replace a single phase by an improved one, or to insert new phases later (e.g., additional optimizations).</p>
<p>The division of the compilation processes into phases was championed by the <a href="http://en.m.wikipedia.org/wiki/Production_Quality_Compiler-Compiler_Project" title="Production Quality Compiler-Compiler Project" class="mw-redirect">Production Quality Compiler-Compiler Project</a> (PQCC) at <a href="http://en.m.wikipedia.org/wiki/Carnegie_Mellon" title="Carnegie Mellon" class="mw-redirect">Carnegie Mellon</a> University. This project introduced the terms <i>front end</i>, <i>middle end</i>, and <i>back end</i>.</p>
<p>All but the smallest of compilers have more than two phases. However, these phases are usually regarded as being part of the front end or the back end. The point at which these two <i>ends</i> meet is open to debate. The front end is generally considered to be where syntactic and semantic processing takes place, along with translation to a lower level of representation (than source code).</p>
<p>The middle end is usually designed to perform optimizations on a form other than the source code or machine code. This source code/machine code independence is intended to enable generic optimizations to be shared between versions of the compiler supporting different languages and target processors.</p>
<p>The back end takes the output from the middle. It may perform more analysis, transformations and optimizations that are for a particular computer. Then, it generates code for a particular processor and OS.</p>
<p>This front-end/middle/back-end approach makes it possible to combine front ends for different <a href="Programming_language" title="Programming language">languages</a> with back ends for different <a href="http://en.m.wikipedia.org/wiki/CPU" title="CPU" class="mw-redirect">CPUs</a>. Practical examples of this approach are the <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GNU Compiler Collection</a>, <a href="http://en.m.wikipedia.org/wiki/LLVM" title="LLVM">LLVM</a>, and the <a href="http://en.m.wikipedia.org/wiki/Amsterdam_Compiler_Kit" title="Amsterdam Compiler Kit">Amsterdam Compiler Kit</a>, which have multiple front-ends, shared analysis and multiple back-ends.</p>
<h3> <span class="mw-headline" id="One-pass_versus_multi-pass_compilers">One-pass versus multi-pass compilers</span>
</h3>
<p>Classifying compilers by number of passes has its background in the hardware resource limitations of computers. Compiling involves performing lots of work and early computers did not have enough memory to contain one program that did all of this work. So compilers were split up into smaller programs which each made a pass over the source (or some representation of it) performing some of the required analysis and translations.</p>
<p>The ability to compile in a <a href="http://en.m.wikipedia.org/wiki/One-pass_compiler" title="One-pass compiler">single pass</a> has classically been seen as a benefit because it simplifies the job of writing a compiler and one-pass compilers generally perform compilations faster than <a href="http://en.m.wikipedia.org/wiki/Multi-pass_compiler" title="Multi-pass compiler">multi-pass compilers</a>. Thus, partly driven by the resource limitations of early systems, many early languages were specifically designed so that they could be compiled in a single pass (e.g., <a href="Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>).</p>
<p>In some cases the design of a language feature may require a compiler to perform more than one pass over the source. For instance, consider a declaration appearing on line 20 of the source which affects the translation of a statement appearing on line 10. In this case, the first pass needs to gather information about declarations appearing after statements that they affect, with the actual translation happening during a subsequent pass.</p>
<p>The disadvantage of compiling in a single pass is that it is not possible to perform many of the sophisticated <a href="http://en.m.wikipedia.org/wiki/Compiler_optimization" title="Compiler optimization" class="mw-redirect">optimizations</a> needed to generate high quality code. It can be difficult to count exactly how many passes an optimizing compiler makes. For instance, different phases of optimization may analyse one expression many times but only analyse another expression once.</p>
<p>Splitting a compiler up into small programs is a technique used by researchers interested in producing provably correct compilers. Proving the correctness of a set of small programs often requires less effort than proving the correctness of a larger, single, equivalent program.</p>
<p>While the typical multi-pass compiler outputs machine code from its final pass, there are several other types:</p>
<ul>
<li>A "<a href="Source-to-source_compiler" title="Source-to-source compiler">source-to-source compiler</a>" is a type of compiler that takes a high level language as its input and outputs a high level language. For example, an <a href="http://en.m.wikipedia.org/wiki/Automatic_parallelization" title="Automatic parallelization">automatic parallelizing</a> compiler will frequently take in a high level language program as an input and then transform the code and annotate it with parallel code annotations (e.g. <a href="http://en.m.wikipedia.org/wiki/OpenMP" title="OpenMP">OpenMP</a>) or language constructs (e.g. Fortran's <code>DOALL</code> statements).</li>
<li>
<span class="new" title="Stage compiler (page does not exist)">Stage compiler</span> that compiles to assembly language of a theoretical machine, like some <a href="http://en.m.wikipedia.org/wiki/Prolog" title="Prolog">Prolog</a> implementations
<ul>
<li>This Prolog machine is also known as the <a href="http://en.m.wikipedia.org/wiki/Warren_Abstract_Machine" title="Warren Abstract Machine">Warren Abstract Machine</a> (or WAM).</li>
<li>Bytecode compilers for <a href="Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="http://en.m.wikipedia.org/wiki/Python_language" title="Python language" class="mw-redirect">Python</a>, and many more are also a subtype of this.</li>
</ul>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Just-in-time_compilation" title="Just-in-time compilation">Just-in-time compiler</a>, used by Smalltalk and Java systems, and also by Microsoft .NET's <a href="http://en.m.wikipedia.org/wiki/Common_Intermediate_Language" title="Common Intermediate Language">Common Intermediate Language</a> (CIL)
<ul>
<li>Applications are delivered in bytecode, which is compiled to native machine code just prior to execution.</li>
</ul>
</li>
</ul>
<h3> <span class="mw-headline" id="Front_end">Front end</span>
</h3>
<p>The front end analyzes the source code to build an internal representation of the program, called the <a href="http://en.m.wikipedia.org/wiki/Intermediate_representation" title="Intermediate representation" class="mw-redirect">intermediate representation</a> or <i>IR</i>. It also manages the <a href="http://en.m.wikipedia.org/wiki/Symbol_table" title="Symbol table">symbol table</a>, a data structure mapping each symbol in the source code to associated information such as location, type and scope. This is done over several phases, which includes some of the following:</p>
<ol>
<li>
<b>Line reconstruction</b>. Languages which <a href="http://en.m.wikipedia.org/wiki/Stropping_(syntax)" title="Stropping (syntax)">strop</a> their keywords or allow arbitrary spaces within identifiers require a phase before parsing, which converts the input character sequence to a canonical form ready for the parser. The <a href="http://en.m.wikipedia.org/wiki/Top-down_parsing" title="Top-down parsing">top-down</a>, <a href="http://en.m.wikipedia.org/wiki/Recursive_descent_parser" title="Recursive descent parser">recursive-descent</a>, table-driven parsers used in the 1960s typically read the source one character at a time and did not require a separate tokenizing phase. <a href="http://en.m.wikipedia.org/wiki/Atlas_Autocode" title="Atlas Autocode">Atlas Autocode</a>, and <a href="http://en.m.wikipedia.org/wiki/Edinburgh_IMP" title="Edinburgh IMP">Imp</a> (and some implementations of <a href="ALGOL" title="ALGOL">ALGOL</a> and <a href="http://en.m.wikipedia.org/wiki/Coral_66" title="Coral 66">Coral 66</a>) are examples of stropped languages which compilers would have a <i>Line Reconstruction</i> phase.</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Lexical_analysis" title="Lexical analysis">Lexical analysis</a> breaks the source code text into small pieces called <i>tokens</i>. Each token is a single atomic unit of the language, for instance a <a href="http://en.m.wikipedia.org/wiki/Keyword_(computing)" title="Keyword (computing)" class="mw-redirect">keyword</a>, <a href="http://en.m.wikipedia.org/wiki/Identifier" title="Identifier">identifier</a> or <a href="http://en.m.wikipedia.org/wiki/Symbol" title="Symbol">symbol name</a>. The token syntax is typically a <a href="http://en.m.wikipedia.org/wiki/Regular_language" title="Regular language">regular language</a>, so a <a href="http://en.m.wikipedia.org/wiki/Finite_state_automaton" title="Finite state automaton" class="mw-redirect">finite state automaton</a> constructed from a <a href="http://en.m.wikipedia.org/wiki/Regular_expression" title="Regular expression">regular expression</a> can be used to recognize it. This phase is also called lexing or scanning, and the software doing lexical analysis is called a <a href="http://en.m.wikipedia.org/wiki/Lexical_analyzer" title="Lexical analyzer" class="mw-redirect">lexical analyzer</a> or scanner.</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Preprocessor" title="Preprocessor">Preprocessing</a>. Some languages, e.g., <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a>, require a preprocessing phase which supports <a href="Macro_(computer_science)" title="Macro (computer science)">macro</a> substitution and conditional compilation. Typically the preprocessing phase occurs before syntactic or semantic analysis; e.g. in the case of C, the preprocessor manipulates lexical tokens rather than syntactic forms. However, some languages such as <a href="http://en.m.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> support macro substitutions based on syntactic forms.</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Syntax_analysis" title="Syntax analysis" class="mw-redirect">Syntax analysis</a> involves <a href="http://en.m.wikipedia.org/wiki/Parsing" title="Parsing">parsing</a> the token sequence to identify the syntactic structure of the program. This phase typically builds a <a href="http://en.m.wikipedia.org/wiki/Parse_tree" title="Parse tree">parse tree</a>, which replaces the linear sequence of tokens with a tree structure built according to the rules of a <a href="Formal_grammar" title="Formal grammar">formal grammar</a> which define the language's syntax. The parse tree is often analyzed, augmented, and transformed by later phases in the compiler.</li>
<li>Semantic analysis is the phase in which the compiler adds semantic information to the <a href="http://en.m.wikipedia.org/wiki/Parse_tree" title="Parse tree">parse tree</a> and builds the symbol table. This phase performs semantic checks such as <a href="Type_checking" title="Type checking" class="mw-redirect">type checking</a> (checking for type errors), or <a href="http://en.m.wikipedia.org/wiki/Object_binding" title="Object binding">object binding</a> (associating variable and function references with their definitions), or <a href="http://en.m.wikipedia.org/wiki/Definite_assignment_analysis" title="Definite assignment analysis">definite assignment</a> (requiring all local variables to be initialized before use), rejecting incorrect programs or issuing warnings. Semantic analysis usually requires a complete parse tree, meaning that this phase logically follows the <a href="http://en.m.wikipedia.org/wiki/Parsing" title="Parsing">parsing</a> phase, and logically precedes the <a href="http://en.m.wikipedia.org/wiki/Code_generation_(compiler)" title="Code generation (compiler)">code generation</a> phase, though it is often possible to fold multiple phases into one pass over the code in a compiler implementation.</li>
</ol>
<h3> <span class="mw-headline" id="Back_end">Back end</span>
</h3>
<p>The term <i>back end</i> is sometimes confused with <i><a href="http://en.m.wikipedia.org/wiki/Code_generation_(compiler)" title="Code generation (compiler)">code generator</a></i> because of the overlapped functionality of generating assembly code. Some literature uses <i>middle end</i> to distinguish the generic analysis and optimization phases in the back end from the machine-dependent code generators.</p>
<p>The main phases of the back end include the following:</p>
<ol>
<li>
<a href="http://en.m.wikipedia.org/wiki/Compiler_analysis" title="Compiler analysis" class="mw-redirect">Analysis</a>: This is the gathering of program information from the intermediate representation derived from the input. Typical analyses are <a href="http://en.m.wikipedia.org/wiki/Data_flow_analysis" title="Data flow analysis" class="mw-redirect">data flow analysis</a> to build <a href="http://en.m.wikipedia.org/wiki/Use-define_chain" title="Use-define chain">use-define chains</a>, <a href="http://en.m.wikipedia.org/wiki/Dependence_analysis" title="Dependence analysis">dependence analysis</a>, <a href="http://en.m.wikipedia.org/wiki/Alias_analysis" title="Alias analysis">alias analysis</a>, <a href="http://en.m.wikipedia.org/wiki/Pointer_analysis" title="Pointer analysis">pointer analysis</a>, <a href="http://en.m.wikipedia.org/wiki/Escape_analysis" title="Escape analysis">escape analysis</a> etc. Accurate analysis is the basis for any compiler optimization. The <a href="http://en.m.wikipedia.org/wiki/Call_graph" title="Call graph">call graph</a> and <a href="http://en.m.wikipedia.org/wiki/Control_flow_graph" title="Control flow graph">control flow graph</a> are usually also built during the analysis phase.</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Compiler_optimization" title="Compiler optimization" class="mw-redirect">Optimization</a>: the intermediate language representation is transformed into functionally equivalent but faster (or smaller) forms. Popular optimizations are <a href="http://en.m.wikipedia.org/wiki/Inline_expansion" title="Inline expansion">inline expansion</a>, <a href="http://en.m.wikipedia.org/wiki/Dead_code_elimination" title="Dead code elimination">dead code elimination</a>, <a href="http://en.m.wikipedia.org/wiki/Constant_propagation" title="Constant propagation" class="mw-redirect">constant propagation</a>, <a href="http://en.m.wikipedia.org/wiki/Loop_transformation" title="Loop transformation" class="mw-redirect">loop transformation</a>, <a href="http://en.m.wikipedia.org/wiki/Register_allocation" title="Register allocation">register allocation</a> and even <a href="http://en.m.wikipedia.org/wiki/Automatic_parallelization" title="Automatic parallelization">automatic parallelization</a>.</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Code_generation_(compiler)" title="Code generation (compiler)">Code generation</a>: the transformed intermediate language is translated into the output language, usually the native <a href="http://en.m.wikipedia.org/wiki/Machine_language" title="Machine language" class="mw-redirect">machine language</a> of the system. This involves resource and storage decisions, such as deciding which variables to fit into registers and memory and the selection and scheduling of appropriate machine instructions along with their associated addressing modes (see also <a href="http://en.m.wikipedia.org/wiki/Sethi-Ullman_algorithm" title="Sethi-Ullman algorithm" class="mw-redirect">Sethi-Ullman algorithm</a>). Debug data may also need to be generated to facilitate <a href="http://en.m.wikipedia.org/wiki/Debugging" title="Debugging">debugging</a>.</li>
</ol>
<p>Compiler analysis is the prerequisite for any compiler optimization, and they tightly work together. For example, <a href="http://en.m.wikipedia.org/wiki/Dependence_analysis" title="Dependence analysis">dependence analysis</a> is crucial for <a href="http://en.m.wikipedia.org/wiki/Loop_transformation" title="Loop transformation" class="mw-redirect">loop transformation</a>.</p>
<p>In addition, the scope of compiler analysis and optimizations vary greatly, from as small as a <a href="http://en.m.wikipedia.org/wiki/Basic_block" title="Basic block">basic block</a> to the procedure/function level, or even over the whole program (<a href="http://en.m.wikipedia.org/wiki/Interprocedural_optimization" title="Interprocedural optimization">interprocedural optimization</a>). Obviously, a compiler can potentially do a better job using a broader view. But that broad view is not free: large scope analysis and optimizations are very costly in terms of compilation time and memory space; this is especially true for interprocedural analysis and optimizations.</p>
<p>Interprocedural analysis and optimizations are common in modern commercial compilers from <a href="http://en.m.wikipedia.org/wiki/Hewlett-Packard" title="Hewlett-Packard">HP</a>, <a href="http://en.m.wikipedia.org/wiki/IBM" title="IBM">IBM</a>, <a href="http://en.m.wikipedia.org/wiki/Silicon_Graphics" title="Silicon Graphics">SGI</a>, <a href="http://en.m.wikipedia.org/wiki/Intel" title="Intel">Intel</a>, <a href="http://en.m.wikipedia.org/wiki/Microsoft" title="Microsoft">Microsoft</a>, and <a href="http://en.m.wikipedia.org/wiki/Sun_Microsystems" title="Sun Microsystems">Sun Microsystems</a>. The open source <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a> was criticized for a long time for lacking powerful interprocedural optimizations, but it is changing in this respect. Another open source compiler with full analysis and optimization infrastructure is <a href="http://en.m.wikipedia.org/wiki/Open64" title="Open64">Open64</a>, which is used by many organizations for research and commercial purposes.</p>
<p>Due to the extra time and space needed for compiler analysis and optimizations, some compilers skip them by default. Users have to use compilation options to explicitly tell the compiler which optimizations should be enabled.</p>
<h2> <span class="mw-headline" id="Compiler_correctness">Compiler correctness</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Compiler_correctness" title="Compiler correctness">Compiler correctness</a>
</div>
<p><a href="http://en.m.wikipedia.org/wiki/Compiler_correctness" title="Compiler correctness">Compiler correctness</a> is the branch of software engineering that deals with trying to show that a compiler behaves according to its <a href="Programming_language" title="Programming language">language specification</a>.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from February 2010">citation needed</span></a></i>]</sup> Techniques include developing the compiler using <a href="http://en.m.wikipedia.org/wiki/Formal_methods" title="Formal methods">formal methods</a> and using rigorous testing (often called compiler validation) on an existing compiler.</p>
<h2> <span class="mw-headline" id="Related_techniques">Related techniques</span>
</h2>
<p><a href="Assembly_language" title="Assembly language">Assembly language</a> is a type of low-level language and a program that compiles it is more commonly known as an <i>assembler</i>, with the inverse program known as a <i><a href="http://en.m.wikipedia.org/wiki/Disassembler" title="Disassembler">disassembler</a></i>.</p>
<p>A program that translates from a low level language to a higher level one is a <i><a href="http://en.m.wikipedia.org/wiki/Decompiler" title="Decompiler">decompiler</a></i>.</p>
<p>A program that translates between high-level languages is usually called a <i>language translator</i>, <i>source to source translator</i>, <i>language converter</i>, or <i>language <a href="http://en.m.wikipedia.org/wiki/Rewriting" title="Rewriting">rewriter</a></i>. The last term is usually applied to translations that do not involve a change of language.</p>
<p>A program that translates into an object code format that is not supported on the compilation machine is called a <i>cross compiler</i> and is commonly used to prepare code for embedded applications.</p>
<h2> <span class="mw-headline" id="International_conferences_and_organizations">International conferences and organizations</span>
</h2>
<p>Every year, the <b>European Joint Conferences on Theory and Practice of Software</b> (ETAPS) sponsors the <b>International Conference on Compiler Construction</b> (CC), with papers from both the academic and industrial sectors.<sup id="cite_ref-7" class="reference"><a href="Compiler#cite_note-7"><span>[</span>7<span>]</span></a></sup></p>
<h2> <span class="mw-headline" id="See_also">See also</span>
</h2>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/Abstract_interpretation" title="Abstract interpretation">Abstract interpretation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Attribute_grammar" title="Attribute grammar">Attribute grammar</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Binary_recompiler" title="Binary recompiler">Binary recompiler</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Bottom-up_parsing" title="Bottom-up parsing">Bottom-up parsing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Byzantine_fault_tolerance" title="Byzantine fault tolerance">Byzantine fault tolerance</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Compile_and_go_loader" title="Compile and go loader">compile and go loader</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Compile_farm" title="Compile farm">Compile farm</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Compiler-compiler" title="Compiler-compiler">Compiler-compiler</a> (or Parser generator)</li>
<li><a href="http://en.m.wikipedia.org/wiki/Compiler_correctness" title="Compiler correctness">Compiler correctness</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Decompiler" title="Decompiler">Decompiler</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/History_of_compiler_writing" title="History of compiler writing" class="mw-redirect">History of compiler writing</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Just-in-time_compilation" title="Just-in-time compilation">Just-in-time compilation</a></li>
<li><a href="Linker_(computing)" title="Linker (computing)">Linker</a></li>
<li><a href="List_of_compilers" title="List of compilers">List of compilers</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/List_of_important_publications_in_computer_science#Compilers" title="List of important publications in computer science">List of important publications in computer science#Compilers</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Metacompilation" title="Metacompilation">Metacompilation</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Overhead_code" title="Overhead code">Overhead code</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Semantics_encoding" title="Semantics encoding">Semantics encoding</a></li>
<li><a href="http://en.m.wikipedia.org/wiki/Transcompiler" title="Transcompiler" class="mw-redirect">Transcompiler</a></li>
</ul>
<h2> <span class="mw-headline" id="Notes">Notes</span>
</h2>
<div class="reflist references-column-count references-column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="Compiler#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.interesting-people.org/archives/interesting-people/199706/msg00011.html">"IP: The World's First COBOL Compilers"</a>. interesting-people.org. 12 June 1997<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.interesting-people.org/archives/interesting-people/199706/msg00011.html">http://www.interesting-people.org/archives/interesting-people/199706/msg00011.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=IP%3A+The+World%27s+First+COBOL+Compilers&amp;rft.atitle=&amp;rft.date=12+June+1997&amp;rft.pub=interesting-people.org&amp;rft_id=http%3A%2F%2Fwww.interesting-people.org%2Farchives%2Finteresting-people%2F199706%2Fmsg00011.html&amp;rfr_id=info:sid/en.wikipedia.org:Compiler"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="Compiler#cite_ref-2">^</a></b></span> <span class="reference-text"><span class="citation web">T. Hart and M. Levin. <a rel="nofollow" class="external text" href="ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf">"The New Compiler, AIM-39 - CSAIL Digital Archive - Artificial Intelligence Laboratory Series"</a>. publications.ai.mit.edu<span class="printonly">. <a rel="nofollow" class="external free" href="ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf">ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+New+Compiler%2C+AIM-39+-+CSAIL+Digital+Archive+-+Artificial+Intelligence+Laboratory+Series&amp;rft.atitle=&amp;rft.aulast=T.+Hart+and+M.+Levin&amp;rft.au=T.+Hart+and+M.+Levin&amp;rft.pub=publications.ai.mit.edu&amp;rft_id=ftp%3A%2F%2Fpublications.ai.mit.edu%2Fai-publications%2Fpdf%2FAIM-039.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Compiler"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="Compiler#cite_ref-3">^</a></b></span> <span class="reference-text">Chakraborty, P., Saxena, P. C., Katti, C. P., Pahwa, G., Taneja, S. A new practicum in compiler construction. <i>Computer Applications in Engineering Education</i>, In Press. <a rel="nofollow" class="external free" href="http://onlinelibrary.wiley.com/doi/10.1002/cae.20566/pdf">http://onlinelibrary.wiley.com/doi/10.1002/cae.20566/pdf</a></span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="Compiler#cite_ref-4">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.246.dk/pl0.html">"The PL/0 compiler/interpreter"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.246.dk/pl0.html">http://www.246.dk/pl0.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+PL%2F0+compiler%2Finterpreter&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.246.dk%2Fpl0.html&amp;rfr_id=info:sid/en.wikipedia.org:Compiler"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-5">
<span class="mw-cite-backlink"><b><a href="Compiler#cite_ref-5">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.acm.org/classics/dec95/">"The ACM Digital Library"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.acm.org/classics/dec95/">http://www.acm.org/classics/dec95/</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+ACM+Digital+Library&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.acm.org%2Fclassics%2Fdec95%2F&amp;rfr_id=info:sid/en.wikipedia.org:Compiler"><span style="display: none;"> </span></span></span>
</li>
<li id="cite_note-6">
<span class="mw-cite-backlink"><b><a href="Compiler#cite_ref-6">^</a></b></span> <span class="reference-text">T diagrams were first introduced for describing bootstrapping and cross-compiling compilers in McKeeman et al. <i>A Compiler Generator</i> (1971). Conway described the broader concept before that with his <a href="http://en.m.wikipedia.org/wiki/UNCOL" title="UNCOL">UNCOL</a> in 1958, to which Bratman added in 1961: H. Bratman, “An alternate form of the ´UNCOL diagram´“, Comm. ACM 4 (March 1961) 3, p. 142. Later on, others, including P.D. Terry, gave an explanation and usage of T-diagrams in their textbooks on the topic of compiler construction. Cf. Terry, 1997, <a rel="nofollow" class="external text" href="http://scifac.ru.ac.za/compilers/cha03g.htm">Chapter 3</a>. T-diagrams are also now used to describe client-server interconnectivity on the World Wide Web: cf. Patrick Closhen, et al. 1997: <a rel="nofollow" class="external text" href="http://pu.rbg.informatik.tu-darmstadt.de/docs/HJH-19990217-etal-T-diagrams.doc"><i>T-Diagrams as Visual Language to Illustrate WWW Technology</i></a>, Darmstadt University of Technology, Darmstadt, Germany</span>
</li>
<li id="cite_note-7">
<span class="mw-cite-backlink"><b><a href="Compiler#cite_ref-7">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.etaps.org/">ETAPS</a> - European Joint Conferences on Theory and Practice of Software. Cf. "CC" (Compiler Construction) subsection.</span>
</li>
</ol>
</div>
<h2> <span class="mw-headline" id="References">References</span>
</h2>
<div class="refbegin references-column-count references-column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2;">
<ul>
<li>
<a rel="nofollow" class="external text" href="http://www.informatik.uni-trier.de/~ley/db/books/compiler/index.html">Compiler textbook references</a> A collection of references to mainstream Compiler Construction Textbooks</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Alfred_V._Aho" title="Alfred V. Aho" class="mw-redirect">Aho, Alfred V.</a>; <a href="http://en.m.wikipedia.org/wiki/Ravi_Sethi" title="Ravi Sethi">Sethi, Ravi</a>; and <a href="http://en.m.wikipedia.org/wiki/Jeffrey_D._Ullman" title="Jeffrey D. Ullman" class="mw-redirect">Ullman, Jeffrey D.</a>, <i><a href="http://en.m.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools" title="Compilers: Principles, Techniques, and Tools">Compilers: Principles, Techniques and Tools</a></i> (<a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0201100886" class="internal mw-magiclink-isbn">ISBN 0-201-10088-6</a>) <a rel="nofollow" class="external text" href="http://www.aw.com/catalog/academic/product/0,4096,0201100886,00.html">link to publisher</a>. Also known as “The Dragon Book.”</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Frances_E._Allen" title="Frances E. Allen">Allen, Frances E.</a>, <a rel="nofollow" class="external text" href="http://www.research.ibm.com/journal/rd/255/ibmrd2505Q.pdf">"A History of Language Processor Technology in IBM"</a>, <i>IBM Journal of Research and Development</i>, v.25, no.5, September 1981.</li>
<li>Allen, Randy; and <a href="http://en.m.wikipedia.org/wiki/Ken_Kennedy_(computer_scientist)" title="Ken Kennedy (computer scientist)">Kennedy, Ken</a>, <i>Optimizing Compilers for Modern Architectures</i>, <a href="http://en.m.wikipedia.org/wiki/Morgan_Kaufmann_Publishers" title="Morgan Kaufmann Publishers">Morgan Kaufmann Publishers</a>, 2001. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/1558602860" class="internal mw-magiclink-isbn">ISBN 1-55860-286-0</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Andrew_Appel" title="Andrew Appel">Appel, Andrew Wilson</a>
<ul>
<li>
<i>Modern Compiler Implementation in Java</i>, 2nd edition. <a href="http://en.m.wikipedia.org/wiki/Cambridge_University_Press" title="Cambridge University Press">Cambridge University Press</a>, 2002. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/052182060X" class="internal mw-magiclink-isbn">ISBN 0-521-82060-X</a>
</li>
<li>
<a rel="nofollow" class="external text" href="http://books.google.com/books?id=8APOYafUt-oC&amp;printsec=frontcover"><i>Modern Compiler Implementation in ML</i></a>, Cambridge University Press, 1998. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0521582741" class="internal mw-magiclink-isbn">ISBN 0-521-58274-1</a>
</li>
</ul>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Richard_Bornat" title="Richard Bornat">Bornat, Richard</a>, <a rel="nofollow" class="external text" href="http://www.cs.mdx.ac.uk/staffpages/r_bornat/books/compiling.pdf"><i>Understanding and Writing Compilers: A Do It Yourself Guide</i></a>, Macmillan Publishing, 1979. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0333217322" class="internal mw-magiclink-isbn">ISBN 0-333-21732-2</a>
</li>
<li>Cooper, Keith D., and Torczon, Linda, <i>Engineering a Compiler</i>, Morgan Kaufmann, 2004, <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/1558606998" class="internal mw-magiclink-isbn">ISBN 1-55860-699-8</a>.</li>
<li>Leverett; Cattel; Hobbs; Newcomer; Reiner; Schatz; Wulf, <i>An Overview of the Production Quality Compiler-Compiler Project</i>, in <i><a href="http://en.m.wikipedia.org/wiki/Computer_(magazine)" title="Computer (magazine)">Computer</a></i> 13(8):38-49 (August 1980)</li>
<li>McKeeman, William Marshall; <a href="http://en.m.wikipedia.org/wiki/Jim_Horning" title="Jim Horning">Horning, James J.</a>; Wortman, David B., <a rel="nofollow" class="external text" href="http://www.cs.toronto.edu/XPL/"><i>A Compiler Generator</i></a>, Englewood Cliffs, N.J. : Prentice-Hall, 1970. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0131550772" class="internal mw-magiclink-isbn">ISBN 0-13-155077-2</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Steven_Muchnick" title="Steven Muchnick">Muchnick, Steven</a>, <a rel="nofollow" class="external text" href="http://books.google.com/books?id=Pq7pHwG1_OkC&amp;printsec=frontcover&amp;source=gbs_summary_r&amp;cad=0"><i>Advanced Compiler Design and Implementation</i></a>, Morgan Kaufmann Publishers, 1997. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/1558603204" class="internal mw-magiclink-isbn">ISBN 1-55860-320-4</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Michael_L._Scott" title="Michael L. Scott">Scott, Michael Lee</a>, <a rel="nofollow" class="external text" href="http://books.google.com/books?id=4LMtA2wOsPcC&amp;printsec=frontcover&amp;dq=Programming+Language+Pragmatics"><i>Programming Language Pragmatics</i></a>, Morgan Kaufmann, 2005, 2nd edition, 912 pages. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0126339511" class="internal mw-magiclink-isbn">ISBN 0-12-633951-1</a> (<a rel="nofollow" class="external text" href="http://www.cs.rochester.edu/~scott/pragmatics/">The author's site on this book</a>).</li>
<li>Srikant, Y. N.; Shankar, Priti, <a rel="nofollow" class="external text" href="http://books.google.com/books?id=0K_jIsgyNpoC&amp;printsec=frontcover"><i>The Compiler Design Handbook: Optimizations and Machine Code Generation</i></a>, CRC Press, 2003. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/084931240X" class="internal mw-magiclink-isbn">ISBN 0-8493-1240-X</a>
</li>
<li>Terry, Patrick D., <a rel="nofollow" class="external text" href="http://scifac.ru.ac.za/compilers/conts.htm"><i>Compilers and Compiler Generators: An Introduction with C++</i></a>, International Thomson Computer Press, 1997. <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/1850322988" class="internal mw-magiclink-isbn">ISBN 1-85032-298-8</a>,</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Niklaus_Wirth" title="Niklaus Wirth">Wirth, Niklaus</a>, <a rel="nofollow" class="external text" href="http://www.ethoberon.ethz.ch/WirthPubl/CBEAll.pdf"><i>Compiler Construction</i></a> (<a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0201403536" class="internal mw-magiclink-isbn">ISBN 0-201-40353-6</a>), Addison-Wesley, 1996, 176 pages. Revised November 2005.</li>
</ul>
</div>
<h2> <span class="mw-headline" id="External_links">External links</span>
</h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;"><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x"></td>
<td class="mbox-text plainlist" style="">Wikibooks has a book on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Compiler_Construction" class="extiw" title="wikibooks:Compiler Construction">Compiler Construction</a></b></i>
</td>
</tr></table>
<ul>
<li>
<img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/15px-Wiktionary-logo-en.svg.png" width="15" height="16" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/22px-Wiktionary-logo-en.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/29px-Wiktionary-logo-en.svg.png 2x"> The dictionary definition of <a href="http://en.wiktionary.org/wiki/compiler" class="extiw" title="wiktionary:compiler">compiler</a> at Wiktionary</li>
<li>
<a rel="nofollow" class="external text" href="http://www.dmoz.org/Computers/Programming/Compilers//">Compilers</a> at the <a href="http://en.m.wikipedia.org/wiki/Open_Directory_Project" title="Open Directory Project">Open Directory Project</a>
</li>
<li><a rel="nofollow" class="external text" href="http://la-samhna.de/library/compile/index.html">Compile-Howto</a></li>
<li>
<i><a rel="nofollow" class="external text" href="http://www.diku.dk/hjemmesider/ansatte/torbenm/Basics/">Basics of Compiler Design</a></i> by Torben Ægidius Mogensen</li>
<li>
<a rel="nofollow" class="external text" href="http://www.youtube.com/watch?v=_C5AHaS1mOA">Short animation</a> explaining the key conceptual difference between compilers and interpreters</li>
</ul>

						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 64 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://af.m.wikipedia.org/wiki/Vertalerkonstruksie" lang="af" hreflang="af">Afrikaans</a></li><li><a href="http://ar.m.wikipedia.org/wiki/%D9%85%D8%B5%D8%B1%D9%81_(%D8%A8%D8%B1%D9%85%D8%AC%D8%A9)" lang="ar" hreflang="ar">العربية</a></li><li><a href="http://an.m.wikipedia.org/wiki/Compilador" lang="an" hreflang="an">aragonés</a></li><li><a href="http://ast.m.wikipedia.org/wiki/Compilador" lang="ast" hreflang="ast">asturianu</a></li><li><a href="http://bn.m.wikipedia.org/wiki/%E0%A6%95%E0%A6%AE%E0%A7%8D%E0%A6%AA%E0%A6%BE%E0%A6%87%E0%A6%B2%E0%A6%BE%E0%A6%B0" lang="bn" hreflang="bn">বাংলা</a></li><li><a href="http://be.m.wikipedia.org/wiki/%D0%9A%D0%B0%D0%BC%D0%BF%D1%96%D0%BB%D1%8F%D1%82%D0%B0%D1%80" lang="be" hreflang="be">беларуская</a></li><li><a href="http://be-x-old.m.wikipedia.org/wiki/%D0%9A%D0%B0%D0%BC%D0%BF%D1%96%D0%BB%D1%8F%D1%82%D0%B0%D1%80" lang="be-x-old" hreflang="be-x-old">беларуская (тарашкевіца)‎</a></li><li><a href="http://bg.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B0%D1%82%D0%BE%D1%80" lang="bg" hreflang="bg">български</a></li><li><a href="http://bs.m.wikipedia.org/wiki/Kompajler" lang="bs" hreflang="bs">bosanski</a></li><li><a href="http://ca.m.wikipedia.org/wiki/Compilador" lang="ca" hreflang="ca">català</a></li><li><a href="http://cs.m.wikipedia.org/wiki/P%C5%99eklada%C4%8D" lang="cs" hreflang="cs">česky</a></li><li><a href="http://da.m.wikipedia.org/wiki/Compiler" lang="da" hreflang="da">dansk</a></li><li><a href="http://de.m.wikipedia.org/wiki/Compiler" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://et.m.wikipedia.org/wiki/Kompilaator" lang="et" hreflang="et">eesti</a></li><li><a href="http://el.m.wikipedia.org/wiki/%CE%9C%CE%B5%CF%84%CE%B1%CE%B3%CE%BB%CF%89%CF%84%CF%84%CE%B9%CF%83%CF%84%CE%AE%CF%82" lang="el" hreflang="el">Ελληνικά</a></li><li><a href="http://es.m.wikipedia.org/wiki/Compilador" lang="es" hreflang="es">español</a></li><li><a href="http://eo.m.wikipedia.org/wiki/Tradukilo" lang="eo" hreflang="eo">Esperanto</a></li><li><a href="http://eu.m.wikipedia.org/wiki/Konpiladore" lang="eu" hreflang="eu">euskara</a></li><li><a href="http://fa.m.wikipedia.org/wiki/%D9%85%D8%AA%D8%B1%D8%AC%D9%85_(%D8%B1%D8%A7%DB%8C%D8%A7%D9%86%D9%87)" lang="fa" hreflang="fa">فارسی</a></li><li><a href="http://fr.m.wikipedia.org/wiki/Compilateur" lang="fr" hreflang="fr">français</a></li><li><a href="http://gl.m.wikipedia.org/wiki/Compilador" lang="gl" hreflang="gl">galego</a></li><li><a href="http://ko.m.wikipedia.org/wiki/%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC" lang="ko" hreflang="ko">한국어</a></li><li><a href="http://hi.m.wikipedia.org/wiki/%E0%A4%95%E0%A4%AE%E0%A5%8D%E0%A4%AA%E0%A4%BE%E0%A4%87%E0%A4%B2%E0%A4%B0" lang="hi" hreflang="hi">हिन्दी</a></li><li><a href="http://hsb.m.wikipedia.org/wiki/Kompilator" lang="hsb" hreflang="hsb">hornjoserbsce</a></li><li><a href="http://hr.m.wikipedia.org/wiki/Jezi%C4%8Dni_prevoditelj" lang="hr" hreflang="hr">hrvatski</a></li><li><a href="http://id.m.wikipedia.org/wiki/Kompilator" lang="id" hreflang="id">Bahasa Indonesia</a></li><li><a href="http://ia.m.wikipedia.org/wiki/Compilator" lang="ia" hreflang="ia">interlingua</a></li><li><a href="http://is.m.wikipedia.org/wiki/%C3%9E%C3%BD%C3%B0andi_(t%C3%B6lvunarfr%C3%A6%C3%B0i)" lang="is" hreflang="is">íslenska</a></li><li><a href="http://it.m.wikipedia.org/wiki/Compilatore" lang="it" hreflang="it">italiano</a></li><li><a href="http://he.m.wikipedia.org/wiki/%D7%9E%D7%94%D7%93%D7%A8" lang="he" hreflang="he">עברית</a></li><li><a href="http://ka.m.wikipedia.org/wiki/%E1%83%99%E1%83%9D%E1%83%9B%E1%83%9E%E1%83%98%E1%83%9A%E1%83%90%E1%83%A2%E1%83%9D%E1%83%A0%E1%83%98" lang="ka" hreflang="ka">ქართული</a></li><li><a href="http://kk.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80" lang="kk" hreflang="kk">қазақша</a></li><li><a href="http://ky.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B5%D1%80" lang="ky" hreflang="ky">Кыргызча</a></li><li><a href="http://la.m.wikipedia.org/wiki/Compilatrum" lang="la" hreflang="la">Latina</a></li><li><a href="http://lv.m.wikipedia.org/wiki/Kompilators" lang="lv" hreflang="lv">latviešu</a></li><li><a href="http://lt.m.wikipedia.org/wiki/Kompiliatorius" lang="lt" hreflang="lt">lietuvių</a></li><li><a href="http://hu.m.wikipedia.org/wiki/Ford%C3%ADt%C3%B3program" lang="hu" hreflang="hu">magyar</a></li><li><a href="http://mk.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B0%D1%98%D0%BB%D0%B5%D1%80" lang="mk" hreflang="mk">македонски</a></li><li><a href="http://ml.m.wikipedia.org/wiki/%E0%B4%95%E0%B4%82%E0%B4%AA%E0%B5%88%E0%B4%B2%E0%B5%BC" lang="ml" hreflang="ml">മലയാളം</a></li><li><a href="http://ms.m.wikipedia.org/wiki/Penyusun" lang="ms" hreflang="ms">Bahasa Melayu</a></li><li><a href="http://nl.m.wikipedia.org/wiki/Compiler" lang="nl" hreflang="nl">Nederlands</a></li><li><a href="http://ne.m.wikipedia.org/wiki/%E0%A4%95%E0%A4%AE%E0%A5%8D%E0%A4%AA%E0%A4%BE%E0%A4%87%E0%A4%B2%E0%A4%B0" lang="ne" hreflang="ne">नेपाली</a></li><li><a href="http://ja.m.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9" lang="ja" hreflang="ja">日本語</a></li><li><a href="http://no.m.wikipedia.org/wiki/Kompilator" lang="no" hreflang="no">norsk (bokmål)‎</a></li><li><a href="http://mhr.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D0%B9" lang="mhr" hreflang="mhr">олык марий</a></li><li><a href="http://pl.m.wikipedia.org/wiki/Kompilator" lang="pl" hreflang="pl">polski</a></li><li><a href="http://pt.m.wikipedia.org/wiki/Compilador" lang="pt" hreflang="pt">português</a></li><li><a href="http://ro.m.wikipedia.org/wiki/Compilator" lang="ro" hreflang="ro">română</a></li><li><a href="http://ru.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80" lang="ru" hreflang="ru">русский</a></li><li><a href="http://simple.m.wikipedia.org/wiki/Compiler" lang="simple" hreflang="simple">Simple English</a></li><li><a href="http://sk.m.wikipedia.org/wiki/Kompil%C3%A1tor_(programovanie)" lang="sk" hreflang="sk">slovenčina</a></li><li><a href="http://sl.m.wikipedia.org/wiki/Prevajalnik" lang="sl" hreflang="sl">slovenščina</a></li><li><a href="http://sr.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B0%D1%82%D0%BE%D1%80" lang="sr" hreflang="sr">српски / srpski</a></li><li><a href="http://fi.m.wikipedia.org/wiki/Ohjelmointikielen_k%C3%A4%C3%A4nt%C3%A4j%C3%A4" lang="fi" hreflang="fi">suomi</a></li><li><a href="http://sv.m.wikipedia.org/wiki/Kompilator" lang="sv" hreflang="sv">svenska</a></li><li><a href="http://ta.m.wikipedia.org/wiki/%E0%AE%A8%E0%AE%BF%E0%AE%B0%E0%AE%B2%E0%AF%8D%E0%AE%AE%E0%AF%8A%E0%AE%B4%E0%AE%BF%E0%AE%AE%E0%AE%BE%E0%AE%B1%E0%AF%8D%E0%AE%B1%E0%AE%BF" lang="ta" hreflang="ta">தமிழ்</a></li><li><a href="http://te.m.wikipedia.org/wiki/%E0%B0%95%E0%B0%82%E0%B0%AA%E0%B1%88%E0%B0%B2%E0%B0%B0%E0%B1%8D" lang="te" hreflang="te">తెలుగు</a></li><li><a href="http://th.m.wikipedia.org/wiki/%E0%B8%84%E0%B8%AD%E0%B8%A1%E0%B9%84%E0%B8%9E%E0%B9%80%E0%B8%A5%E0%B8%AD%E0%B8%A3%E0%B9%8C" lang="th" hreflang="th">ไทย</a></li><li><a href="http://tr.m.wikipedia.org/wiki/Derleyici" lang="tr" hreflang="tr">Türkçe</a></li><li><a href="http://uk.m.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D1%96%D0%BB%D1%8F%D1%82%D0%BE%D1%80" lang="uk" hreflang="uk">українська</a></li><li><a href="http://ur.m.wikipedia.org/wiki/Compiler" lang="ur" hreflang="ur">اردو</a></li><li><a href="http://vi.m.wikipedia.org/wiki/Tr%C3%ACnh_bi%C3%AAn_d%E1%BB%8Bch" lang="vi" hreflang="vi">Tiếng Việt</a></li><li><a href="http://yi.m.wikipedia.org/wiki/%D7%A7%D7%90%D7%9E%D7%A4%D7%99%D7%99%D7%9C%D7%A2%D7%A8" lang="yi" hreflang="yi">ייִדיש</a></li><li><a href="http://zh.m.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8" lang="zh" hreflang="zh">中文</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia ®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Compiler&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Compiler&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>