<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>Objective-C - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Objective-C","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Objective-C" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Objective-C"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">Objective-C</h1>			
<table class="metadata plainlinks ambox ambox-style ambox-More_footnotes" style=""><tr>
<td class="mbox-image">
<div style="width: 52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/60px-Text_document_with_red_question_mark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/80px-Text_document_with_red_question_mark.svg.png 2x"></div>
</td>
<td class="mbox-text" style=""><span class="mbox-text-span">This article includes a <a href="Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, but <b>its sources remain unclear because it has insufficient <a href="http://en.m.wikipedia.org/wiki/Wikipedia:INCITE" title="Wikipedia:INCITE" class="mw-redirect">inline citations</a></b>. <span class="hide-when-compact">Please help to <a href="http://en.m.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by <a href="http://en.m.wikipedia.org/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">introducing</a> more precise citations.</span> <small><i>(February 2011)</i></small> </span></td>
</tr></table>
<table class="infobox vevent" cellspacing="3" style="border-spacing: 3px; width:22em;">
<caption class="summary" style="">Objective-C</caption>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Programming_paradigm" title="Programming paradigm">Paradigm(s)</a></th>
<td class="" style="">
<a href="http://en.m.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflective</a>, <a href="http://en.m.wikipedia.org/wiki/Class-based_programming" title="Class-based programming">class-based</a> <a href="Object-oriented_programming" title="Object-oriented programming">object-oriented</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Appeared in</th>
<td class="" style="">1983</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Designed by</th>
<td class="organiser" style="">
<a href="http://en.m.wikipedia.org/wiki/Brad_Cox" title="Brad Cox">Brad Cox</a> and Tom Love</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Software_developer" title="Software developer">Developer</a></th>
<td class="" style=""><a href="http://en.m.wikipedia.org/wiki/Apple_Inc." title="Apple Inc.">Apple</a></td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Software_release_life_cycle" title="Software release life cycle">Stable release</a></th>
<td class="" style="">2.0 (October 26, 2007<span style="display:none">Â (<span class="bday dtstart published updated">2007-10-26</span>)</span>)</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Type_system" title="Type system">Typing discipline</a></th>
<td class="" style="">
<a href="Static_typing" title="Static typing" class="mw-redirect">static</a>, <a href="http://en.m.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic</a>, <a href="Weak_typing" title="Weak typing">weak</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Programming_language_implementation" title="Programming language implementation">Major implementations</a></th>
<td class="" style="">
<a href="Clang" title="Clang">Clang</a>, <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Influenced by</th>
<td class="" style="">
<a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a>, <a href="Smalltalk" title="Smalltalk">Smalltalk</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Influenced</th>
<td class="" style="">
<a href="Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="http://en.m.wikipedia.org/wiki/Objective-J" title="Objective-J">Objective-J</a>, <a href="http://en.m.wikipedia.org/wiki/TOM_(object-oriented_programming_language)" title="TOM (object-oriented programming language)">TOM</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Operating_system" title="Operating system">OS</a></th>
<td class="" style=""><a href="Cross-platform" title="Cross-platform">Cross-platform</a></td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Usual <a href="Filename_extension" title="Filename extension">filename extensions</a>
</th>
<td class="" style="">.h, .m, .mm</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Website</th>
<td class="" style=""><span class="nowrap"><a rel="nofollow" class="external text" href="http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/">Apple Developer â Objective-C</a></span></td>
</tr>
<tr>
<td colspan="2" class="" style="text-align:center;">
<a href="File:Wikibooks-logo-en.svg" class="image" title="Wikibooks logo"><img alt="Wikibooks logo" src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Wikibooks-logo-en.svg/14px-Wikibooks-logo-en.svg.png" width="14" height="14" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Wikibooks-logo-en.svg/21px-Wikibooks-logo-en.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Wikibooks-logo-en.svg/28px-Wikibooks-logo-en.svg.png 2x"></a> <a href="http://en.wikibooks.org/wiki/Objective-C_Programming" class="extiw" title="wikibooks:Objective-C Programming">Objective-C Programming</a> at <a href="Wikibooks" title="Wikibooks">Wikibooks</a>
</td>
</tr>
</table>
<p><b>Objective-C</b> is a <a href="http://en.m.wikipedia.org/wiki/General-purpose_programming_language" title="General-purpose programming language">general-purpose</a>, <a href="http://en.m.wikipedia.org/wiki/High-level_programming_language" title="High-level programming language">high-level</a>, <a href="Object-oriented_programming" title="Object-oriented programming">object-oriented</a> <a href="Programming_language" title="Programming language">programming language</a> that adds <a href="Smalltalk" title="Smalltalk">Smalltalk</a>-style <a href="http://en.m.wikipedia.org/wiki/Message_passing" title="Message passing">messaging</a> to the <a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> programming language. It is the main programming language used by <a href="http://en.m.wikipedia.org/wiki/Apple_Inc." title="Apple Inc.">Apple</a> for the <a href="http://en.m.wikipedia.org/wiki/OS_X" title="OS X">OS X</a> and <a href="http://en.m.wikipedia.org/wiki/IOS" title="IOS">iOS</a> <a href="http://en.m.wikipedia.org/wiki/Operating_systems" title="Operating systems" class="mw-redirect">operating systems</a> and their respective <a href="http://en.m.wikipedia.org/wiki/API" title="API" class="mw-redirect">APIs</a>, <a href="http://en.m.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a> and <a href="http://en.m.wikipedia.org/wiki/Cocoa_Touch" title="Cocoa Touch">Cocoa Touch</a>.</p>
<p>Originally developed in the early 1980s, it was selected as the main language used by <a href="http://en.m.wikipedia.org/wiki/NeXT" title="NeXT">NeXT</a> for its <a href="http://en.m.wikipedia.org/wiki/NEXTSTEP" title="NEXTSTEP" class="mw-redirect">NeXTSTEP</a> operating system, from which OS X and iOS are derived.<sup id="cite_ref-1" class="reference"><a href="Objective-C#cite_note-1"><span>[</span>1<span>]</span></a></sup> Generic Objective-C programs that do not use these libraries can also be compiled for any system supported by <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a> or <a href="Clang" title="Clang">Clang</a>.</p>
<h2> <span class="mw-headline" id="History">History</span>
</h2>
<p>Objective-C was created primarily by <a href="http://en.m.wikipedia.org/wiki/Brad_Cox" title="Brad Cox">Brad Cox</a> and Tom Love in the early 1980s at their company <a href="http://en.m.wikipedia.org/wiki/Stepstone" title="Stepstone">Stepstone</a>. Both had been introduced to <a href="Smalltalk" title="Smalltalk">Smalltalk</a> while at <a href="http://en.m.wikipedia.org/wiki/ITT_Corporation" title="ITT Corporation">ITT Corporation</a>'s Programming Technology Center in 1981. The earliest work on Objective-C traces back to around that time.<sup id="cite_ref-2" class="reference"><a href="Objective-C#cite_note-2"><span>[</span>2<span>]</span></a></sup> Cox was intrigued by problems of true reusability in <a href="http://en.m.wikipedia.org/wiki/Software_engineering" title="Software engineering">software design</a> and programming. He realized that a language like Smalltalk would be invaluable in building development environments for system developers at ITT. However, he and Tom Love also recognized that backward compatibility with C was critically important in ITT's telecom engineering milieu.<sup id="cite_ref-love2009_3-0" class="reference"><a href="Objective-C#cite_note-love2009-3"><span>[</span>3<span>]</span></a></sup> Cox began writing a pre-processor for C to add some of the capabilities of Smalltalk. He soon had a working implementation of an object-oriented extension to the C language, which he called "OOPC" for Object-Oriented Pre-Compiler.<sup id="cite_ref-4" class="reference"><a href="Objective-C#cite_note-4"><span>[</span>4<span>]</span></a></sup> Love was hired by Schlumberger Research in 1982 and had the opportunity to acquire the first commercial copy of Smalltalk-80, which further influenced the development of their brainchild.</p>
<p>In order to demonstrate that real progress could be made, Cox showed that making interchangeable <a href="http://en.m.wikipedia.org/wiki/Software_component" title="Software component" class="mw-redirect">software components</a> really needed only a few practical changes to existing tools. Specifically, they needed to support objects in a flexible manner, come supplied with a usable set of libraries, and allow for the code (and any resources needed by the code) to be bundled into a single cross-platform format.</p>
<p>Love and Cox eventually formed a new venture, <a href="http://en.m.wikipedia.org/wiki/Stepstone" title="Stepstone">Productivity Products International (PPI)</a>, to commercialize their product, which coupled an Objective-C compiler with class libraries. In 1986, Cox published the main description of Objective-C in its original form in the book <i>Object-Oriented Programming, An Evolutionary Approach</i>. Although he was careful to point out that there is more to the problem of reusability than just the language, Objective-C often found itself compared feature for feature with other languages.</p>
<h3> <span class="mw-headline" id="Popularization_through_NeXT">Popularization through NeXT</span>
</h3>
<p>After <a href="http://en.m.wikipedia.org/wiki/Steve_Jobs" title="Steve Jobs">Steve Jobs</a> left <a href="http://en.m.wikipedia.org/wiki/Apple_Inc." title="Apple Inc.">Apple Inc.</a>, he started the company <a href="http://en.m.wikipedia.org/wiki/NeXT" title="NeXT">NeXT</a>. In 1988, NeXT licensed Objective-C from StepStone (the new name of PPI, the owner of the Objective-C trademark) and extended the <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a> compiler to support Objective-C, and developed the <a href="http://en.m.wikipedia.org/wiki/Application_Kit" title="Application Kit">AppKit</a> and <a href="http://en.m.wikipedia.org/wiki/Foundation_Kit" title="Foundation Kit">Foundation Kit</a> libraries on which the <a href="http://en.m.wikipedia.org/wiki/NeXTstep" title="NeXTstep" class="mw-redirect">NeXTstep</a> user interface and interface builder were based. While the NeXT workstations failed to make a great impact in the marketplace, the tools were widely lauded in the industry. This led NeXT to drop hardware production and focus on software tools, selling NeXTstep (and OpenStep) as a platform for custom programming.</p>
<p>The work to extend <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a> was led by <span class="new" title="Steve Naroff (page does not exist)">Steve Naroff</span>, who joined NeXT from StepStone. The compiler changes, but not the runtime libraries were made available as per <a href="http://en.m.wikipedia.org/wiki/GNU_Public_License" title="GNU Public License" class="mw-redirect">GPL</a> license terms rendering the open source contribution unusable to the general public. This led to other parties developing such under open source license. Later, <span class="new" title="Steve Naroff (page does not exist)">Steve Naroff</span> was also principal contributor to work at Apple to build the Objective-C frontend to <a href="Clang" title="Clang">Clang</a>.</p>
<p>The <a href="http://en.m.wikipedia.org/wiki/GNU" title="GNU">GNU</a> project started work on its free software implementation of Cocoa, named <a href="http://en.m.wikipedia.org/wiki/GNUstep" title="GNUstep">GNUstep</a>, based on the <a href="http://en.m.wikipedia.org/wiki/OpenStep" title="OpenStep">OpenStep</a> standard.<sup id="cite_ref-GNUstep_site_5-0" class="reference"><a href="Objective-C#cite_note-GNUstep_site-5"><span>[</span>5<span>]</span></a></sup> Dennis Glatting wrote the first GNU Objective-C <a href="http://en.m.wikipedia.org/wiki/Run_time_system" title="Run time system" class="mw-redirect">runtime</a> in 1992. The GNU Objective-C runtime, which has been in use since 1993, is the one developed by <span class="new" title="Kresten Krab Thorup (page does not exist)">Kresten Krab Thorup</span> when he was a university student in <a href="http://en.m.wikipedia.org/wiki/Denmark" title="Denmark">Denmark</a>. Thorup also worked at NeXT from 1993 to 1996.</p>
<p>After acquiring NeXT in 1996, <a href="http://en.m.wikipedia.org/wiki/Apple_Computer" title="Apple Computer" class="mw-redirect">Apple Computer</a> used OpenStep in its new operating system, <a href="http://en.m.wikipedia.org/wiki/Mac_OS_X" title="Mac OS X" class="mw-redirect">Mac OS X</a>. This included Objective-C and NeXT's Objective-C based developer tool, <a href="http://en.m.wikipedia.org/wiki/Project_Builder" title="Project Builder">Project Builder</a> (which had been expanded and is now called <a href="Xcode" title="Xcode">Xcode</a>), as well as its interface design tool, <a href="http://en.m.wikipedia.org/wiki/Interface_Builder" title="Interface Builder">Interface Builder</a>. Most of Apple's present-day <a href="http://en.m.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa API</a> is based on OpenStep interface objects, and is the most significant Objective-C environment being used for active development.</p>
<h2> <span class="mw-headline" id="Syntax">Syntax</span>
</h2>
<p>Objective-C is a thin layer on top of C, and moreover is a <i>strict <a href="Superset" title="Superset" class="mw-redirect">superset</a></i> of C; it is possible to compile any C program with an Objective-C compiler, and to freely include C code within an Objective-C class.</p>
<p>Objective-C derives its object syntax from <a href="Smalltalk" title="Smalltalk">Smalltalk</a>. All of the syntax for non-object-oriented operations (including primitive variables, pre-processing, expressions, function declarations, and function calls) are identical to that of C, while the syntax for object-oriented features is an implementation of Smalltalk-style messaging.</p>
<h3> <span class="mw-headline" id="Messages">Messages</span>
</h3>
<p>The Objective-C model of object-oriented programming is based on <a href="http://en.m.wikipedia.org/wiki/Message_passing" title="Message passing">message passing</a> to object instances. In Objective-C one does not simply <i>call a method</i>; one <i>sends a message</i>. This is unlike the <a href="http://en.m.wikipedia.org/wiki/Simula" title="Simula">Simula</a>-style programming model used by <a href="C++" title="C++">C++</a>. The difference between these two concepts is in how the code referenced by the method or message name is executed. In a Simula-style language, the method name is in most cases <a href="http://en.m.wikipedia.org/wiki/Name_binding" title="Name binding">bound</a> to a section of code in the target class by the compiler. In <a href="Smalltalk" title="Smalltalk">Smalltalk</a> and Objective-C, the target of a message is resolved at runtime, with the receiving object itself interpreting the message. A method is identified by a <i>selector</i> or <tt>SEL</tt> â a <tt>NULL</tt>-terminated string representing its name â and resolved to a C method <a href="Pointer_(computer_programming)" title="Pointer (computer programming)">pointer</a> implementing it: an <tt>IMP</tt>.<sup id="cite_ref-6" class="reference"><a href="Objective-C#cite_note-6"><span>[</span>6<span>]</span></a></sup> A consequence of this is that the message-passing system has no type checking. The object to which the message is directed â the <i>receiver</i> â is not guaranteed to respond to a message, and if it does not, it simply raises an exception.<sup id="cite_ref-7" class="reference"><a href="Objective-C#cite_note-7"><span>[</span>7<span>]</span></a></sup></p>
<p>Sending the message <tt>method</tt> to the object pointed to by the pointer <tt>obj</tt> would require the following code in <a href="C++" title="C++">C++</a>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
obj<span class="sy2">-</span><span class="sy1">&gt;</span>method<span class="br0">(</span>argument<span class="br0">)</span><span class="sy4">;</span>
</pre>
</div>
</div>
<p>In Objective-C, this is written as follows:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="br0">[</span>obj method<span class="sy0">:</span>argument<span class="br0">]</span>;
</pre>
</div>
</div>
<p>Both styles of programming have their strengths and weaknesses. Object-oriented programming in the Simula style allows multiple inheritances and faster execution by using <a href="http://en.m.wikipedia.org/wiki/Compile-time_binding" title="Compile-time binding" class="mw-redirect">compile-time binding</a> whenever possible, but it does not support <a href="http://en.m.wikipedia.org/wiki/Dynamic_dispatch" title="Dynamic dispatch">dynamic binding</a> by default. It also forces all methods to have a corresponding implementation unless they are <a href="http://en.m.wikipedia.org/wiki/Method_(computer_programming)#Abstract_methods" title="Method (computer programming)">abstract</a>. Smalltalk-style programming allows messages to go unimplemented, with the method resolved to its implementation at runtime. For example, a message may be sent to a collection of objects, to which only some will be expected to respond, without fear of producing runtime errors. Message passing also does not require that an object be defined at compile time. An implementation is still required for the method to be called in the derived object. (See the <a href="Objective-C#Dynamic_typing">dynamic typing</a> section below for more advantages of dynamic (late) binding.)</p>
<h3> <span class="mw-headline" id="Interfaces_and_implementations">Interfaces and implementations</span>
</h3>
<p>Objective-C requires that the interface and implementation of a class be in separately declared code blocks. By convention, developers place the interface in a <a href="Header_file" title="Header file">header file</a> and the implementation in a code file. The header files, normally suffixed .h, are similar to C header files while the implementation (method) files, normally suffixed .m, can be very similar to C code files.</p>
<h4> <span class="mw-headline" id="Interface">Interface</span>
</h4>
<p>The interface of a class is usually defined in a header file. A common convention is to name the header file after the name of the class, e.g. <tt>Ball.h</tt> would contain the interface for the class <tt>Ball</tt>.</p>
<p>An interface declaration takes the form:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@interface</span> classname <span class="sy0">:</span> superclassname <span class="br0">{</span>
 <span class="co2">// instance variables</span>
<span class="br0">}</span>
<span class="sy0">+</span> classMethod1;
<span class="sy0">+</span> <span class="br0">(</span>return_type<span class="br0">)</span>classMethod2;
<span class="sy0">+</span> <span class="br0">(</span>return_type<span class="br0">)</span>classMethod3<span class="sy0">:</span><span class="br0">(</span>param1_type<span class="br0">)</span>param1_varName;
 
<span class="sy0">-</span> <span class="br0">(</span>return_type<span class="br0">)</span>instanceMethod1<span class="sy0">:</span><span class="br0">(</span>param1_type<span class="br0">)</span>param1_varName <span class="sy0">:</span><span class="br0">(</span>param2_type<span class="br0">)</span>param2_varName;
<span class="sy0">-</span> <span class="br0">(</span>return_type<span class="br0">)</span>instanceMethod2WithParameter<span class="sy0">:</span><span class="br0">(</span>param1_type<span class="br0">)</span>param1_varName otherParameter<span class="sy0">:</span><span class="br0">(</span>param2_type<span class="br0">)</span>param2_varName;
<span class="kw1">@end</span>
</pre>
</div>
</div>
<p>In the above, plus signs denote <a href="http://en.m.wikipedia.org/wiki/Class_method" title="Class method" class="mw-redirect">class methods</a>, or methods that can be called on the class itself (not on an instance), and minus signs denote <a href="http://en.m.wikipedia.org/wiki/Instance_method" title="Instance method" class="mw-redirect">instance methods</a>, which can only be called on a particular instance of the class. Class methods also have no access to instance variables.</p>
<p>The code above is roughly equivalent to the following <a href="C++" title="C++">C++</a> interface:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="kw2">class</span> classname <span class="sy4">:</span> <span class="kw2">public</span> superclassname <span class="br0">{</span>
 <span class="kw2">protected</span><span class="sy4">:</span>
 <span class="co1">// instance variables</span>
 
 <span class="kw2">public</span><span class="sy4">:</span>
 <span class="co1">// Class (static) functions</span>
 <span class="kw4">static</span> <span class="kw4">void</span> <span class="sy2">*</span> classMethod1<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
 <span class="kw4">static</span> return_type classMethod2<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
 <span class="kw4">static</span> return_type classMethod3<span class="br0">(</span>param1_type param1_varName<span class="br0">)</span><span class="sy4">;</span>
 
 <span class="co1">// Instance (member) functions</span>
 return_type instanceMethod1 <span class="br0">(</span>param1_type param1_varName, param2_type param2_varName<span class="br0">)</span><span class="sy4">;</span>
 return_type instanceMethod2WithParameter <span class="br0">(</span>param1_type param1_varName, param2_type param2_varName<span class="sy1">=</span><span class="kw1">default</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span><span class="sy4">;</span>
</pre>
</div>
</div>
<p>Note that <tt>instanceMethod2WithParameter:otherParameter:</tt> demonstrates the interleaving of selector segments with argument expressions, for which there is no direct equivalent in C/C++.</p>
<p>Return types can be any standard C type, a pointer to a generic Objective-C object, or a pointer to a specific type of object such as NSArray *, NSImage *, or NSString *. The default return type is the generic Objective-C type <tt>id</tt>.</p>
<p>Method arguments begin with a colon followed by the expected argument type in parentheses and the argument name. In some cases (e.g. when writing system APIs) it is useful to add descriptive text before each parameter.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setRangeStart<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>start end<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>end;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>importDocumentWithName<span class="sy0">:</span><span class="br0">(</span><span class="kw5">NSString</span> <span class="sy0">*</span><span class="br0">)</span>name withSpecifiedPreferences<span class="sy0">:</span>
<span class="br0">(</span>Preferences <span class="sy0">*</span><span class="br0">)</span>prefs beforePage<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>insertPage;
</pre>
</div>
</div>
<h4> <span class="mw-headline" id="Implementation">Implementation</span>
</h4>
<p>The interface only declares the class interface and not the methods themselves: the actual code is written in the implementation file. Implementation (method) files normally have the file extension <code>.m</code>, which originally signified "messages".<sup id="cite_ref-8" class="reference"><a href="Objective-C#cite_note-8"><span>[</span>8<span>]</span></a></sup></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@implementation</span> classname
<span class="sy0">+</span> <span class="br0">(</span>return_type<span class="br0">)</span>classMethod
<span class="br0">{</span>
 <span class="co2">// implementation</span>
<span class="br0">}</span>
<span class="sy0">-</span> <span class="br0">(</span>return_type<span class="br0">)</span>instanceMethod
<span class="br0">{</span>
 <span class="co2">// implementation</span>
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre>
</div>
</div>
<p>Methods are written using their interface declarations. Comparing Objective-C and C:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>method<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>i
<span class="br0">{</span>
 <span class="kw1">return</span> <span class="br0">[</span>self square_root<span class="sy0">:</span>i<span class="br0">]</span>;
<span class="br0">}</span>
</pre>
</div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> <span class="kw2">function</span> <span class="br0">(</span><span class="kw4">int</span> i<span class="br0">)</span>
<span class="br0">{</span>
 <span class="kw1">return</span> square_root<span class="br0">(</span>i<span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>The syntax allows pseudo-<a href="http://en.m.wikipedia.org/wiki/Named_parameter" title="Named parameter">naming of arguments</a>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>changeColorToRed<span class="sy0">:</span><span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>red green<span class="sy0">:</span><span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>green blue<span class="sy0">:</span><span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>blue;
 
<span class="br0">[</span>myColor changeColorToRed<span class="sy0">:</span><span class="nu0">5.0</span> green<span class="sy0">:</span><span class="nu0">2.0</span> blue<span class="sy0">:</span><span class="nu0">6.0</span><span class="br0">]</span>;
</pre>
</div>
</div>
<p>Internal representations of a method vary between different implementations of Objective-C. If myColor is of the class <tt>Color</tt>, instance method <tt>-changeColorToRed:green:blue:</tt> might be internally labeled <tt>_i_Color_changeColorToRed_green_blue</tt>. The <tt>i</tt> is to refer to an instance method, with the class and then method names appended and colons changed to underscores. As the order of parameters is part of the method name, it cannot be changed to suit coding style or expression as with true named parameters.</p>
<p>However, internal names of the function are rarely used directly. Generally, messages are converted to function calls defined in the Objective-C runtime library. It is not necessarily known at link time which method will be called because the class of the receiver (the object being sent the message) need not be known until runtime.</p>
<h4> <span class="mw-headline" id="Instantiation">Instantiation</span>
</h4>
<p>Once an Objective-C class is written, it can be instantiated. This is done by first allocating an uninitialized instance of the class (an object) and then by initializing it. An object is not fully functional until both steps have been completed. These steps should be accomplished with a single line of code so that there is never an allocated object that hasn't undergone initialization (and because it is not advisable to keep the intermediate result since <code>-init</code> can return a different object than that which it is called on).</p>
<p>Instantiation with the default, no-parameter initializer:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
MyObject <span class="sy0">*</span>o <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span>MyObject alloc<span class="br0">]</span> init<span class="br0">]</span>;
</pre>
</div>
</div>
<p>Instantiation with a custom initializer:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
MyObject <span class="sy0">*</span>o <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span>MyObject alloc<span class="br0">]</span> initWithString<span class="sy0">:</span>myString<span class="br0">]</span>;
</pre>
</div>
</div>
<p>In the case where no custom initialization is being performed, the "new" method can often be used in place of the alloc-init messages:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
MyObject <span class="sy0">*</span>o <span class="sy0">=</span> <span class="br0">[</span>MyObject new<span class="br0">]</span>;
</pre>
</div>
</div>
<p>Also, some classes implement class method initializers. Like <code>+new</code>, they combine <code>+alloc</code> and <code>-init</code>, but unlike <code>+new</code>, they return an autoreleased instance. Some class method initializers take parameters:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
MyObject <span class="sy0">*</span>o <span class="sy0">=</span> <span class="br0">[</span>MyObject object<span class="br0">]</span>;
MyObject <span class="sy0">*</span>o2 <span class="sy0">=</span> <span class="br0">[</span>MyObject objectWithString<span class="sy0">:</span>myString<span class="br0">]</span>;
</pre>
</div>
</div>
<p>The <i>alloc</i> message allocates enough memory to hold all the instance variables for an object, sets all the instance variables to zero values, and turns the memory into an instance of the class; at no point during the initialization is the memory an instance of the superclass.</p>
<p>The <i>init</i> message performs the set-up of the instance upon creation. The <i>init</i> method is often written as follows:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>init <span class="br0">{</span>
    self <span class="sy0">=</span> <span class="br0">[</span>super init<span class="br0">]</span>;
    <span class="kw1">if</span> <span class="br0">(</span>self<span class="br0">)</span> <span class="br0">{</span>
        <span class="co2">// perform initialization of object here</span>
    <span class="br0">}</span>
    <span class="kw1">return</span> self;
<span class="br0">}</span>
</pre>
</div>
</div>
<p>In the above example, notice the <code>id</code> return type. This type stands for "pointer to any object" in Objective-C (See the <a href="Objective-C#Dynamic_typing">Dynamic typing</a> section).</p>
<p>The initializer pattern is used in order to assure that the object is properly initialized by its superclass before the init method performs its initialization. It performs the following actions:</p>
<ol>
<li>self = [super init]
<dl>
<dd>Sends the superclass instance an <i>init</i> message and assigns the result to <i>self</i> (pointer to the current object).</dd>
</dl>
</li>
<li>if (self)
<dl>
<dd>Checks if the returned object pointer is valid before performing any initialization.</dd>
</dl>
</li>
<li>return self
<dl>
<dd>Returns the value of self to the caller.</dd>
</dl>
</li>
</ol>
<p>A non-valid object pointer has the value <i>nil</i>; conditional statements like "if" treat nil like a null pointer, so the initialization code will not be executed if [super init] returned nil. If there is an error in initialization the init method should perform any necessary cleanup, including sending a "release" message to self, and return <i>nil</i> to indicate that initialization failed, any checking for such errors must only be performed after having called the superclass initialization to ensure that destroying the object will be done correctly.</p>
<p>If a class has more than one initialization method, only one of them (the "dedicated initializer") needs to follow this pattern; others should call the dedicated initializer instead of the superclass initializer.</p>
<h3> <span class="mw-headline" id="Protocols">Protocols</span>
</h3>
<p>Objective-C was extended at <a href="http://en.m.wikipedia.org/wiki/NeXT" title="NeXT">NeXT</a> to introduce the concept of <a href="http://en.m.wikipedia.org/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a> of specification, but not implementation, through the introduction of <a href="http://en.m.wikipedia.org/wiki/Protocol_(object-oriented_programming)" title="Protocol (object-oriented programming)">protocols</a>. This is a pattern achievable either as an abstract multiply inherited base class in <a href="C++" title="C++">C++</a>, or as an "interface" (as in Java and C#). Objective-C makes use of ad hoc protocols called <i>informal protocols</i> and compiler-enforced protocols called <i>formal protocols</i>.</p>
<p>An informal protocol is a list of methods that a class can opt to implement. It is specified in the documentation, since it has no presence in the language. Informal protocols often include optional methods, which, if implemented, can change the behavior of a class. For example, a text field class might have a <a href="http://en.m.wikipedia.org/wiki/Delegation_(programming)" title="Delegation (programming)">delegate</a> that implements an informal protocol with an optional method for performing auto-completion of user-typed text. The text field discovers whether the delegate implements that method (via <a href="http://en.m.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflection</a>) and, if so, calls the delegate's method to support the auto-complete feature.</p>
<p>A formal protocol is similar to an <a href="http://en.m.wikipedia.org/wiki/Interface_(computer_science)" title="Interface (computer science)" class="mw-redirect">interface</a> in Java or C#. It is a list of methods that any class can declare itself to implement. Versions of Objective-C before 2.0 required that a class must implement all methods in a protocol it declares itself as adopting; the compiler will emit an error if the class does not implement every method from its declared protocols. Objective-C 2.0 added support for marking certain methods in a protocol optional, and the compiler will not enforce implementation of optional methods.</p>
<p>A class must be declared to implement that protocol to be said to conform to it. This is detectable at runtime. Formal protocols cannot provide any implementations, they simply assure callers that classes that conform to the protocol will provide implementations. In the NeXT/Apple library, protocols are frequently used by the Distributed Objects system to represent the capabilities of an object executing on a remote system.</p>
<p>The syntax</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@protocol</span> <span class="kw6">NSLocking</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>lock;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>unlock;
<span class="kw1">@end</span>
</pre>
</div>
</div>
<p>denotes that there is the abstract idea of locking. By stating that the protocol is implemented in the class definition:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@interface</span> <span class="kw5">NSLock</span> <span class="sy0">:</span> <span class="kw5">NSObject</span> &lt;NSLocking&gt;
<span class="co2">//...</span>
<span class="kw1">@end</span>
</pre>
</div>
</div>
<p>instances of SomeClass claim that they will provide an implementation for the two instance methods using whatever means they choose. Another example use of abstract specification is describing the desired behaviors of <a href="http://en.m.wikipedia.org/wiki/Plug-in_(computing)" title="Plug-in (computing)">plug-ins</a> without constraining what the implementation hierarchy should be.</p>
<h3> <span class="mw-headline" id="Dynamic_typing">Dynamic typing</span>
</h3>
<p>Objective-C, like Smalltalk, can use <a href="http://en.m.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic typing</a>: an object can be sent a message that is not specified in its interface. This can allow for increased flexibility, as it allows an object to "capture" a message and send the message to a different object that can respond to the message appropriately, or likewise send the message on to another object. This behavior is known as <i>message forwarding</i> or <i>delegation</i> (see below). Alternatively, an error handler can be used in case the message cannot be forwarded. If an object does not forward a message, respond to it, or handle an error, the message is silently discarded. If messages are sent to <i>nil</i> (the null object pointer), they will be silently ignored or raise a generic exception, depending on compiler options.</p>
<p>Static typing information may also optionally be added to variables. This information is then checked at compile time. In the following four statements, increasingly specific type information is provided. The statements are equivalent at runtime, but the additional information allows the compiler to warn the programmer if the passed argument does not match the type specified.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setMyValue<span class="sy0">:</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>foo;
</pre>
</div>
</div>
<p>In the above statement, <i>foo</i> may be of any class.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setMyValue<span class="sy0">:</span><span class="br0">(</span>id&lt;NSCopying&gt;<span class="br0">)</span>foo;
</pre>
</div>
</div>
<p>In the above statement, <i>foo</i> may be an instance of any class that conforms to the <i><code>NSCopying</code></i> protocol.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setMyValue<span class="sy0">:</span><span class="br0">(</span><span class="kw5">NSNumber</span> <span class="sy0">*</span><span class="br0">)</span>foo;
</pre>
</div>
</div>
<p>In the above statement, <i>foo</i> must be an instance of the <i>NSNumber</i> class.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setMyValue<span class="sy0">:</span><span class="br0">(</span>NSNumber&lt;NSCopying&gt; <span class="sy0">*</span><span class="br0">)</span>foo;
</pre>
</div>
</div>
<p>In the above statement, <i>foo</i> must be an instance of the <i>NSNumber</i> class, and it must conform to the <i><code>NSCopying</code></i> protocol.</p>
<p>Dynamic typing can be a powerful feature. When implementing container classes using statically typed languages without generics (like Java prior to version 5), the programmer is forced to write a <a href="http://en.m.wikipedia.org/wiki/Container_(data_structure)" title="Container (data structure)" class="mw-redirect">container class</a> for a generic type of object, and then <a href="Type_conversion" title="Type conversion">cast</a> back and forth between the abstract generic type and the real type. Casting, however, breaks the discipline of <a href="http://en.m.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">static typing</a>. For instance, putting in an <i><a href="http://en.m.wikipedia.org/wiki/Integer" title="Integer">integer</a></i> and reading out a <i><a href="String_(computer_science)" title="String (computer science)">string</a></i> will produce a runtime error. This problem is addressed in, for example, Java 5 and C# with <a href="Generic_programming" title="Generic programming">generic programming</a>, but then container classes must be homogeneous in type. This need not be the case with dynamic typing.</p>
<h3> <span class="mw-headline" id="Forwarding">Forwarding</span>
</h3>
<p>Objective-C permits the sending of a message to an object that may not respond. Rather than responding or simply dropping the message, an object can forward the message to an object that can respond. Forwarding can be used to simplify implementation of certain <a href="http://en.m.wikipedia.org/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)" class="mw-redirect">design patterns</a>, such as the <a href="http://en.m.wikipedia.org/wiki/Observer_pattern" title="Observer pattern">Observer pattern</a> or the <a href="http://en.m.wikipedia.org/wiki/Proxy_pattern" title="Proxy pattern">Proxy pattern</a>.</p>
<p>The Objective-C runtime specifies a pair of methods in <tt>Object</tt></p>
<ul>
<li>forwarding methods:</li>
</ul>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span>retval_t<span class="br0">)</span>forward<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>arglist_t<span class="br0">)</span>args; <span class="co2">// with GCC</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>forward<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>marg_list<span class="br0">)</span>args; <span class="co2">// with NeXT/Apple systems</span>
</pre>
</div>
</div>
<ul>
<li>action methods:</li>
</ul>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span>retval_t<span class="br0">)</span>performv<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>arglist_t<span class="br0">)</span>args; <span class="co2">// with GCC</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>performv<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>marg_list<span class="br0">)</span>args; <span class="co2">// with NeXT/Apple systems</span>
</pre>
</div>
</div>
<p>An object wishing to implement forwarding needs only to override the forwarding method with a new method to define the forwarding behavior. The action method <tt>performv::</tt> need not be overridden, as this method merely performs an action based on the selector and arguments. Notice the <code lang="objc" xml:lang="objc">SEL</code> type, which is the type of messages in Objective-C.</p>
<p>Note: in OpenStep, Cocoa, and GNUstep, the commonly used frameworks of Objective-C, one does not use the <tt>Object</tt> class. The <tt>- (void)forwardInvocation:(NSInvocation *)anInvocation</tt> method of the <tt>NSObject</tt> class is used to do forwarding.</p>
<h4> <span class="mw-headline" id="Example">Example</span>
</h4>
<p>Here is an example of a program that demonstrates the basics of forwarding.</p>
<dl>
<dt><i>Forwarder.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import &lt;objc/Object.h&gt;</span>
 
<span class="kw1">@interface</span> Forwarder <span class="sy0">:</span> Object <span class="br0">{</span>
 <span class="kw4">id</span> recipient; <span class="co2">//The object we want to forward the message to.</span>
<span class="br0">}</span>
 
<span class="co2">//Accessor methods.</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>recipient;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>setRecipient<span class="sy0">:</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>_recipient;
 
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>Forwarder.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Forwarder.h"</span>
 
<span class="kw1">@implementation</span> Forwarder
 
<span class="sy0">-</span> <span class="br0">(</span>retval_t<span class="br0">)</span>forward<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>arglist_t<span class="br0">)</span> args <span class="br0">{</span>
 <span class="coMULTI">/*
 * Check whether the recipient actually responds to the message.
 * This may or may not be desirable, for example, if a recipient
 * in turn does not respond to the message, it might do forwarding
 * itself.
 */</span>
 <span class="kw1">if</span><span class="br0">(</span><span class="br0">[</span>recipient respondsToSelector<span class="sy0">:</span>sel<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span>
 <span class="kw1">return</span> <span class="br0">[</span>recipient performv<span class="sy0">:</span>sel args<span class="sy0">:</span>args<span class="br0">]</span>;
 <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
 <span class="kw1">return</span> <span class="br0">[</span>self error<span class="sy0">:</span><span class="st0">"Recipient does not respond"</span><span class="br0">]</span>;
 <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>setRecipient<span class="sy0">:</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>_recipient <span class="br0">{</span>
 <span class="br0">[</span>recipient autorelease<span class="br0">]</span>;
 recipient <span class="sy0">=</span> <span class="br0">[</span>_recipient retain<span class="br0">]</span>;
 <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> recipient <span class="br0">{</span>
 <span class="kw1">return</span> recipient;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>Recipient.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import &lt;objc/Object.h&gt;</span>
 
<span class="co2">// A simple Recipient object.</span>
<span class="kw1">@interface</span> Recipient <span class="sy0">:</span> Object
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>hello;
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>Recipient.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Recipient.h"</span>
 
<span class="kw1">@implementation</span> Recipient
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>hello <span class="br0">{</span>
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Recipient says hello!<span class="es0">\n</span>"</span><span class="br0">)</span>;
 
 <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>main.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Forwarder.h"</span>
<span class="co1"># import "Recipient.h"</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
 Forwarder <span class="sy0">*</span>forwarder <span class="sy0">=</span> <span class="br0">[</span>Forwarder new<span class="br0">]</span>;
 Recipient <span class="sy0">*</span>recipient <span class="sy0">=</span> <span class="br0">[</span>Recipient new<span class="br0">]</span>;
 
 <span class="br0">[</span>forwarder setRecipient<span class="sy0">:</span>recipient<span class="br0">]</span>; <span class="co2">//Set the recipient.</span>
 <span class="coMULTI">/*
 * Observe forwarder does not respond to a hello message! It will
 * be forwarded. All unrecognized methods will be forwarded to
 * the recipient
 * (if the recipient responds to them, as written in the Forwarder)
 */</span>
 <span class="br0">[</span>forwarder hello<span class="br0">]</span>;
 
 <span class="br0">[</span>recipient release<span class="br0">]</span>;
 <span class="br0">[</span>forwarder release<span class="br0">]</span>;
 
 <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre>
</div>
</div>
<h4> <span class="mw-headline" id="Notes">Notes</span>
</h4>
<p>When compiled using <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">gcc</a>, the compiler reports:</p>
<pre>
$ gcc -x objective-c -Wno-import Forwarder.m Recipient.m main.m -lobjc
main.m: In function `main':
main.m:12: warning: `Forwarder' does not respond to `hello'
$
</pre>
<p>The compiler is reporting the point made earlier, that <tt>Forwarder</tt> does not respond to hello messages. In this circumstance, it is safe to ignore the warning since forwarding was implemented. Running the program produces this output:</p>
<pre>
$ ./a.out
Recipient says hello!
</pre>
<h3> <span class="mw-headline" id="Categories">Categories</span>
</h3>
<p>During the design of Objective-C, one of the main concerns was the maintainability of large code bases. Experience from the <a href="Structured_programming" title="Structured programming">structured programming</a> world had shown that one of the main ways to improve code was to break it down into smaller pieces. Objective-C borrowed and extended the concept of <i>categories</i> from Smalltalk implementations to help with this process.<sup id="cite_ref-9" class="reference"><a href="Objective-C#cite_note-9"><span>[</span>9<span>]</span></a></sup></p>
<p>Furthermore, the methods within a category are added to a class at <a href="Run_time_(program_lifecycle_phase)" title="Run time (program lifecycle phase)">run-time</a>. Thus, categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code. For example, if a system does not contain a <a href="http://en.m.wikipedia.org/wiki/Spell_checker" title="Spell checker">spell checker</a> in its String implementation, it could be added without modifying the String source code.</p>
<p>Methods within categories become indistinguishable from the methods in a class when the program is run. A category has full access to all of the instance variables within the class, including private variables.</p>
<p>If a category declares a method with the same <a href="http://en.m.wikipedia.org/wiki/Method_signature" title="Method signature" class="mw-redirect">method signature</a> as an existing method in a class, the categoryâs method is adopted. Thus categories can not only add methods to a class, but also replace existing methods. This feature can be used to fix bugs in other classes by rewriting their methods, or to cause a global change to a classâs behavior within a program. If two categories have methods with the same name (not to be confused with <a href="http://en.m.wikipedia.org/wiki/Method_signature" title="Method signature" class="mw-redirect">method signature</a>), it is undefined which categoryâs method is adopted.</p>
<p>Other languages have attempted to add this feature in a variety of ways. <a href="http://en.m.wikipedia.org/wiki/TOM_(object-oriented_programming_language)" title="TOM (object-oriented programming language)">TOM</a> took the Objective-C system a step further and allowed for the addition of variables as well. Other languages have used <a href="http://en.m.wikipedia.org/wiki/Prototype-based_programming" title="Prototype-based programming">prototype oriented</a> solutions instead, with the most notable being <a href="http://en.m.wikipedia.org/wiki/Self_(programming_language)" title="Self (programming language)">Self</a>.</p>
<p>The C# and Visual Basic.NET languages implement superficially similar functionality in the form of <a href="http://en.m.wikipedia.org/wiki/Extension_method" title="Extension method">extension methods</a>, but these do not have access to the private variables of the class.<sup id="cite_ref-10" class="reference"><a href="Objective-C#cite_note-10"><span>[</span>10<span>]</span></a></sup><a href="http://en.m.wikipedia.org/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> and several other dynamic programming languages refer to the technique as "<a href="http://en.m.wikipedia.org/wiki/Monkey_patch" title="Monkey patch">monkey patching</a>".</p>
<p><a href="http://en.m.wikipedia.org/wiki/Logtalk" title="Logtalk">Logtalk</a> implements a concept of categories (as first-class entities) that subsumes Objective-C categories functionality (Logtalk categories can also be used as fine-grained units of composition when defining e.g. new classes or prototypes; in particular, a Logtalk category can be virtually imported by any number of classes and prototypes).</p>
<h4> <span class="mw-headline" id="Example_usage_of_categories">Example usage of categories</span>
</h4>
<p>This example builds up an <tt>Integer</tt> class, by defining first a basic class with only <a href="http://en.m.wikipedia.org/wiki/Method_(computer_science)" title="Method (computer science)" class="mw-redirect">accessor methods</a> implemented, and adding two categories, <tt>Arithmetic</tt> and <tt>Display</tt>, which extend the basic class. While categories can access the base classâ private data members, it is often good practice to access these private data members through the accessor methods, which helps keep categories more independent from the base class. This is one typical usage of categoriesâthe other is to use categories to add or replace certain methods in the base class (however it is not regarded as good practice to use categories for subclass overriding, also known as <a href="http://en.m.wikipedia.org/wiki/Monkey_patch" title="Monkey patch">monkey patching</a>). By convention files containing categories that extend base classes will take the name <u>BaseClass+ExtensionClass.h</u>.</p>
<dl>
<dt><i>Integer.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import &lt;objc/Object.h&gt;</span>
 
<span class="kw1">@interface</span> Integer <span class="sy0">:</span> Object <span class="br0">{</span>
 <span class="kw4">int</span> integer;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> integer;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> integer<span class="sy0">:</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> _integer;
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>Integer.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer.h"</span>
 
<span class="kw1">@implementation</span> Integer
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> integer <span class="br0">{</span>
 <span class="kw1">return</span> integer;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> integer<span class="sy0">:</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> _integer <span class="br0">{</span>
 integer <span class="sy0">=</span> _integer;
 
 <span class="kw1">return</span> self;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>Integer+Arithmetic.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer.h"</span>
 
<span class="kw1">@interface</span> Integer <span class="br0">(</span>Arithmetic<span class="br0">)</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> add<span class="sy0">:</span> <span class="br0">(</span>Integer <span class="sy0">*</span><span class="br0">)</span> addend;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> sub<span class="sy0">:</span> <span class="br0">(</span>Integer <span class="sy0">*</span><span class="br0">)</span> subtrahend;
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>Integer+Arithmetic.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Arithmetic.h"</span>
 
<span class="kw1">@implementation</span> Integer <span class="br0">(</span>Arithmetic<span class="br0">)</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> add<span class="sy0">:</span> <span class="br0">(</span>Integer <span class="sy0">*</span><span class="br0">)</span> addend <span class="br0">{</span>
 <span class="kw1">return</span> <span class="br0">[</span>self integer<span class="sy0">:</span> <span class="br0">[</span>self integer<span class="br0">]</span> <span class="sy0">+</span> <span class="br0">[</span>addend integer<span class="br0">]</span><span class="br0">]</span>;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> sub<span class="sy0">:</span> <span class="br0">(</span>Integer <span class="sy0">*</span><span class="br0">)</span> subtrahend <span class="br0">{</span>
 <span class="kw1">return</span> <span class="br0">[</span>self integer<span class="sy0">:</span> <span class="br0">[</span>self integer<span class="br0">]</span> <span class="sy0">-</span> <span class="br0">[</span>subtrahend integer<span class="br0">]</span><span class="br0">]</span>;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>Display.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer.h"</span>
 
<span class="kw1">@interface</span> Integer <span class="br0">(</span>Display<span class="br0">)</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showstars;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showint;
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>Display.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Display.h"</span>
 
<span class="kw1">@implementation</span> Integer <span class="br0">(</span>Display<span class="br0">)</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showstars <span class="br0">{</span>
 <span class="kw4">int</span> i, x <span class="sy0">=</span> <span class="br0">[</span>self integer<span class="br0">]</span>;
 <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span>; i &lt; x; i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"*"</span><span class="br0">)</span>;
 <span class="br0">}</span>
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>"</span><span class="br0">)</span>;
 
 <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showint <span class="br0">{</span>
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\n</span>"</span>, <span class="br0">[</span>self integer<span class="br0">]</span><span class="br0">)</span>;
 
 <span class="kw1">return</span> self;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre>
</div>
</div>
<dl>
<dt><i>main.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer.h"</span>
<span class="co1"># import "Arithmetic.h"</span>
<span class="co1"># import "Display.h"</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
 Integer <span class="sy0">*</span>num1 <span class="sy0">=</span> <span class="br0">[</span>Integer new<span class="br0">]</span>, <span class="sy0">*</span>num2 <span class="sy0">=</span> <span class="br0">[</span>Integer new<span class="br0">]</span>;
 <span class="kw4">int</span> x;
 
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Enter an integer: "</span><span class="br0">)</span>;
 <span class="kw3">scanf</span><span class="br0">(</span><span class="st0">"%d"</span>, <span class="sy0">&amp;</span>x<span class="br0">)</span>;
 
 <span class="br0">[</span>num1 integer<span class="sy0">:</span>x<span class="br0">]</span>;
 <span class="br0">[</span>num1 showstars<span class="br0">]</span>;
 
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Enter an integer: "</span><span class="br0">)</span>;
 <span class="kw3">scanf</span><span class="br0">(</span><span class="st0">"%d"</span>, <span class="sy0">&amp;</span>x<span class="br0">)</span>;
 
 <span class="br0">[</span>num2 integer<span class="sy0">:</span>x<span class="br0">]</span>;
 <span class="br0">[</span>num2 showstars<span class="br0">]</span>;
 
 <span class="br0">[</span>num1 add<span class="sy0">:</span>num2<span class="br0">]</span>;
 <span class="br0">[</span>num1 showint<span class="br0">]</span>;
 
 <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre>
</div>
</div>
<h4> <span class="mw-headline" id="Notes_2">Notes</span>
</h4>
<p>Compilation is performed, for example, by:</p>
<pre>
gcc -x objective-c main.m Integer.m Arithmetic.m Display.m -lobjc
</pre>
<p>One can experiment by omitting the <tt>#import "Arithmetic.h"</tt> and <tt>[num1 add:num2]</tt> lines and omit <tt>Arithmetic.m</tt> in compilation. The program will still run. This means that it is possible to "mix-and-match" added categories if necessary; if one does not need to have some capability provided in a category, one can simply not compile it in.</p>
<h3> <span class="mw-headline" id="Posing">Posing</span>
</h3>
<p>Objective-C permits a class to wholly replace another class within a program. The replacing class is said to "pose as" the target class.</p>
<p>Note: Class posing was declared deprecated with <a href="http://en.m.wikipedia.org/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5" class="mw-redirect">Mac OS X v10.5</a>, and is unavailable in the 64-bit runtime.</p>
<p>For the versions still supporting posing, all messages sent to the target class are instead received by the posing class. There are several restrictions:</p>
<ul>
<li>A class may only pose as one of its direct or indirect superclasses.</li>
<li>The posing class must not define any new instance variables that are absent from the target class (though it may define or override methods).</li>
<li>The target class may not have received any messages prior to the posing.</li>
</ul>
<p>Posing, similarly with categories, allows global augmentation of existing classes. Posing permits two features absent from categories:</p>
<ul>
<li>A posing class can call overridden methods through super, thus incorporating the implementation of the target class.</li>
<li>A posing class can override methods defined in categories.</li>
</ul>
<p>For example,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@interface</span> CustomNSApplication <span class="sy0">:</span> <span class="kw7">NSApplication</span>
<span class="kw1">@end</span>
 
<span class="kw1">@implementation</span> CustomNSApplication
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> setMainMenu<span class="sy0">:</span> <span class="br0">(</span><span class="kw7">NSMenu</span><span class="sy0">*</span><span class="br0">)</span> menu <span class="br0">{</span>
 <span class="co2">// do something with menu</span>
<span class="br0">}</span>
<span class="kw1">@end</span>
 
class_poseAs <span class="br0">(</span><span class="br0">[</span>CustomNSApplication class<span class="br0">]</span>, <span class="br0">[</span><span class="kw7">NSApplication</span> class<span class="br0">]</span><span class="br0">)</span>;
</pre>
</div>
</div>
<p>This intercepts every invocation of setMainMenu to NSApplication.</p>
<h3> <span class="mw-headline" id=".23import">#import</span>
</h3>
<p>In the C language, the <code>#include</code> pre-compile directive always causes a file's contents to be inserted into the source at that point. Objective-C has the equivalent <code>#import</code> directive except each file is included only once per compilation unit, obviating the need for <a href="http://en.m.wikipedia.org/wiki/Include_guard" title="Include guard">include guards</a>.</p>
<h2> <span class="mw-headline" id="Other_features">Other features</span>
</h2>
<p>Objective-C's features often allow for flexible, and often easy, solutions to programming issues.</p>
<ul>
<li>Delegating methods to other objects and <a href="http://en.m.wikipedia.org/wiki/Remote_procedure_call" title="Remote procedure call">remote invocation</a> can be easily implemented using categories and message forwarding.</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Pointer_swizzling" title="Pointer swizzling">Swizzling</a> of the <var>isa</var> pointer allows for classes to change at runtime. Typically used for <a href="http://en.m.wikipedia.org/wiki/Debugging" title="Debugging">debugging</a> where freed objects are swizzled into zombie objects whose only purpose is to report an error when someone calls them. Swizzling was also used in <a href="http://en.m.wikipedia.org/wiki/Enterprise_Objects_Framework" title="Enterprise Objects Framework">Enterprise Objects Framework</a> to create database faults. Swizzling is used today by Appleâs Foundation Framework to implement <span class="new" title="Key-Value Observing (page does not exist)">Key-Value Observing</span>.</li>
<li>
<a href="Serialization" title="Serialization">Serialization</a>, commonly called Archiving in Objective-C, can be done by overwriting read and write methods.</li>
</ul>
<h2> <span class="mw-headline" id="Language_variants">Language variants</span>
</h2>
<h3> <span class="mw-headline" id="Objective-C.2B.2B">Objective-C++</span>
</h3>
<p>Objective-C++ is a front-end to the <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GNU Compiler Collection</a>, which can compile source files that use a combination of C++ and Objective-C syntax. Objective-C++ adds to C++ the extensions that Objective-C adds to C. As nothing is done to unify the semantics behind the various language features, certain restrictions apply:</p>
<ul>
<li>A C++ class cannot derive from an Objective-C class and vice versa.</li>
<li>C++ namespaces cannot be declared inside an Objective-C declaration.</li>
<li>Objective-C declarations may appear only in global scope, not inside a C++ namespace</li>
<li>Objective-C classes cannot have instance variables of C++ classes that do not have a default constructor or that have one or more virtual methods, but pointers to C++ objects can be used as instance variables without restriction (allocate them with new in the -init method).</li>
<li>C++ "by value" semantics cannot be applied to Objective-C objects, which are only accessible through pointers.</li>
<li>An Objective-C declaration cannot be within a C++ template declaration and vice versa. However, Objective-C types, (e.g., Classname *) can be used as C++ template parameters.</li>
<li>Objective-C and C++ exception handling is distinct; the handlers of each cannot handle exceptions of the other type.</li>
<li>Care must be taken since the destructor calling conventions of Objective-C and C++âs exception run-time models do not match (i.e., a C++ destructor will not be called when an Objective-C exception exits the C++ objectâs scope). The new 64-bit runtime resolves this by introducing interoperability with C++ exceptions in this sense.<sup id="cite_ref-11" class="reference"><a href="Objective-C#cite_note-11"><span>[</span>11<span>]</span></a></sup>
</li>
</ul>
<h3> <span class="mw-headline" id="Objective-C_2.0">Objective-C 2.0</span>
</h3>
<p>At the 2006 <a href="http://en.m.wikipedia.org/wiki/Worldwide_Developers_Conference" title="Worldwide Developers Conference" class="mw-redirect">Worldwide Developers Conference</a>, Apple announced the release of "Objective-C 2.0," a revision of the Objective-C language to include "modern garbage collection, syntax enhancements,<sup id="cite_ref-12" class="reference"><a href="Objective-C#cite_note-12"><span>[</span>12<span>]</span></a></sup> runtime performance improvements,<sup id="cite_ref-13" class="reference"><a href="Objective-C#cite_note-13"><span>[</span>13<span>]</span></a></sup> and 64-bit support". <a href="http://en.m.wikipedia.org/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5" class="mw-redirect">Mac OS X v10.5</a>, released in October 2007, included an Objective-C 2.0 compiler. <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC 4.6</a> supports many new Objective-C features, such as declared and synthesized properties, dot syntax, fast enumeration, optional protocol methods, method/protocol/class attributes, class extensions and a new GNUnn Objective-C runtime API.<sup id="cite_ref-14" class="reference"><a href="Objective-C#cite_note-14"><span>[</span>14<span>]</span></a></sup></p>
<h4> <span class="mw-headline" id="Garbage_collection">Garbage collection</span>
</h4>
<p>Objective-C 2.0 provided an optional conservative, yet generational <a href="Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collector</a>. When run in <a href="http://en.m.wikipedia.org/wiki/Backwards-compatible" title="Backwards-compatible" class="mw-redirect">backwards-compatible</a> mode, the runtime turned <a href="http://en.m.wikipedia.org/wiki/Reference_counting" title="Reference counting">reference counting</a> operations such as "retain" and "release" into <a href="http://en.m.wikipedia.org/wiki/No-op" title="No-op" class="mw-redirect">no-ops</a>. All objects were subject to garbage collection when garbage collection was enabled. Regular C pointers could be qualified with "__strong" to also trigger the underlying write-barrier compiler intercepts and thus participate in garbage collection.<sup id="cite_ref-15" class="reference"><a href="Objective-C#cite_note-15"><span>[</span>15<span>]</span></a></sup> A zero-ing weak subsystem was also provided such that pointers marked as "__weak" are set to zero when the object (or more simply, GC memory) is collected. The garbage collector did not exist on the iOS implementation of Objective-C 2.0.<sup id="cite_ref-16" class="reference"><a href="Objective-C#cite_note-16"><span>[</span>16<span>]</span></a></sup> Garbage collection in Objective-C ran on a low-priority background thread, and can halt on user events, with the intention of keeping the user experience responsive.<sup id="cite_ref-17" class="reference"><a href="Objective-C#cite_note-17"><span>[</span>17<span>]</span></a></sup></p>
<p>Garbage collection was deprecated in OS X v10.8 in favour of <a href="http://en.m.wikipedia.org/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a> (ARC) and is scheduled to be removed in a future version of OS X.<sup id="cite_ref-18" class="reference"><a href="Objective-C#cite_note-18"><span>[</span>18<span>]</span></a></sup></p>
<h4> <span class="mw-headline" id="Properties">Properties</span>
</h4>
<p>Objective-C 2.0 introduces a new syntax to declare instance variables as <a href="http://en.m.wikipedia.org/wiki/Property_(programming)" title="Property (programming)">properties</a>, with optional attributes to configure the generation of accessor methods. Properties are, in a sense, public instance variables; that is, declaring an instance variable as a property provides external classes with access (possibly limited, e.g. read only) to that property. A property may be declared as "readonly", and may be provided with storage semantics such as "assign", "copy" or "retain". By default, properties are considered atomic, which results in a lock preventing multiple threads from accessing them at the same time. A property can be declared as "nonatomic", which removes this lock.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@interface</span> Person <span class="sy0">:</span> <span class="kw5">NSObject</span> <span class="br0">{</span>
 <span class="kw1">@public</span>
 <span class="kw5">NSString</span> <span class="sy0">*</span>name;
 <span class="kw1">@private</span>
 <span class="kw4">int</span> age;
<span class="br0">}</span>
 
<span class="kw1">@property</span><span class="br0">(</span>copy<span class="br0">)</span> <span class="kw5">NSString</span> <span class="sy0">*</span>name;
<span class="kw1">@property</span><span class="br0">(</span>readonly<span class="br0">)</span> <span class="kw4">int</span> age;
 
<span class="sy0">-</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>initWithAge<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>age;
<span class="kw1">@end</span>
</pre>
</div>
</div>
<p>Properties are implemented by way of the @synthesize keyword, which generates getter (and setter, if not read-only) methods according to the property declaration. Alternatively, the getter and setter methods must be implemented explicitly, or the @dynamic keyword can be used to indicate that accessor methods will be provided by other means.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@implementation</span> Person
<span class="kw1">@synthesize</span> name;
 
<span class="sy0">-</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>initWithAge<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>initAge <span class="br0">{</span>
 self <span class="sy0">=</span> <span class="br0">[</span>super init<span class="br0">]</span>;
 <span class="kw1">if</span> <span class="br0">(</span>self<span class="br0">)</span> <span class="br0">{</span>
 age <span class="sy0">=</span> initAge; <span class="co2">// NOTE: direct instance variable assignment, not property setter</span>
 <span class="br0">}</span>
 <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="sy0">-</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>age <span class="br0">{</span>
 <span class="kw1">return</span> age;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre>
</div>
</div>
<p>Properties can be accessed using the traditional message passing syntax, dot notation, or, in Key-Value Coding, by name via the "valueForKey:"/"setValue:forKey:" methods.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
Person <span class="sy0">*</span>aPerson <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span>Person alloc<span class="br0">]</span> initWithAge<span class="sy0">:</span> <span class="nu0">53</span><span class="br0">]</span>;
aPerson.name <span class="sy0">=</span> <span class="co3">@</span><span class="st0">"Steve"</span>; <span class="co2">// NOTE: dot notation, uses synthesized setter,</span>
 <span class="co2">// equivalent to [aPerson setName: @"Steve"];</span>
NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"Access by message (%@), dot notation(%@),
property name(%@) and direct instance variable access (%@)"</span>,
 <span class="br0">[</span>aPerson name<span class="br0">]</span>, aPerson.name, <span class="br0">[</span>aPerson valueForKey<span class="sy0">:</span><span class="co3">@</span><span class="st0">"name"</span><span class="br0">]</span>, aPerson<span class="sy0">-</span>&gt;name<span class="br0">)</span>;
</pre>
</div>
</div>
<p>In order to use dot notation to invoke property accessors within an instance method, the "self" keyword should be used:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> introduceMyselfWithProperties<span class="sy0">:</span><span class="br0">(</span><span class="kw4">BOOL</span><span class="br0">)</span>useGetter <span class="br0">{</span>
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"Hi, my name is %@."</span>, <span class="br0">(</span>useGetter ? self.name <span class="sy0">:</span> name<span class="br0">)</span><span class="br0">)</span>;
<span class="co2">// NOTE: getter vs. ivar access</span>
<span class="br0">}</span>
</pre>
</div>
</div>
<p>A class or protocol's properties may be dynamically <a href="http://en.m.wikipedia.org/wiki/Type_introspection" title="Type introspection">introspected</a>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw4">int</span> i;
<span class="kw4">int</span> propertyCount <span class="sy0">=</span> <span class="nu0">0</span>;
objc_property_t <span class="sy0">*</span>propertyList <span class="sy0">=</span> class_copyPropertyList<span class="br0">(</span><span class="br0">[</span>aPerson class<span class="br0">]</span>, <span class="sy0">&amp;</span>propertyCount<span class="br0">)</span>;
 
<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span>; i &lt; propertyCount; i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
 objc_property_t <span class="sy0">*</span>thisProperty <span class="sy0">=</span> propertyList <span class="sy0">+</span> i;
 <span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> propertyName <span class="sy0">=</span> property_getName<span class="br0">(</span><span class="sy0">*</span>thisProperty<span class="br0">)</span>;
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"Person has a property: '%s'"</span>, propertyName<span class="br0">)</span>;
<span class="br0">}</span>
</pre>
</div>
</div>
<h4> <span class="mw-headline" id="Non-fragile_instance_variables">Non-fragile instance variables</span>
</h4>
<p>Objective-C 2.0 provides non-fragile instance variables where supported by the runtime (i.e. when building 64-bit Mac OS X code as well as all iOS code). Under the modern runtime, an extra layer of indirection is added to instance variable access, allowing the dynamic linker to adjust instance layout at runtime. This feature allows for two important improvements to Objective-C code:</p>
<ul>
<li>This eliminates the <a href="http://en.m.wikipedia.org/wiki/Fragile_binary_interface_problem" title="Fragile binary interface problem">fragile binary interface problem</a> - Superclasses can change sizes without affecting binary compatibility.</li>
<li>This allows instance variables that provide the backing for properties to be synthesized at runtime without them being declared in the classâ interface.</li>
</ul>
<h4> <span class="mw-headline" id="Fast_enumeration">Fast enumeration</span>
</h4>
<p>Instead of using an NSEnumerator object or indices to iterate through a collection, Objective-C 2.0 offers the fast enumeration syntax. In Objective-C 2.0, the following loops are functionally equivalent, but have different performance characteristics.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co2">// Using NSEnumerator</span>
<span class="kw5">NSEnumerator</span> <span class="sy0">*</span>enumerator <span class="sy0">=</span> <span class="br0">[</span>thePeople objectEnumerator<span class="br0">]</span>;
Person <span class="sy0">*</span>p;
 
<span class="kw1">while</span> <span class="br0">(</span><span class="br0">(</span>p <span class="sy0">=</span> <span class="br0">[</span>enumerator nextObject<span class="br0">]</span><span class="br0">)</span> <span class="sy0">!=</span> <span class="kw2">nil</span><span class="br0">)</span> <span class="br0">{</span>
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"%@ is %i years old."</span>, <span class="br0">[</span>p name<span class="br0">]</span>, <span class="br0">[</span>p age<span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre>
</div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co2">// Using indexes</span>
<span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span>; i &lt; <span class="br0">[</span>thePeople count<span class="br0">]</span>; i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
 Person <span class="sy0">*</span>p <span class="sy0">=</span> <span class="br0">[</span>thePeople objectAtIndex<span class="sy0">:</span>i<span class="br0">]</span>;
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"%@ is %i years old."</span>, <span class="br0">[</span>p name<span class="br0">]</span>, <span class="br0">[</span>p age<span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre>
</div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co2">// Using fast enumeration</span>
<span class="kw1">for</span> <span class="br0">(</span>Person <span class="sy0">*</span>p <span class="kw1">in</span> thePeople<span class="br0">)</span> <span class="br0">{</span>
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"%@ is %i years old."</span>, <span class="br0">[</span>p name<span class="br0">]</span>, <span class="br0">[</span>p age<span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre>
</div>
</div>
<p>Fast enumeration generates more efficient code than standard enumeration because method calls to enumerate over objects are replaced by pointer arithmetic using the NSFastEnumeration protocol.<sup id="cite_ref-19" class="reference"><a href="Objective-C#cite_note-19"><span>[</span>19<span>]</span></a></sup></p>
<h4> <span class="mw-headline" id="Implications_for_Cocoa_development">Implications for Cocoa development</span>
</h4>
<p>All Objective-C applications developed for Mac OS X that make use of the above improvements for Objective-C 2.0 are incompatible with all operating systems prior to 10.5 (Leopard). Since fast enumeration does not generate exactly the same binaries as standard enumeration, its use will cause an application to crash on OS X version 10.4 or earlier.</p>
<h3> <span class="mw-headline" id="Recent_developments">Recent developments</span>
</h3>
<h4> <span class="mw-headline" id="Automatic_Reference_Counting">Automatic Reference Counting</span>
</h4>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a>
</div>
<p>Automatic Reference Counting (ARC) is a compile-time feature that eliminates the need for programmers to manually manage retain counts using <code>retain</code> and <code>release</code>.<sup id="cite_ref-Transitioning_to_ARC_20-0" class="reference"><a href="Objective-C#cite_note-Transitioning_to_ARC-20"><span>[</span>20<span>]</span></a></sup> Unlike <a href="Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>, ARC eliminates the overhead of a separate process managing retain counts.</p>
<h4> <span class="mw-headline" id="Literals">Literals</span>
</h4>
<p>When using Apple <a href="http://en.m.wikipedia.org/wiki/LLVM" title="LLVM">LLVM</a> compiler 4.0 or later, arrays, dictionaries, and numbers (<code>NSArray</code>, <code>NSDictionary</code>, <code>NSNumber</code> classes) can be created using literal syntax instead of methods.<sup id="cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_21-0" class="reference"><a href="Objective-C#cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-21"><span>[</span>21<span>]</span></a></sup> Literal syntax uses the <code>@</code> symbol combined with <code>[]</code>, <code>{}</code>, <code>()</code>, to create the classes mentioned above, respectively.</p>
<p>Example without literals:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw5">NSArray</span> <span class="sy0">*</span>myArray <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSArray</span> arrayWithObject<span class="sy0">:</span>someObject<span class="br0">]</span>;
<span class="kw5">NSDictionary</span> <span class="sy0">*</span>myDictionary <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSDictionary</span> dictionaryWithObject<span class="sy0">:</span>someObject forKey<span class="sy0">:</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span>;
<span class="kw5">NSNumber</span> <span class="sy0">*</span>myNumber <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSNumber</span> numberWithInt<span class="sy0">:</span>myInt<span class="br0">]</span>;
</pre>
</div>
</div>
<p>Example with literals:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw5">NSArray</span> <span class="sy0">*</span>myArray <span class="sy0">=</span> @<span class="br0">[</span> someObject <span class="br0">]</span>;
<span class="kw5">NSDictionary</span> <span class="sy0">*</span>myDictionary <span class="sy0">=</span> @<span class="br0">{</span> <span class="co3">@</span><span class="st0">"key"</span> <span class="sy0">:</span> someObject <span class="br0">}</span>;
<span class="kw5">NSNumber</span> <span class="sy0">*</span>myNumber <span class="sy0">=</span> @<span class="br0">(</span>myInt<span class="br0">)</span>;
</pre>
</div>
</div>
<h4> <span class="mw-headline" id="Subscripting">Subscripting</span>
</h4>
<p>When using Apple <a href="http://en.m.wikipedia.org/wiki/LLVM" title="LLVM">LLVM</a> compiler 4.0 or later, arrays and dictionaries (<code>NSArray</code> and <code>NSDictionary</code> classes) can be manipulated using subscripting.<sup id="cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_21-1" class="reference"><a href="Objective-C#cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-21"><span>[</span>21<span>]</span></a></sup> Subscripting can be used to retrieve values from indexes (array) or keys (dictionary), and with mutable objects, can also be used to set objects to indexes or keys. In code, subscripting is represented using brackets <code>[ ]</code>.</p>
<p>Example without subscripting:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw4">id</span> object1 <span class="sy0">=</span> <span class="br0">[</span>someArray objectAtIndex<span class="sy0">:</span><span class="nu0">0</span><span class="br0">]</span>;
<span class="kw4">id</span> object2 <span class="sy0">=</span> <span class="br0">[</span>someDictionary objectForKey<span class="sy0">:</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span>;
<span class="br0">[</span>someMutableArray replaceObjectAtIndex<span class="sy0">:</span><span class="nu0">0</span> withObject<span class="sy0">:</span>object3<span class="br0">]</span>;
<span class="br0">[</span>someMutableDictionary setObject<span class="sy0">:</span>object4 forKey<span class="sy0">:</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span>;
</pre>
</div>
</div>
<p>Example with subscripting:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw4">id</span> object1 <span class="sy0">=</span> someArray<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>;
<span class="kw4">id</span> object2 <span class="sy0">=</span> someDictionary<span class="br0">[</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span>;
someMutableArray<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> object3;
someMutableDictionary<span class="br0">[</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span> <span class="sy0">=</span> object4;
</pre>
</div>
</div>
<h3> <span class="mw-headline" id="Portable_Object_Compiler">Portable Object Compiler</span>
</h3>
<p>Besides the <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>/<a href="http://en.m.wikipedia.org/wiki/NeXT" title="NeXT">NeXT</a>/<a href="http://en.m.wikipedia.org/wiki/Apple_Inc." title="Apple Inc.">Apple</a> implementation, which added several extensions to the original <a href="http://en.m.wikipedia.org/wiki/Stepstone" title="Stepstone">Stepstone</a> implementation, another <a href="http://en.m.wikipedia.org/wiki/Free_and_open_source_software" title="Free and open source software" class="mw-redirect">free, open-source</a> Objective-C implementation called the Portable Object Compiler<sup id="cite_ref-22" class="reference"><a href="Objective-C#cite_note-22"><span>[</span>22<span>]</span></a></sup> also exists. The set of extensions implemented by the Portable Object Compiler differs from the GCC/NeXT/Apple implementation; in particular, it includes <a href="Smalltalk" title="Smalltalk">Smalltalk</a>-like blocks for Objective-C, while it lacks protocols and categories, two features used extensively in OpenStep and its derivatives and relatives. Overall, POC represents an older, pre-NeXT stage in the language's evolution, roughly conformant to Brad Cox's 1991 book.</p>
<p>It also includes a runtime library called ObjectPak, which is based on Cox's original ICPak101 library (which in turn derives from the Smalltalk-80 class library), and is quite radically different from the OpenStep FoundationKit.</p>
<h3> <span class="mw-headline" id="GEOS_Objective-C">GEOS Objective-C</span>
</h3>
<p>The <a href="http://en.m.wikipedia.org/wiki/GEOS_(16-bit_operating_system)" title="GEOS (16-bit operating system)">PC GEOS</a> system used a programming language known as <b>GEOS Objective-C</b> or <b>goc</b>;<sup id="cite_ref-23" class="reference"><a href="Objective-C#cite_note-23"><span>[</span>23<span>]</span></a></sup> despite the name similarity, the two languages are similar only in overall concept and the use of keywords prefixed with an @ sign.</p>
<h3> <span class="mw-headline" id="Clang">Clang</span>
</h3>
<p>The <a href="Clang" title="Clang">Clang</a> compiler suite, part of the <a href="http://en.m.wikipedia.org/wiki/LLVM" title="LLVM">LLVM</a> project, implements Objective-C as well as other languages.</p>
<h2> <span class="mw-headline" id="Library_use">Library use</span>
</h2>
<p>Objective-C today is often used in tandem with a fixed library of standard objects (often known as a "kit" or "framework"), such as <a href="http://en.m.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a>, <a href="http://en.m.wikipedia.org/wiki/GNUstep" title="GNUstep">GNUstep</a> or <span class="new" title="ObjFW (page does not exist)">ObjFW</span>. These libraries often come with the operating system: the GNUstep libraries often come with <a href="http://en.m.wikipedia.org/wiki/GNU/Linux" title="GNU/Linux" class="mw-redirect">GNU/Linux</a> based distributions and Cocoa comes with Mac OS X. The programmer is not forced to inherit functionality from the existing base class (NSObject / OFObject). Objective-C allows for the declaration of new root classes that do not inherit any existing functionality. Originally, Objective-C based programming environments typically offered an Object class as the base class from which almost all other classes inherited. With the introduction of OpenStep, NeXT created a new base class named NSObject, which offered additional features over Object (an emphasis on using object references and reference counting instead of raw pointers, for example). Almost all classes in Cocoa inherit from NSObject.</p>
<p>Not only did the renaming serve to differentiate the new default behavior of classes within the OpenStep API, but it allowed code that used Objectâthe original base class used on NeXTSTEP (and, more or less, other Objective-C class libraries)âto co-exist in the same runtime with code that used NSObject (with some limitations). The introduction of the two letter prefix also became a simplistic form of namespaces, which Objective-C lacks. Using a prefix to create an informal packaging identifier became an informal coding standard in the Objective-C community, and continues to this day.</p>
<h2> <span class="mw-headline" id="Analysis_of_the_language">Analysis of the language</span>
</h2>
<table class="metadata plainlinks ambox mbox-small-left ambox-content ambox-Refimprove" style=""><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x"></td>
<td class="mbox-text" style=""><span class="mbox-text-span">This section <b>needs additional <a href="Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">citations</a> for <a href="Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>. <small><i>(December 2011)</i></small></span></td>
</tr></table>
<p>Objective-C implementations use a thin <a href="http://en.m.wikipedia.org/wiki/Run_time_system" title="Run time system" class="mw-redirect">runtime system</a> written in C, which adds little to the size of the application. In contrast, most object-oriented systems at the time that it was created used large <a href="http://en.m.wikipedia.org/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> runtimes. Programs written in Objective-C tend to be not much larger than the size of their code and that of the libraries (which generally do not need to be included in the software distribution), in contrast to Smalltalk systems where a large amount of memory was used just to open a window. Objective-C applications tend to be larger than similar C or C++ applications because Objective-C dynamic typing does not allow methods to be stripped or inlined. Since the programmer has such freedom to delegate, forward calls, build selectors on the fly and pass them to the runtime system, the Objective-C compiler cannot assume it's safe to remove unused methods or to inline calls.</p>
<p>Likewise, the language can be implemented on top of existing C compilers (in <a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a>, first as a preprocessor, then as a module) rather than as a new compiler. This allows Objective-C to leverage the huge existing collection of C code, libraries, tools, etc. Existing C libraries can be wrapped in Objective-C <a href="http://en.m.wikipedia.org/wiki/Adapter_pattern" title="Adapter pattern">wrappers</a> to provide an OO-style interface. In this aspect, it is similar to <a href="http://en.m.wikipedia.org/wiki/GObject" title="GObject">GObject</a> library and <a href="Vala_(programming_language)" title="Vala (programming language)">Vala</a> language, which are widely used in development of <a href="http://en.m.wikipedia.org/wiki/GTK" title="GTK" class="mw-redirect">GTK</a> applications.</p>
<p>All of these practical changes lowered the <a href="http://en.m.wikipedia.org/wiki/Barriers_to_entry" title="Barriers to entry">barrier to entry</a>, likely the biggest problem for the widespread acceptance of Smalltalk in the 1980s.</p>
<p>The first versions of Objective-C did not support <a href="Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>. At the time this decision was a matter of some debate, and many people considered long "dead times" (when Smalltalk did collection) to render the entire system unusable. Some 3rd party implementations have added this feature (most notably GNUstep) and Apple has implemented it as of <a href="http://en.m.wikipedia.org/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5" class="mw-redirect">Mac OS X v10.5</a>.<sup id="cite_ref-24" class="reference"><a href="Objective-C#cite_note-24"><span>[</span>24<span>]</span></a></sup></p>
<p>Another common criticism is that Objective-C does not have language support for <a href="http://en.m.wikipedia.org/wiki/Namespace_(computer_science)" title="Namespace (computer science)">namespaces</a>. Instead, programmers are forced to add prefixes to their class names, which are traditionally shorter than namespace names and thus more prone to collisions. As of 2007, all Mac OS X classes and functions in the <a href="http://en.m.wikipedia.org/wiki/Cocoa_(software)" title="Cocoa (software)" class="mw-redirect">Cocoa</a> programming environment are prefixed with "NS" (e.g. NSObject, NSButton) to identify them as belonging to the Mac OS X or iOS core; the "NS" derives from the names of the classes as defined during the development of <a href="http://en.m.wikipedia.org/wiki/NeXTstep" title="NeXTstep" class="mw-redirect">NeXTstep</a>.</p>
<p>Since Objective-C is a strict superset of C, it does not treat C primitive types as <a href="http://en.m.wikipedia.org/wiki/First-class_object" title="First-class object" class="mw-redirect">first-class objects</a>.</p>
<p>Unlike <a href="C++" title="C++">C++</a>, Objective-C does not support <a href="http://en.m.wikipedia.org/wiki/Operator_overloading" title="Operator overloading">operator overloading</a>. Also unlike C++, Objective-C allows an object to directly inherit only from one class (forbidding <a href="http://en.m.wikipedia.org/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>). However, categories and protocols may be used as an alternative way to achieve the same results.</p>
<p>Because Objective-C uses dynamic runtime typing and because all method calls are function calls (or, in some cases, syscalls), many common performance optimizations cannot be applied to Objective-C methods (for example: inlining, constant propagation, interprocedural optimizations, and scalar replacement of aggregates). This limits the performance of Objective-C abstractions relative to similar abstractions in languages such as C++ where such optimizations are possible. However, this is an unavoidable tradeoff because such optimizations would be rendered ineffective by categories or other Objective-C runtime features that are impossible in C++.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from June 2010">citation needed</span></a></i>]</sup></p>
<p>Many programmers dislike garbage collected languages because of the runtime performance tradeoffs. Apple introduced <a href="http://en.m.wikipedia.org/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a> <a rel="nofollow" class="external text" href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">(ARC)</a> in 2011 as an alternative memory management mechanism. With ARC, the compiler inserts retain and release calls automatically into Objective-C code based on static code analysis. The automation relieves the programmer of having to write in memory management code. ARC also adds weak references to the Objective-C language.</p>
<h3> <span class="mw-headline" id="Philosophical_differences_between_Objective-C_and_C.2B.2B">Philosophical differences between Objective-C and C++</span>
</h3>
<p>The design and implementation of <a href="C++" title="C++">C++</a> and Objective-C represent different approaches to extending C.</p>
<p>In addition to Câs style of procedural programming, C++ directly supports certain forms of <a href="Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>, <a href="Generic_programming" title="Generic programming">generic programming</a>, and <a href="http://en.m.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a>. C++ also comes with a large standard library that includes several <a href="http://en.m.wikipedia.org/wiki/Container_(data_structure)" title="Container (data structure)" class="mw-redirect">container classes</a>. Similarly, Objective-C adds <a href="http://en.m.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming">object-oriented programming</a>, <a href="http://en.m.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic typing</a>, and <a href="http://en.m.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflection</a> to C. Objective-C does not provide a standard library, per se, but in most places where Objective-C is used, it is used with an <a href="http://en.m.wikipedia.org/wiki/OpenStep" title="OpenStep">OpenStep</a>-like library such as <a href="http://en.m.wikipedia.org/wiki/OPENSTEP" title="OPENSTEP" class="mw-redirect">OPENSTEP</a>, <a href="http://en.m.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a>, or <a href="http://en.m.wikipedia.org/wiki/GNUstep" title="GNUstep">GNUstep</a>, which provide functionality similar to C++âs standard library.</p>
<p>One notable difference is that Objective-C provides runtime support <a href="http://en.m.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflective</a> features, whereas C++ adds only a small amount of runtime support to C. In Objective-C, an object can be queried about its own properties, for example whether it will respond to a certain message. In C++ this is not possible without the use of external libraries.</p>
<p>The use of reflection is part of the wider distinction between dynamic (run-time) features versus static (compile-time) features of a language. Although Objective-C and C++ each employ a mix of both features, Objective-C is decidedly geared toward run-time decisions while C++ is geared toward compile-time decisions. The tension between dynamic and static programming involves many of the classic trade-offs in programming: dynamic features add flexibility, static features add speed and type checking.</p>
<p>Generic programming and metaprogramming can be implemented in both languages using runtime polymorphism; in C++ this takes the form of virtual functions and runtime type identification, while Objective-C offers dynamic typing and reflection. Objective-C lacks compile-time polymorphism (generics) entirely, while C++ does support this via function overloading and <a href="http://en.m.wikipedia.org/wiki/Template_(C%2B%2B)" title="Template (C++)">templates</a>.</p>
<h2> <span class="mw-headline" id="See_also">See also</span>
</h2>
<ul>
<li><a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C (programming language)</a></li>
<li><a href="C++" title="C++">C++</a></li>
<li><a href="Comparison_of_programming_languages" title="Comparison of programming languages">Comparison of programming languages</a></li>
</ul>
<h2> <span class="mw-headline" id="References">References</span>
</h2>
<div class="reflist references-column-width" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation web">Singh, Amit (December 2003). <a rel="nofollow" class="external text" href="http://osxbook.com/book/bonus/ancient/whatismacosx/history.html">"A Brief History of Mac OS X"</a>. Mac OS X Internals<span class="printonly">. <a rel="nofollow" class="external free" href="http://osxbook.com/book/bonus/ancient/whatismacosx/history.html">http://osxbook.com/book/bonus/ancient/whatismacosx/history.html</a></span><span class="reference-accessdate">. Retrieved 11 June 2012</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=A+Brief+History+of+Mac+OS+X&amp;rft.atitle=&amp;rft.aulast=Singh&amp;rft.aufirst=Amit&amp;rft.au=Singh%2C%26%2332%3BAmit&amp;rft.date=December+2003&amp;rft.pub=Mac+OS+X+Internals&amp;rft_id=http%3A%2F%2Fosxbook.com%2Fbook%2Fbonus%2Fancient%2Fwhatismacosx%2Fhistory.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-2">^</a></b></span> <span class="reference-text"><span class="citation book">Wentk, Richard (2009). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=vBglDfsAjVQC&amp;pg=PT23&amp;dq=tom.love+objective.c+cocoa&amp;hl=en&amp;ei=TrFbTemfAo-0vgPiiK3UDA&amp;sa=X&amp;oi=book_result&amp;ct=book-preview-link&amp;resnum=1&amp;ved=0CCkQuwUwAA#v=onepage&amp;q=tom.love%20objective.c%20cocoa&amp;f=false"><i>Cocoa: Volume 5 of Developer Reference Apple Developer Series</i></a>. John Wiley and Sons,. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-470-49589-8" title="Special:BookSources/0-470-49589-8">0-470-49589-8</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=vBglDfsAjVQC&amp;pg=PT23&amp;dq=tom.love+objective.c+cocoa&amp;hl=en&amp;ei=TrFbTemfAo-0vgPiiK3UDA&amp;sa=X&amp;oi=book_result&amp;ct=book-preview-link&amp;resnum=1&amp;ved=0CCkQuwUwAA#v=onepage&amp;q=tom.love%20objective.c%20cocoa&amp;f=false">http://books.google.com/books?id=vBglDfsAjVQC&amp;pg=PT23&amp;dq=tom.love+objective.c+cocoa&amp;hl=en&amp;ei=TrFbTemfAo-0vgPiiK3UDA&amp;sa=X&amp;oi=book_result&amp;ct=book-preview-link&amp;resnum=1&amp;ved=0CCkQuwUwAA#v=onepage&amp;q=tom.love%20objective.c%20cocoa&amp;f=false</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Cocoa%3A+Volume+5+of+Developer+Reference+Apple+Developer+Series&amp;rft.aulast=Wentk&amp;rft.aufirst=Richard&amp;rft.au=Wentk%2C%26%2332%3BRichard&amp;rft.date=2009&amp;rft.pub=John+Wiley+and+Sons%2C&amp;rft.isbn=0-470-49589-8&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DvBglDfsAjVQC%26pg%3DPT23%26dq%3Dtom.love%2Bobjective.c%2Bcocoa%26hl%3Den%26ei%3DTrFbTemfAo-0vgPiiK3UDA%26sa%3DX%26oi%3Dbook_result%26ct%3Dbook-preview-link%26resnum%3D1%26ved%3D0CCkQuwUwAA%23v%3Donepage%26q%3Dtom.love%2520objective.c%2520cocoa%26f%3Dfalse&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-love2009-3">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-love2009_3-0">^</a></b></span> <span class="reference-text"><span class="citation book">Biancuzzi, Federico; Warden, Shane (2009). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=yB1WwURwBUQC&amp;pg=PA242&amp;dq=Engineering.objective.C+tom.love&amp;hl=en&amp;ei=T-NbTem3Fof2vwPRvenzDA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=1&amp;ved=0CCoQ6AEwAA#v=onepage&amp;q=Engineering.objective.C%20tom.love&amp;f=false"><i>Masterminds of Programming</i></a>. <a href="http://en.m.wikipedia.org/wiki/O%27Reilly_Media,_Inc." title="O'Reilly Media, Inc." class="mw-redirect">O'Reilly Media, Inc.</a>. pp.Â 242â246. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-596-51517-0" title="Special:BookSources/0-596-51517-0">0-596-51517-0</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://books.google.com/books?id=yB1WwURwBUQC&amp;pg=PA242&amp;dq=Engineering.objective.C+tom.love&amp;hl=en&amp;ei=T-NbTem3Fof2vwPRvenzDA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=1&amp;ved=0CCoQ6AEwAA#v=onepage&amp;q=Engineering.objective.C%20tom.love&amp;f=false">http://books.google.com/books?id=yB1WwURwBUQC&amp;pg=PA242&amp;dq=Engineering.objective.C+tom.love&amp;hl=en&amp;ei=T-NbTem3Fof2vwPRvenzDA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=1&amp;ved=0CCoQ6AEwAA#v=onepage&amp;q=Engineering.objective.C%20tom.love&amp;f=false</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Masterminds+of+Programming&amp;rft.aulast=Biancuzzi&amp;rft.aufirst=Federico&amp;rft.au=Biancuzzi%2C%26%2332%3BFederico&amp;rft.au=Warden%2C%26%2332%3BShane&amp;rft.date=2009&amp;rft.pages=pp.%26nbsp%3B242%E2%80%93246&amp;rft.pub=%5B%5BO%27Reilly+Media%2C+Inc.%5D%5D&amp;rft.isbn=0-596-51517-0&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DyB1WwURwBUQC%26pg%3DPA242%26dq%3DEngineering.objective.C%2Btom.love%26hl%3Den%26ei%3DT-NbTem3Fof2vwPRvenzDA%26sa%3DX%26oi%3Dbook_result%26ct%3Dresult%26resnum%3D1%26ved%3D0CCoQ6AEwAA%23v%3Donepage%26q%3DEngineering.objective.C%2520tom.love%26f%3Dfalse&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-4">^</a></b></span> <span class="reference-text"><span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/Brad_Cox" title="Brad Cox">Cox, Brad</a> (1983). <a rel="nofollow" class="external text" href="http://portal.acm.org/citation.cfm?id=948095">"The object oriented pre-compiler: programming Smalltalk 80 methods in C language"</a>. <i>ACM SIGPLAN Notices</i> (New York, NY: <a href="Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a>) <b>18</b> (1). <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F948093.948095">10.1145/948093.948095</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://portal.acm.org/citation.cfm?id=948095">http://portal.acm.org/citation.cfm?id=948095</a></span><span class="reference-accessdate">. Retrieved 2011-02-17</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+object+oriented+pre-compiler%3A+programming+Smalltalk+80+methods+in+C+language&amp;rft.jtitle=ACM+SIGPLAN+Notices&amp;rft.aulast=Cox&amp;rft.aufirst=Brad&amp;rft.au=Cox%2C%26%2332%3BBrad&amp;rft.date=1983&amp;rft.volume=18&amp;rft.issue=1&amp;rft.place=New+York%2C+NY&amp;rft.pub=%5B%5BAssociation+for+Computing+Machinery%7CACM%5D%5D&amp;rft_id=info:doi/10.1145%2F948093.948095&amp;rft_id=http%3A%2F%2Fportal.acm.org%2Fcitation.cfm%3Fid%3D948095&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-GNUstep_site-5">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-GNUstep_site_5-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.gnustep.org/information/aboutGNUstep.html">"GNUstep: Introduction"</a>. GNUstep developers/GNU Project<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.gnustep.org/information/aboutGNUstep.html">http://www.gnustep.org/information/aboutGNUstep.html</a></span><span class="reference-accessdate">. Retrieved 2012-07-29</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=GNUstep%3A+Introduction&amp;rft.atitle=&amp;rft.pub=GNUstep+developers%2FGNU+Project&amp;rft_id=http%3A%2F%2Fwww.gnustep.org%2Finformation%2FaboutGNUstep.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-6">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-6">^</a></b></span> <span class="reference-text"><span class="citation web"><a href="http://en.m.wikipedia.org/wiki/Apple,_Inc." title="Apple, Inc." class="mw-redirect">Apple, Inc.</a> (19 October 2009). <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html">"Dynamic Method Resolution"</a>. <i>Objective-C Runtime Programming Guide</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html">http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html</a></span><span class="reference-accessdate">. Retrieved {{subst:today}}</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Dynamic+Method+Resolution&amp;rft.atitle=Objective-C+Runtime+Programming+Guide&amp;rft.aulast=Apple%2C+Inc.&amp;rft.au=Apple%2C+Inc.&amp;rft.date=19+October+2009&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2FCocoa%2FConceptual%2FObjCRuntimeGuide%2FArticles%2FocrtDynamicResolution.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-7">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-7">^</a></b></span> <span class="reference-text"><span class="citation web"><a href="http://en.m.wikipedia.org/wiki/Apple,_Inc." title="Apple, Inc." class="mw-redirect">Apple, Inc.</a> (19 October 2009). <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/cocoa/conceptual/ObjectiveC/Articles/ocSelectors.html#//apple_ref/doc/uid/TP30001163-CH23-89447">"Avoiding Messaging Errors"</a>. <i>The Objective-C Programming Language</i><span class="printonly">. <a rel="nofollow" class="external free" href="http://developer.apple.com/mac/library/documentation/cocoa/conceptual/ObjectiveC/Articles/ocSelectors.html#//apple_ref/doc/uid/TP30001163-CH23-89447">http://developer.apple.com/mac/library/documentation/cocoa/conceptual/ObjectiveC/Articles/ocSelectors.html#//apple_ref/doc/uid/TP30001163-CH23-89447</a></span><span class="reference-accessdate">. Retrieved {{subst:today}}</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Avoiding+Messaging+Errors&amp;rft.atitle=The+Objective-C+Programming+Language&amp;rft.aulast=Apple%2C+Inc.&amp;rft.au=Apple%2C+Inc.&amp;rft.date=19+October+2009&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2Fcocoa%2Fconceptual%2FObjectiveC%2FArticles%2FocSelectors.html%23%2F%2Fapple_ref%2Fdoc%2Fuid%2FTP30001163-CH23-89447&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-8">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-8">^</a></b></span> <span class="reference-text"><span class="citation book">Dalrymple, Mark; Knaster, Scott. <i>Learn Objective-C on the Mac</i>. p.Â 9. "The .m extension originally stood for "messages" when Objective-C was first introduced, referring to a central feature of Objective-C"</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Learn+Objective-C+on+the+Mac&amp;rft.aulast=Dalrymple&amp;rft.aufirst=Mark&amp;rft.au=Dalrymple%2C%26%2332%3BMark&amp;rft.au=Knaster%2C%26%2332%3BScott&amp;rft.pages=p.%26nbsp%3B9&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-9">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-9">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://video.google.com/videoplay?docid=-7466310348707586940&amp;ei=0dr7SIe6L46qrgLk7dHsDg&amp;q=Smalltalk-80">Example of <i>categories</i> concept</a></span>
</li>
<li id="cite_note-10">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-10">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">"Extension Methods (C# Programming Guide)"</a>. Microsoft. October 2010<span class="printonly">. <a rel="nofollow" class="external free" href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">http://msdn.microsoft.com/en-us/library/bb383977.aspx</a></span><span class="reference-accessdate">. Retrieved 2011-07-10</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Extension+Methods+%28C%23+Programming+Guide%29&amp;rft.atitle=&amp;rft.date=October+2010&amp;rft.pub=Microsoft&amp;rft_id=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fbb383977.aspx&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-11">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-11">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocCPlusPlus.html#//apple_ref/doc/uid/TP30001163-CH10-SW1">Using C++ With Objective-C</a> in Mac OS X Reference Library, last retrieved in 2010-02-10.</span>
</li>
<li id="cite_note-12">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-12">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00039.html">"Objective-C 2.0: more clues"</a>. Lists.apple.com. 2006-08-10<span class="printonly">. <a rel="nofollow" class="external free" href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00039.html">http://lists.apple.com/archives/Objc-language/2006/Aug/msg00039.html</a></span><span class="reference-accessdate">. Retrieved 2010-05-30</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Objective-C+2.0%3A+more+clues&amp;rft.atitle=&amp;rft.date=2006-08-10&amp;rft.pub=Lists.apple.com&amp;rft_id=http%3A%2F%2Flists.apple.com%2Farchives%2FObjc-language%2F2006%2FAug%2Fmsg00039.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-13">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-13">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00018.html">"Re: Objective-C 2.0"</a>. Lists.apple.com<span class="printonly">. <a rel="nofollow" class="external free" href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00018.html">http://lists.apple.com/archives/Objc-language/2006/Aug/msg00018.html</a></span><span class="reference-accessdate">. Retrieved 2010-05-30</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Re%3A+Objective-C+2.0&amp;rft.atitle=&amp;rft.pub=Lists.apple.com&amp;rft_id=http%3A%2F%2Flists.apple.com%2Farchives%2FObjc-language%2F2006%2FAug%2Fmsg00018.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-14">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-14">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://gcc.gnu.org/gcc-4.6/changes.html">"GCC 4.6 Release Series: Changes, New Features, and Fixes"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://gcc.gnu.org/gcc-4.6/changes.html">http://gcc.gnu.org/gcc-4.6/changes.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=GCC+4.6+Release+Series%3A+Changes%2C+New+Features%2C+and+Fixes&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fgcc.gnu.org%2Fgcc-4.6%2Fchanges.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-15">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-15">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/GarbageCollection/Articles/gcAPI.html">Garbage Collection Programming Guide: Garbage Collection API</a> (Apple developer website - search for "__strong")</span>
</li>
<li id="cite_note-16">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-16">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/GarbageCollection/Introduction.html">"Garbage Collection Programming Guide: Introduction to Garbage Collection"</a>. Apple Inc.. 2011-10-03<span class="printonly">. <a rel="nofollow" class="external free" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/GarbageCollection/Introduction.html">https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/GarbageCollection/Introduction.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Garbage+Collection+Programming+Guide%3A+Introduction+to+Garbage+Collection&amp;rft.atitle=&amp;rft.date=2011-10-03&amp;rft.pub=Apple+Inc.&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23documentation%2FCocoa%2FConceptual%2FGarbageCollection%2FIntroduction.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-17">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-17">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://web.archive.org/web/20100724195423/http://developer.apple.com/leopard/overview/objectivec2.html">"Leopard Technology Series for Developers: Objective-C 2.0 Overview"</a>. Apple Inc.. 2007-11-06. Archived from <a rel="nofollow" class="external text" href="http://developer.apple.com/leopard/overview/objectivec2.html">the original</a> on July 24, 2010<span class="printonly">. <a rel="nofollow" class="external free" href="http://web.archive.org/web/20100724195423/http://developer.apple.com/leopard/overview/objectivec2.html">http://web.archive.org/web/20100724195423/http://developer.apple.com/leopard/overview/objectivec2.html</a></span><span class="reference-accessdate">. Retrieved 2010-05-30</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Leopard+Technology+Series+for+Developers%3A+Objective-C+2.0+Overview&amp;rft.atitle=&amp;rft.date=2007-11-06&amp;rft.pub=Apple+Inc.&amp;rft_id=http%3A%2F%2Fweb.archive.org%2Fweb%2F20100724195423%2Fhttp%3A%2F%2Fdeveloper.apple.com%2Fleopard%2Foverview%2Fobjectivec2.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-18">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-18">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">"Transitioning to ARC Release Notes"</a>. Apple Inc.. 2012-07-17<span class="printonly">. <a rel="nofollow" class="external free" href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html</a></span><span class="reference-accessdate">. Retrieved 2012-08-26</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Transitioning+to+ARC+Release+Notes&amp;rft.atitle=&amp;rft.date=2012-07-17&amp;rft.pub=Apple+Inc.&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23releasenotes%2FObjectiveC%2FRN-TransitioningToARC%2FIntroduction%2FIntroduction.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-19">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-19">^</a></b></span> <span class="reference-text"><span class="citation web">Apple, Inc. (2009). <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocFastEnumeration.html">"Fast Enumeration"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocFastEnumeration.html">http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocFastEnumeration.html</a></span><span class="reference-accessdate">. Retrieved 2009-12-31</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Fast+Enumeration&amp;rft.atitle=&amp;rft.aulast=Apple%2C+Inc.&amp;rft.au=Apple%2C+Inc.&amp;rft.date=2009&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2FCocoa%2FConceptual%2FObjectiveC%2FArticles%2FocFastEnumeration.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-Transitioning_to_ARC-20">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-Transitioning_to_ARC_20-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">"Transitioning to ARC"</a>. Apple Inc.<span class="printonly">. <a rel="nofollow" class="external free" href="https://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">https://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html</a></span><span class="reference-accessdate">. Retrieved 8 October 2012</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Transitioning+to+ARC&amp;rft.atitle=&amp;rft.pub=Apple+Inc.&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2F%23releasenotes%2FObjectiveC%2FRN-TransitioningToARC%2FIntroduction%2FIntroduction.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-21">
<span class="mw-cite-backlink">^ <a href="Objective-C#cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_21-0"><sup><i><b>a</b></i></sup></a> <a href="Objective-C#cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_21-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/FoundationTypesandCollections/FoundationTypesandCollections.html">"Programming with Objective-C: Values and Collections"</a>. Apple Inc.<span class="printonly">. <a rel="nofollow" class="external free" href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/FoundationTypesandCollections/FoundationTypesandCollections.html">https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/FoundationTypesandCollections/FoundationTypesandCollections.html</a></span><span class="reference-accessdate">. Retrieved 8 October 2012</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Programming+with+Objective-C%3A+Values+and+Collections&amp;rft.atitle=&amp;rft.pub=Apple+Inc.&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2F%23documentation%2FCocoa%2FConceptual%2FProgrammingWithObjectiveC%2FFoundationTypesandCollections%2FFoundationTypesandCollections.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-22">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-22">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://users.pandora.be/stes/compiler.html">"Portable Object Compiler"</a>. Users.pandora.be. 1970-01-01<span class="printonly">. <a rel="nofollow" class="external free" href="http://users.pandora.be/stes/compiler.html">http://users.pandora.be/stes/compiler.html</a></span><span class="reference-accessdate">. Retrieved 2010-05-30</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Portable+Object+Compiler&amp;rft.atitle=&amp;rft.date=1970-01-01&amp;rft.pub=Users.pandora.be&amp;rft_id=http%3A%2F%2Fusers.pandora.be%2Fstes%2Fcompiler.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-23">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-23">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.breadbox.com/downloads.asp?id=54&amp;category=GeosSDK&amp;maincategory=SDK">"Breadbox Computer Company LLC homepage"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.breadbox.com/downloads.asp?id=54&amp;category=GeosSDK&amp;maincategory=SDK">http://www.breadbox.com/downloads.asp?id=54&amp;category=GeosSDK&amp;maincategory=SDK</a></span><span class="reference-accessdate">. Retrieved 8 December 2010</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Breadbox+Computer+Company+LLC+homepage&amp;rft.atitle=&amp;rft_id=http%3A%2F%2Fwww.breadbox.com%2Fdownloads.asp%3Fid%3D54%26category%3DGeosSDK%26maincategory%3DSDK&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-24">
<span class="mw-cite-backlink"><b><a href="Objective-C#cite_ref-24">^</a></b></span> <span class="reference-text"><span class="citation web">Apple, Inc. (August 22, 2006). <a rel="nofollow" class="external text" href="http://www.apple.com/macosx/developertools/xcode.html">"Mac OS X Leopard â Xcode 3.0"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.apple.com/macosx/developertools/xcode.html">http://www.apple.com/macosx/developertools/xcode.html</a></span><span class="reference-accessdate">. Retrieved 2006-08-22</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Mac+OS+X+Leopard+%E2%80%93+Xcode+3.0&amp;rft.atitle=&amp;rft.aulast=Apple%2C+Inc.&amp;rft.au=Apple%2C+Inc.&amp;rft.date=August+22%2C+2006&amp;rft_id=http%3A%2F%2Fwww.apple.com%2Fmacosx%2Fdevelopertools%2Fxcode.html&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span><sup class="noprint Inline-Template"><span title="Â since September 2010" style="white-space: nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Link_rot" title="Wikipedia:Link rot">dead link</a></i>]</span></sup></span>
</li>
</ol>
</div>
<h2> <span class="mw-headline" id="Further_reading">Further reading</span>
</h2>
<div class="refbegin" style="">
<ul>
<li>
<span class="citation book">Cox, Brad J. (1991). <i>Object Oriented Programming: An Evolutionary Approach</i>. Addison Wesley. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-201-54834-8" title="Special:BookSources/0-201-54834-8">0-201-54834-8</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Object+Oriented+Programming%3A+An+Evolutionary+Approach&amp;rft.aulast=Cox&amp;rft.aufirst=Brad+J.&amp;rft.au=Cox%2C%26%2332%3BBrad+J.&amp;rft.date=1991&amp;rft.pub=Addison+Wesley&amp;rft.isbn=0-201-54834-8&amp;rfr_id=info:sid/en.wikipedia.org:Objective-C"><span style="display: none;">Â </span></span>
</li>
</ul>
</div>
<h2> <span class="mw-headline" id="External_links">External links</span>
</h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;"><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x"></td>
<td class="mbox-text plainlist" style="">Wikibooks has a book on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Objective-C_Programming" class="extiw" title="wikibooks:Objective-C Programming">Objective-C Programming</a></b></i>
</td>
</tr></table>
<ul>
<li>
<i><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html">The Objective-C 2.0 Programming Language</a></i>, from Apple (2011-10-11)</li>
<li>
<i><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">Objective-C Runtime Programming Guide</a></i>, from Apple (2009-10-19)</li>
<li><a rel="nofollow" class="external text" href="http://www.gnu.org/software/gnustep/resources/documentation/Developer/Base/ProgrammingManual/manual_toc.html">Objective-C GNUstep Base Programming Manual</a></li>
<li><a rel="nofollow" class="external text" href="http://virtualschool.edu/objectivec/">Objective-C by Brad Cox</a></li>
<li><a rel="nofollow" class="external text" href="http://www.cs.indiana.edu/classes/c304/oop-intro.html">Object Oriented Programming in Objective-C</a></li>
<li><a rel="nofollow" class="external text" href="http://www.faqs.org/faqs/computer-lang/Objective-C/faq/">Objective-C FAQ</a></li>
<li>
<a rel="nofollow" class="external text" href="http://www.informit.com/store/product.aspx?isbn=0321706285">Objective-C Programming: The Big Nerd Ranch Guide</a> by Aaron Hillegass, Pearson Education</li>
<li>
<a rel="nofollow" class="external text" href="http://www.informit.com/store/product.aspx?isbn=0321811909">Programming in Objective-C, 4th Edition</a> by Stephen Kochan, Addison-Wesley</li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;;"><tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;;">
<tr>
<th scope="col" style=";background:#B0C4DE;" class="navbox-title" colspan="2">
<div class="noprint plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="Template:CProLang" title="Template:CProLang"><span title="View this template" style=";background:#B0C4DE;;background:none transparent;border:none;">v</span></a></li>
<li class="nv-talk"><a href="Template_talk:CProLang" title="Template talk:CProLang"><span title="Discuss this template" style=";background:#B0C4DE;;background:none transparent;border:none;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit"><span title="Edit this template" style=";background:#B0C4DE;;background:none transparent;border:none;">e</span></a></li>
</ul>
</div>
<div class="" style="font-size:110%;"><a href="http://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C programming language</a></div>
</th>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-abovebelow" style=";background:#EEE;" colspan="2">
<div>
<ul>
<li>
<a href="ANSI_C" title="ANSI C">ANSI C</a>
<ul>
<li><a href="ANSI_C#C89_and_C90" title="ANSI C">C89 and C90</a></li>
</ul>
</li>
<li><a href="C99" title="C99">C99</a></li>
<li><a href="C11_(C_standard_revision)" title="C11 (C standard revision)">C11</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;"><a href="Category:C_compilers" title="Category:C compilers">Compilers</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li><a href="Borland_Turbo_C" title="Borland Turbo C">Borland Turbo C</a></li>
<li><a href="Clang" title="Clang">Clang</a></li>
<li><a href="GNU_Compiler_Collection" title="GNU Compiler Collection">GCC</a></li>
<li><a href="LCC_(compiler)" title="LCC (compiler)">LCC</a></li>
<li><a href="Pelles_C" title="Pelles C">Pelles C</a></li>
<li><a href="Portable_C_Compiler" title="Portable C Compiler">PCC</a></li>
<li><a href="Tiny_C_Compiler" title="Tiny C Compiler">TCC</a></li>
<li>
<a href="Visual_C++" title="Visual C++">Visual C++</a>
<ul>
<li><a href="C++/CLI" title="C++/CLI">C++/CLI</a></li>
<li><a href="C++/CX" title="C++/CX">C++/CX</a></li>
</ul>
</li>
<li><a href="Watcom_C/C++_compiler" title="Watcom C/C++ compiler">Watcom C/C++ compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;"><a href="Category:C_libraries" title="Category:C libraries">Libraries</a></th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul>
<li><a href="C_standard_library" title="C standard library">C standard library</a></li>
<li><a href="GNU_C_Library" title="GNU C Library">glibc</a></li>
<li><a href="Dietlibc" title="Dietlibc">dietlibc</a></li>
<li><a href="UClibc" title="UClibc">uClibc</a></li>
<li><a href="Newlib" title="Newlib">Newlib</a></li>
<li><a href="Embedded_GLIBC" title="Embedded GLIBC">EGLIBC</a></li>
<li><a href="Bionic_(software)" title="Bionic (software)">Bionic</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;">Features</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li><a href="Null-terminated_string" title="Null-terminated string">String</a></li>
<li><a href="C_syntax" title="C syntax">Syntax</a></li>
<li><a href="C_preprocessor" title="C preprocessor">Preprocessor</a></li>
<li><a href="C_data_types" title="C data types">Variable types and declarations</a></li>
<li><a href="C_standard_library" title="C standard library">Functions</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;">Select descendants</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-even">
<div style="padding:0em 0.25em">
<ul>
<li><a href="C++" title="C++">C++</a></li>
<li><a href="C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a></li>
<li><a href="D_(programming_language)" title="D (programming language)">D</a></li>
<li><strong class="selflink">Objective-C</strong></li>
<li><a href="Alef_(programming_language)" title="Alef (programming language)">Alef</a></li>
<li><a href="Limbo_(programming_language)" title="Limbo (programming language)">Limbo</a></li>
<li><a href="Go_(programming_language)" title="Go (programming language)">Go</a></li>
<li><a href="Vala_(programming_language)" title="Vala (programming language)">Vala</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px">
<td></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style=";background:#EEE;;">C and other languages</th>
<td style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;" class="navbox-list navbox-odd">
<div style="padding:0em 0.25em">
<ul>
<li>C and C++
<ul>
<li><a href="Compatibility_of_C_and_C++" title="Compatibility of C and C++">Compatibility</a></li>
<li><a href="Operators_in_C_and_C++" title="Operators in C and C++">Operators</a></li>
</ul>
</li>
<li><a href="Comparison_of_Pascal_and_C" title="Comparison of Pascal and C">Comparison of Pascal and C</a></li>
<li><a href="Java_virtual_machine#C_to_bytecode_compilers" title="Java virtual machine">C to Java byte-code compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr>
<td class="navbox-abovebelow" style=";background:#EEE;" colspan="2">
<div>
<ul>
<li>
<img alt="Category" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png" width="16" height="14" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/24px-Folder_Hexagonal_Icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/32px-Folder_Hexagonal_Icon.svg.png 2x"><b><a href="Category:C_programming_language" title="Category:C programming language">Category:C programming language</a></b>
</li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr></table>

						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 36 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://ar.m.wikipedia.org/wiki/%D8%B3%D9%8A-%D8%A7%D9%84%D9%83%D8%A7%D8%A6%D9%86%D9%8A%D8%A9" lang="ar" hreflang="ar">Ø§ÙØ¹Ø±Ø¨ÙØ©</a></li><li><a href="http://az.m.wikipedia.org/wiki/Objective-C" lang="az" hreflang="az">azÉrbaycanca</a></li><li><a href="http://bn.m.wikipedia.org/wiki/%E0%A6%85%E0%A6%AC%E0%A6%9C%E0%A7%87%E0%A6%95%E0%A7%8D%E0%A6%9F%E0%A6%BF%E0%A6%AD_%E0%A6%B8%E0%A6%BF" lang="bn" hreflang="bn">à¦¬à¦¾à¦à¦²à¦¾</a></li><li><a href="http://bg.m.wikipedia.org/wiki/Objective-C" lang="bg" hreflang="bg">Ð±ÑÐ»Ð³Ð°ÑÑÐºÐ¸</a></li><li><a href="http://ca.m.wikipedia.org/wiki/Objective-C" lang="ca" hreflang="ca">catalÃ </a></li><li><a href="http://cs.m.wikipedia.org/wiki/Objective-C" lang="cs" hreflang="cs">Äesky</a></li><li><a href="http://da.m.wikipedia.org/wiki/Objective-C" lang="da" hreflang="da">dansk</a></li><li><a href="http://de.m.wikipedia.org/wiki/Objective-C" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://es.m.wikipedia.org/wiki/Objective-C" lang="es" hreflang="es">espaÃ±ol</a></li><li><a href="http://eo.m.wikipedia.org/wiki/Objective-C" lang="eo" hreflang="eo">Esperanto</a></li><li><a href="http://fa.m.wikipedia.org/wiki/%D8%A2%D8%A8%D8%AC%DA%A9%D8%AA%DB%8C%D9%88-%D8%B3%DB%8C" lang="fa" hreflang="fa">ÙØ§Ø±Ø³Û</a></li><li><a href="http://fr.m.wikipedia.org/wiki/Objective-C" lang="fr" hreflang="fr">franÃ§ais</a></li><li><a href="http://gl.m.wikipedia.org/wiki/Objective-C" lang="gl" hreflang="gl">galego</a></li><li><a href="http://ko.m.wikipedia.org/wiki/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8B%B0%EB%B8%8C-C" lang="ko" hreflang="ko">íêµ­ì´</a></li><li><a href="http://it.m.wikipedia.org/wiki/Objective_C" lang="it" hreflang="it">italiano</a></li><li><a href="http://he.m.wikipedia.org/wiki/Objective-C" lang="he" hreflang="he">×¢××¨××ª</a></li><li><a href="http://ka.m.wikipedia.org/wiki/Objective-C" lang="ka" hreflang="ka">á¥áá áá£áá</a></li><li><a href="http://kk.m.wikipedia.org/wiki/Objective-C" lang="kk" hreflang="kk">ÒÐ°Ð·Ð°ÒÑÐ°</a></li><li><a href="http://hu.m.wikipedia.org/wiki/Objective-C" lang="hu" hreflang="hu">magyar</a></li><li><a href="http://nl.m.wikipedia.org/wiki/Objective-C" lang="nl" hreflang="nl">Nederlands</a></li><li><a href="http://ja.m.wikipedia.org/wiki/Objective-C" lang="ja" hreflang="ja">æ¥æ¬èª</a></li><li><a href="http://no.m.wikipedia.org/wiki/Objective-C" lang="no" hreflang="no">norsk (bokmÃ¥l)â</a></li><li><a href="http://pl.m.wikipedia.org/wiki/Objective-C" lang="pl" hreflang="pl">polski</a></li><li><a href="http://pt.m.wikipedia.org/wiki/Objective-C" lang="pt" hreflang="pt">portuguÃªs</a></li><li><a href="http://ru.m.wikipedia.org/wiki/Objective-C" lang="ru" hreflang="ru">ÑÑÑÑÐºÐ¸Ð¹</a></li><li><a href="http://simple.m.wikipedia.org/wiki/Objective-C" lang="simple" hreflang="simple">Simple English</a></li><li><a href="http://sk.m.wikipedia.org/wiki/Objective-C" lang="sk" hreflang="sk">slovenÄina</a></li><li><a href="http://sl.m.wikipedia.org/wiki/Objective-C" lang="sl" hreflang="sl">slovenÅ¡Äina</a></li><li><a href="http://fi.m.wikipedia.org/wiki/Objective-C" lang="fi" hreflang="fi">suomi</a></li><li><a href="http://sv.m.wikipedia.org/wiki/Objective-C" lang="sv" hreflang="sv">svenska</a></li><li><a href="http://ta.m.wikipedia.org/wiki/%E0%AE%92%E0%AE%AA%E0%AF%8D%E0%AE%9A%E0%AF%86%E0%AE%95%E0%AF%8D%E0%AE%9F%E0%AE%BF%E0%AE%B5%E0%AF%8D_%E0%AE%9A%E0%AE%BF" lang="ta" hreflang="ta">à®¤à®®à®¿à®´à¯</a></li><li><a href="http://th.m.wikipedia.org/wiki/%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B8%AD%E0%B9%87%E0%B8%AD%E0%B8%9A%E0%B9%80%E0%B8%88%E0%B8%81%E0%B8%97%E0%B8%B5%E0%B8%9F-%E0%B8%8B%E0%B8%B5" lang="th" hreflang="th">à¹à¸à¸¢</a></li><li><a href="http://tg.m.wikipedia.org/wiki/Objective-C" lang="tg" hreflang="tg">ÑÐ¾Ò·Ð¸ÐºÓ£</a></li><li><a href="http://tr.m.wikipedia.org/wiki/Objective-C" lang="tr" hreflang="tr">TÃ¼rkÃ§e</a></li><li><a href="http://uk.m.wikipedia.org/wiki/Objective_C" lang="uk" hreflang="uk">ÑÐºÑÐ°ÑÐ½ÑÑÐºÐ°</a></li><li><a href="http://zh.m.wikipedia.org/wiki/Objective-C" lang="zh" hreflang="zh">ä¸­æ</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia Â®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Objective-C&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Objective-C&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>