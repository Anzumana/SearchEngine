<!doctype html>
	<html lang="en" dir="ltr" class="">
	<head>
		<title>Smalltalk - Wikipedia, the free encyclopedia</title>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="robots" content="noindex,nofollow"/>		<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile%7Cmobile.production-only%2Cproduction-jquery%7Cmobile.device.default&amp;only=styles&amp;skin=mobile&amp;version=1352163471&amp;*" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=mobile.site&amp;only=styles&amp;skin=mobile&amp;*" />		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<link rel="apple-touch-icon" href="http://en.wikipedia.org/apple-touch-icon.png" />		<script type="text/javascript">
			var _mwStart = +new Date;
			window._evq = window._evq || [];
			if ( typeof console === 'undefined' ) {
				console = { log: function() {} };
			}
			if( typeof mw === 'undefined' ) {
				mw = {};
			}
			var mwMobileFrontendConfig = {"messages":{"mobile-frontend-watchlist-add":"Added $1 to your watchlist","mobile-frontend-watchlist-removed":"Removed $1 from your watchlist","mobile-frontend-watchlist-view":"View your watchlist","mobile-frontend-ajax-random-heading":"Locating knowledge...","mobile-frontend-ajax-random-quote":"Intellectual growth should commence at birth and cease only at death","mobile-frontend-ajax-random-quote-author":"Albert Einstein","mobile-frontend-ajax-random-question":"Read this article?","mobile-frontend-ajax-random-yes":"Yes","mobile-frontend-ajax-random-retry":"Try again","mobile-frontend-ajax-page-loading":"Loading $1","mobile-frontend-page-saving":"Saving $1","mobile-frontend-ajax-page-error":"Whoops! Something went wrong there. Please try refreshing your browser window.","mobile-frontend-meta-data-issues":"This article has some issues","mobile-frontend-meta-data-issues-header":"Issues","expand-section":"Show","collapse-section":"Hide","remove-results":"Back...","mobile-frontend-search-noresults":"No article titles match your search. Change your search, or press the keyboard search button to search inside articles.","mobile-frontend-search-help":"Type search term above and matching article titles will appear here.","contents-heading":"Contents","language-heading":"Read this article in","mobile-frontend-close-section":"Close this section","mobile-frontend-language-footer":"<a href="http://en.m.wikipedia.org/wiki/\&quot;\/wiki\/Special:MobileOptions\/Language\&quot;">Note: This article may not be written in your preferred language. You can see which languages Wikipedia supports by clicking here.<\/a>","mobile-frontend-language-site-choose":"Search language","mobile-frontend-language-site-nomatches":"No matching languages"},"settings":{"action":"","authenticated":false,"scriptPath":"\/w","shim":"\/\/bits.wikimedia.org\/static-1.21wmf3\/extensions\/MobileFrontend\/stylesheets\/common\/images\/blank.gif","pageUrl":"\/wiki\/$1","beta":null,"title":"Smalltalk","useFormatCookieName":"mf_mobileFormat","useFormatCookieDuration":-1,"useFormatCookieDomain":"en.wikipedia.org","useFormatCookiePath":"\/","stopMobileRedirectCookieName":"stopMobileRedirect","stopMobileRedirectCookieDuration":15552000,"stopMobileRedirectCookieDomain":".wikipedia.org","hookOptions":""}};
			function _mwLogEvent( data, additionalInformation ) {
				var timestamp = + new Date;
				var ev = { event_id: 'mobile', delta: timestamp - _mwStart, data: data, beta: mwMobileFrontendConfig.settings.beta,
					session: _mwStart, page: mwMobileFrontendConfig.settings.title, info: additionalInformation || '' };
				_evq.push( ev );
				console.log( typeof JSON === 'undefined' ? ev : JSON.stringify( ev ) );
			}
		</script>
				<link rel="canonical" href="http://en.wikipedia.org/wiki/Smalltalk" >
	</head>
	<body class="mobile live">
				<div id="mw-mf-viewport">
		<div id="mw-mf-page-left">
		<div id='mw-mf-content-left'>
		<ul id="mw-mf-menu-main">
			<li class='icon'><a href="Main_Page"
				title="Home">
				Home</a></li>
			<li class='icon2'><a href="Special:Random#mw-mf-page-left" id="randomButton"
				title="Random"
				class="button">Random</a></li>
						<li class='icon5'>
				<a href="http://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Smalltalk"
					title="Settings">
				Settings				</a>
			</li>
					</ul>
		</div>
		</div>
		<div id='mw-mf-page-center'>
									<div id="mw-mf-header">
		<a title="Open main menu" href="Special:MobileMenu#mw-mf-page-left" id="mw-mf-main-menu-button">				<img alt="menu"
				src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif">
		</a>			<form id="mw-mf-searchForm" action="http://en.m.wikipedia.org/w/index.php" class="search_bar" method="get">
			<input type="hidden" value="Special:Search" name="title" />
			<div id="mw-mf-sq" class="divclearable">
				<input type="search" name="search" id="mw-mf-search" size="22" value="" autocomplete="off" maxlength="1024" class="search"
					placeholder="Search Wikipedia"
					/>
				<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/blank.gif" alt="Clear" class="clearlink" id="mw-mf-clearsearch" title="Clear"/>
				<input class='searchSubmit' type="submit" value="Go">
			</div>
		</form>
	</div>
	<div id="results"></div>
		<div class='show ' id='content_wrapper'>
						<h1 id="firstHeading">Smalltalk</h1>			
<div class="dablink">This article is about the programming language.  For other uses, see <a href="http://en.m.wikipedia.org/wiki/Small_talk_(disambiguation)" title="Small talk (disambiguation)">Small talk (disambiguation)</a>.</div>
<table class="infobox vevent" cellspacing="3" style="border-spacing: 3px; width:22em;">
<caption class="summary" style="">Smalltalk</caption>
<tr class="">
<td colspan="2" class="" style="text-align:center;">
<a href="http://en.m.wikipedia.org/wiki/File:Smalltalk80book.jpg" class="image"><img alt="Smalltalk80book.jpg" src="http://upload.wikimedia.org/wikipedia/en/c/c0/Smalltalk80book.jpg" width="182" height="240"></a><br><span style=""><i>Smalltalk-80: The Language and its Implementation</i>, a.k.a. the "Blue book", a seminal book on the language</span>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Programming_paradigm" title="Programming paradigm">Paradigm(s)</a></th>
<td class="" style=""><a href="Object-oriented_programming" title="Object-oriented programming">object-oriented</a></td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Appeared in</th>
<td class="" style="">1972<span style="display:none">Â (<span class="bday dtstart published updated">1972</span>)</span> (development began in 1969)</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Designed by</th>
<td class="organiser" style="">
<a href="http://en.m.wikipedia.org/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a>, <a href="http://en.m.wikipedia.org/wiki/Dan_Ingalls" title="Dan Ingalls" class="mw-redirect">Dan Ingalls</a>, <a href="http://en.m.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)" title="Adele Goldberg (computer scientist)">Adele Goldberg</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Software_developer" title="Software developer">Developer</a></th>
<td class="" style="">
<a href="http://en.m.wikipedia.org/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a>, <a href="http://en.m.wikipedia.org/wiki/Dan_Ingalls" title="Dan Ingalls" class="mw-redirect">Dan Ingalls</a>, <a href="http://en.m.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)" title="Adele Goldberg (computer scientist)">Adele Goldberg</a>, <span class="new" title="Ted Kaehler (page does not exist)">Ted Kaehler</span>, <a href="http://en.m.wikipedia.org/wiki/Diana_Merry" title="Diana Merry">Diana Merry</a>, <span class="new" title="Scott Wallace (computer scientist) (page does not exist)">Scott Wallace</span>, <a href="http://en.m.wikipedia.org/wiki/L._Peter_Deutsch" title="L. Peter Deutsch" class="mw-redirect">Peter Deutsch</a> and <a href="http://en.m.wikipedia.org/wiki/PARC_(company)" title="PARC (company)">Xerox PARC</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Software_release_life_cycle" title="Software release life cycle">Stable release</a></th>
<td class="" style="">Smalltalk-80 version 2 (1980)</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Type_system" title="Type system">Typing discipline</a></th>
<td class="" style="">
<a href="http://en.m.wikipedia.org/wiki/Strong_typing" title="Strong typing">strong</a>, <a href="http://en.m.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Programming_language_implementation" title="Programming language implementation">Major implementations</a></th>
<td class="" style="">
<a href="http://en.m.wikipedia.org/wiki/Pharo" title="Pharo">Pharo</a>, <a href="http://en.m.wikipedia.org/wiki/Squeak" title="Squeak">Squeak</a>, <a href="http://en.m.wikipedia.org/wiki/GNU_Smalltalk" title="GNU Smalltalk">GNU Smalltalk</a>, <a href="http://en.m.wikipedia.org/wiki/VisualWorks" title="VisualWorks">VisualWorks</a>, <a href="http://en.m.wikipedia.org/wiki/Dolphin_Smalltalk" title="Dolphin Smalltalk">Dolphin Smalltalk</a>, <span class="new" title="Smalltalk/X (page does not exist)">Smalltalk/X</span>, VA Smalltalk</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Influenced by</th>
<td class="" style="">
<a href="http://en.m.wikipedia.org/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, <a href="http://en.m.wikipedia.org/wiki/Simula" title="Simula">Simula</a>, <a href="http://en.m.wikipedia.org/wiki/Logo_(programming_language)" title="Logo (programming language)">Logo</a>, <a href="http://en.m.wikipedia.org/wiki/Sketchpad" title="Sketchpad">Sketchpad</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;">Influenced</th>
<td class="" style="">
<a href="Objective-C" title="Objective-C">Objective-C</a>, <a href="http://en.m.wikipedia.org/wiki/Self_(programming_language)" title="Self (programming language)">Self</a>, <a href="Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="PHP" title="PHP">PHP</a> 5, <a href="http://en.m.wikipedia.org/wiki/Logtalk" title="Logtalk">Logtalk</a>, <a href="http://en.m.wikipedia.org/wiki/Dylan_(programming_language)" title="Dylan (programming language)">Dylan</a>, <a href="http://en.m.wikipedia.org/wiki/AppleScript" title="AppleScript">AppleScript</a>, <a href="http://en.m.wikipedia.org/wiki/Lisaac" title="Lisaac">Lisaac</a>, <a href="http://en.m.wikipedia.org/wiki/NewtonScript" title="NewtonScript">NewtonScript</a>, <a href="Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="http://en.m.wikipedia.org/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, <a href="http://en.m.wikipedia.org/wiki/Groovy_(programming_language)" title="Groovy (programming language)">Groovy</a>, <a href="http://en.m.wikipedia.org/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>, <a href="http://en.m.wikipedia.org/wiki/Perl_6" title="Perl 6">Perl 6</a>, <a href="http://en.m.wikipedia.org/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">Common Lisp Object System</a>, <a href="http://en.m.wikipedia.org/wiki/Falcon_(programming_language)" title="Falcon (programming language)">Falcon</a>, <a href="http://en.m.wikipedia.org/wiki/Io_(programming_language)" title="Io (programming language)">Io</a>, <a href="http://en.m.wikipedia.org/wiki/Ioke_(programming_language)" title="Ioke (programming language)">Ioke</a>, <a href="http://en.m.wikipedia.org/wiki/Fancy_(programming_language)" title="Fancy (programming language)">Fancy</a>, <a href="http://en.m.wikipedia.org/wiki/Dart_(programming_language)" title="Dart (programming language)">Dart</a>
</td>
</tr>
<tr class="">
<th scope="row" style="text-align:left;"><a href="Operating_system" title="Operating system">OS</a></th>
<td class="" style=""><a href="Cross-platform" title="Cross-platform">Cross-platform (multi-platform)</a></td>
</tr>
<tr>
<td colspan="2" class="" style="text-align:center;">
<a href="File:Wikibooks-logo-en.svg" class="image" title="Wikibooks logo"><img alt="Wikibooks logo" src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Wikibooks-logo-en.svg/14px-Wikibooks-logo-en.svg.png" width="14" height="14" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Wikibooks-logo-en.svg/21px-Wikibooks-logo-en.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Wikibooks-logo-en.svg/28px-Wikibooks-logo-en.svg.png 2x"></a> <a href="http://en.wikibooks.org/wiki/Smalltalk" class="extiw" title="wikibooks:Smalltalk">Smalltalk</a> at <a href="Wikibooks" title="Wikibooks">Wikibooks</a>
</td>
</tr>
</table>
<p><b>Smalltalk</b> is an <a href="Object-oriented_programming" title="Object-oriented programming">object-oriented</a>, <a href="Type_system#Dynamic_typing" title="Type system">dynamically typed</a>, <a href="http://en.m.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflective</a> <a href="http://en.m.wikipedia.org/wiki/Computer_programming" title="Computer programming">programming</a> <a href="Programming_language" title="Programming language">language</a>. Smalltalk was created as the language to underpin the "new world" of computing exemplified by "humanâcomputer symbiosis."<sup id="cite_ref-History_1-0" class="reference"><a href="Smalltalk#cite_note-History-1"><span>[</span>1<span>]</span></a></sup> It was designed and created in part for <a href="http://en.m.wikipedia.org/wiki/Education" title="Education">educational</a> use, more so for <a href="http://en.m.wikipedia.org/wiki/Constructionist_learning" title="Constructionist learning" class="mw-redirect">constructionist learning</a>, at the Learning Research Group (LRG) of <a href="http://en.m.wikipedia.org/wiki/PARC_(company)" title="PARC (company)">Xerox PARC</a> by <a href="http://en.m.wikipedia.org/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a>, <a href="http://en.m.wikipedia.org/wiki/Dan_Ingalls" title="Dan Ingalls" class="mw-redirect">Dan Ingalls</a>, <a href="http://en.m.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)" title="Adele Goldberg (computer scientist)">Adele Goldberg</a>, <span class="new" title="Ted Kaehler (page does not exist)">Ted Kaehler</span>, <span class="new" title="Scott Wallace (computer scientist) (page does not exist)">Scott Wallace</span>, and others during the 1970s.</p>
<p>The language was first generally released as Smalltalk-80. Smalltalk-like languages are in continuing active development, and have gathered loyal communities of users around them. ANSI Smalltalk was ratified in 1998 and represents the standard version of Smalltalk.<sup id="cite_ref-2" class="reference"><a href="Smalltalk#cite_note-2"><span>[</span>2<span>]</span></a></sup></p>
<h2> <span class="mw-headline" id="History">History</span>
</h2>
<p>There are a large number of Smalltalk variants.<sup id="cite_ref-3" class="reference"><a href="Smalltalk#cite_note-3"><span>[</span>3<span>]</span></a></sup> The unqualified word <i>Smalltalk</i> is often used to indicate the Smalltalk-80 language, the first version to be made publicly available and created in 1980.</p>
<p>Smalltalk was the product of research led by <a href="http://en.m.wikipedia.org/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a> at <a href="http://en.m.wikipedia.org/wiki/Xerox_Palo_Alto_Research_Center" title="Xerox Palo Alto Research Center" class="mw-redirect">Xerox Palo Alto Research Center</a> (PARC); Alan Kay designed most of the early Smalltalk versions, which <a href="http://en.m.wikipedia.org/wiki/Dan_Ingalls" title="Dan Ingalls" class="mw-redirect">Dan Ingalls</a> implemented. The first version, known as Smalltalk-71, was created by Ingalls in a few mornings on a bet that a programming language based on the idea of <a href="http://en.m.wikipedia.org/wiki/Message_passing" title="Message passing">message passing</a> inspired by <a href="http://en.m.wikipedia.org/wiki/Simula" title="Simula">Simula</a> could be implemented in "a page of code."<sup id="cite_ref-History_1-1" class="reference"><a href="Smalltalk#cite_note-History-1"><span>[</span>1<span>]</span></a></sup> A later variant actually used for research work is now known as Smalltalk-72 and influenced the development of the <a href="http://en.m.wikipedia.org/wiki/Actor_model" title="Actor model">Actor model</a>. Its <a href="http://en.m.wikipedia.org/wiki/Actor_model#Smalltalk" title="Actor model">syntax and execution model</a> were very different from modern Smalltalk variants.</p>
<p>After significant revisions which froze some aspects of execution semantics to gain performance (by adopting a <a href="http://en.m.wikipedia.org/wiki/Simula" title="Simula">Simula</a>-like class <a href="http://en.m.wikipedia.org/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)" class="mw-redirect">inheritance</a> model of execution), Smalltalk-76 was created. This system had a <a href="http://en.m.wikipedia.org/wiki/Development_environment_(software_development_process)" title="Development environment (software development process)">development environment</a> featuring most of the now familiar tools, including a class library code browser/editor. Smalltalk-80 added <a href="http://en.m.wikipedia.org/wiki/Metaclass" title="Metaclass">metaclasses</a>, to help maintain the "everything is an object" (except private instance variables) paradigm by associating properties and behavior with individual classes, and even primitives such as integer and boolean values (for example, to support different ways of creating instances).</p>
<p>Smalltalk-80 was the first language variant made available outside of PARC, first as Smalltalk-80 Version 1, given to a small number of firms (<a href="http://en.m.wikipedia.org/wiki/Hewlett-Packard" title="Hewlett-Packard">Hewlett-Packard</a>, <a href="http://en.m.wikipedia.org/wiki/Apple_Computer" title="Apple Computer" class="mw-redirect">Apple Computer</a>, <a href="http://en.m.wikipedia.org/wiki/Tektronix" title="Tektronix">Tektronix</a>, and <a href="http://en.m.wikipedia.org/wiki/Digital_Equipment_Corporation" title="Digital Equipment Corporation">DEC</a>) and universities (<a href="http://en.m.wikipedia.org/wiki/UC_Berkeley" title="UC Berkeley" class="mw-redirect">UC Berkeley</a>) for "peer review" and implementation on their platforms. Later (in 1983) a general availability implementation, known as Smalltalk-80 Version 2, was released as an image (platform-independent file with object definitions) and a <a href="http://en.m.wikipedia.org/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> specification. ANSI Smalltalk has been the standard language reference since 1998.<sup id="cite_ref-4" class="reference"><a href="Smalltalk#cite_note-4"><span>[</span>4<span>]</span></a></sup></p>
<p>Two of the currently popular Smalltalk implementation variants are descendants of those original Smalltalk-80 images. <a href="http://en.m.wikipedia.org/wiki/Squeak" title="Squeak">Squeak</a> is an <a href="http://en.m.wikipedia.org/wiki/Open_source" title="Open source">open source</a> implementation derived from Smalltalk-80 Version 1 by way of Apple Smalltalk. <a href="http://en.m.wikipedia.org/wiki/VisualWorks" title="VisualWorks">VisualWorks</a> is derived from Smalltalk-80 version 2 by way of Smalltalk-80 2.5 and ObjectWorks (both products of ParcPlace Systems, a Xerox PARC spin-off company formed to bring Smalltalk to the market). As an interesting link between generations, in 2002 Vassili Bykov implemented Hobbes, a virtual machine running Smalltalk-80 inside VisualWorks.<sup id="cite_ref-5" class="reference"><a href="Smalltalk#cite_note-5"><span>[</span>5<span>]</span></a></sup> (<a href="http://en.m.wikipedia.org/wiki/Dan_Ingalls" title="Dan Ingalls" class="mw-redirect">Dan Ingalls</a> later ported Hobbes to Squeak.)</p>
<p>During the late 1980s to mid-1990s, Smalltalk environmentsâincluding support, training and add-onsâwere sold by two competing organizations: ParcPlace Systems and Digitalk, both California based. ParcPlace Systems tended to focus on the Unix/Sun Microsystems market, while Digitalk focused on Intel-based PCs running Microsoft Windows or IBM's OS/2. Both firms struggled to take Smalltalk mainstream due to Smalltalk's substantial memory needs, limited run-time performance, and initial lack of supported connectivity to <a href="http://en.m.wikipedia.org/wiki/SQL" title="SQL">SQL</a>-based relational database servers. While the high price of ParcPlace Smalltalk limited its market penetration to mid-sized and large commercial organizations, the Digitalk products initially tried to reach a wider audience with a lower price. IBM initially supported the Digitalk product, but then entered the market with a Smalltalk product in 1995 called VisualAge/Smalltalk. Easel introduced Enfin at this time on Windows and OS/2. Enfin became far more popular in Europe, as IBM introduced it into IT shops before their development of IBM Smalltalk (later VisualAge). Enfin was later acquired by Cincom Systems, and is now sold under the name <a href="http://en.m.wikipedia.org/wiki/ObjectStudio" title="ObjectStudio" class="mw-redirect">ObjectStudio</a>, and is part of the Cincom Smalltalk product suite.</p>
<p>In 1995, ParcPlace and Digitalk merged into ParcPlace-Digitalk and then rebranded in 1997 as ObjectShare, located in Irvine, CA. ObjectShare (<a href="http://en.m.wikipedia.org/wiki/NASDAQ" title="NASDAQ">NASDAQ</a>: OBJS) was traded publicly until 1999, when it was delisted and dissolved. The merged firm never managed to find an effective response to Java as to market positioning, and by 1997 its owners were looking to sell the business. In 1999, Seagull Software acquired the ObjectShare Java development lab (including the original Smalltalk/V and Visual Smalltalk development team), and still owns VisualSmalltalk, although worldwide distribution rights for the Smalltalk product remained with ObjectShare who then sold them to <a href="http://en.m.wikipedia.org/wiki/Cincom" title="Cincom" class="mw-redirect">Cincom</a>.<sup id="cite_ref-6" class="reference"><a href="Smalltalk#cite_note-6"><span>[</span>6<span>]</span></a></sup> VisualWorks was sold to <a href="http://en.m.wikipedia.org/wiki/Cincom" title="Cincom" class="mw-redirect">Cincom</a> and is now part of <span class="new" title="Cincom Smalltalk (page does not exist)">Cincom Smalltalk</span>. Cincom has backed Smalltalk strongly, releasing multiple new versions of VisualWorks and ObjectStudio each year since 1999.</p>
<p><a href="http://en.m.wikipedia.org/wiki/Cincom" title="Cincom" class="mw-redirect">Cincom</a>, <a href="http://en.m.wikipedia.org/wiki/Gemstone_Systems" title="Gemstone Systems" class="mw-redirect">Gemstone</a> and <span class="new" title="Object Arts (page does not exist)">Object Arts</span>, plus other vendors continue to sell Smalltalk environments. IBM has 'end of life'd VisualAge Smalltalk having in the late 1990s decided to back Java and it is, as of 2006<sup class="plainlinks noprint asof-tag update" style="display:none;"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Smalltalk&amp;action=edit">[update]</a></sup>, supported by Instantiations, Inc.<sup id="cite_ref-7" class="reference"><a href="Smalltalk#cite_note-7"><span>[</span>7<span>]</span></a></sup> which has renamed the product VAÂ Smalltalk and released several new versions. The open <a href="http://en.m.wikipedia.org/wiki/Squeak" title="Squeak">Squeak</a> implementation has an active community of developers, including many of the original Smalltalk community, and has recently been used to provide the Etoys environment on the <a href="http://en.m.wikipedia.org/wiki/OLPC" title="OLPC" class="mw-redirect">OLPC</a> project, a toolkit for developing collaborative applications <a href="http://en.m.wikipedia.org/wiki/Croquet_Project" title="Croquet Project">Croquet Project</a>, and the <a href="http://en.m.wikipedia.org/wiki/Open_Cobalt" title="Open Cobalt">Open Cobalt</a> virtual world application. <a href="http://en.m.wikipedia.org/wiki/GNU_Smalltalk" title="GNU Smalltalk">GNU Smalltalk</a> is a <a href="http://en.m.wikipedia.org/wiki/Free_software" title="Free software">free software</a> implementation of a derivative of Smalltalk-80 from the <a href="http://en.m.wikipedia.org/wiki/GNU" title="GNU">GNU</a> project. Last but not least <a href="http://en.m.wikipedia.org/wiki/Pharo" title="Pharo">Pharo Smalltalk</a> (a fork of <a href="http://en.m.wikipedia.org/wiki/Squeak" title="Squeak">Squeak</a> oriented towards research and use in commercial environments) a new and clean MIT licensed open source Smalltalk that brings fresh ideas and interest into the Smalltalk market and scene.</p>
<p>A significant development, that has spread across all current Smalltalk environments, is the increasing usage of two web frameworks, <a href="http://en.m.wikipedia.org/wiki/Seaside_(software)" title="Seaside (software)">Seaside</a> and <a href="http://en.m.wikipedia.org/wiki/AIDA/Web" title="AIDA/Web">AIDA/Web</a>, to simplify the building of complex web applications. Seaside has seen considerable market interest with Cincom, Gemstone and Instantiations incorporating and extending it.</p>
<h2> <span class="mw-headline" id="Influences">Influences</span>
</h2>
<table class="metadata plainlinks ambox mbox-small-left ambox-content" style=""><tr>
<td class="mbox-image"><a href="http://en.m.wikipedia.org/wiki/File:Wiki_letter_w_cropped.svg" class="image"><img alt="[icon]" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/20px-Wiki_letter_w_cropped.svg.png" width="20" height="14" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/30px-Wiki_letter_w_cropped.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/40px-Wiki_letter_w_cropped.svg.png 2x"></a></td>
<td class="mbox-text" style=""><span class="mbox-text-span">This section requires <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Smalltalk&amp;action=edit">expansion</a>. <small><i>(October 2009)</i></small></span></td>
</tr></table>
<p><a href="http://en.m.wikipedia.org/wiki/John_Shoch" title="John Shoch">John Shoch</a>, a member of the LRG at PARC, acknowledged in his 1979 paper Smalltalk's debt to Plato's <a href="http://en.m.wikipedia.org/wiki/Platonic_forms" title="Platonic forms" class="mw-redirect">theory of forms</a> in which an ideal archetype becomes the template from which other objects are derived.<sup id="cite_ref-8" class="reference"><a href="Smalltalk#cite_note-8"><span>[</span>8<span>]</span></a></sup></p>
<p>Smalltalk has influenced the wider world of computer programming in four main areas. It inspired the syntax and semantics of other computer programming languages. Secondly, it was a prototype for a <a href="http://en.m.wikipedia.org/wiki/Model_of_computation" title="Model of computation">model of computation</a> known as <a href="http://en.m.wikipedia.org/wiki/Message_passing" title="Message passing">message passing</a>. Thirdly, its <a href="http://en.m.wikipedia.org/wiki/WIMP_(computing)" title="WIMP (computing)">WIMP</a> <a href="http://en.m.wikipedia.org/wiki/GUI" title="GUI" class="mw-redirect">GUI</a> inspired the windowing environments of personal computers in the late twentieth and early twenty-first centuries, so much so that the windows of the first <a href="http://en.m.wikipedia.org/wiki/Macintosh" title="Macintosh">Macintosh</a> desktop look almost identical to the <a href="http://en.m.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" title="Modelâviewâcontroller">MVC</a> windows of Smalltalk-80<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from December 2011">citation needed</span></a></i>]</sup>. Finally, the <a href="Integrated_development_environment" title="Integrated development environment">integrated development environment</a> was the model for a generation of visual programming tools that look like Smalltalk's code browsers and debuggers.</p>
<p><a href="Python_(programming_language)" title="Python (programming language)">Python</a> and <a href="http://en.m.wikipedia.org/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> have reimplemented some Smalltalk ideas in an environment similar to that of <a href="AWK" title="AWK">AWK</a> or <a href="Perl" title="Perl">Perl</a>. The Smalltalk "metamodel" also serves as the inspiration for the object model design of <a href="http://en.m.wikipedia.org/wiki/Perl_6" title="Perl 6">Perl 6</a>.</p>
<p>The syntax and runtime behaviour of the <a href="Objective-C" title="Objective-C">Objective-C</a> programming language is strongly influenced by Smalltalk.</p>
<p>There is also a modular Smalltalk-like implementation designed for scripting called <a href="http://en.m.wikipedia.org/wiki/Script.NET" title="Script.NET">S#</a>, or Script.NET. S# uses <a href="http://en.m.wikipedia.org/wiki/Just-in-time_compilation" title="Just-in-time compilation">just-in-time compilation</a> technology and supports an extended Smalltalk-like language written by David Simmons of Smallscript Corp.<sup id="cite_ref-9" class="reference"><a href="Smalltalk#cite_note-9"><span>[</span>9<span>]</span></a></sup><sup id="cite_ref-10" class="reference"><a href="Smalltalk#cite_note-10"><span>[</span>10<span>]</span></a></sup></p>
<p>Several programming languages like <a href="http://en.m.wikipedia.org/wiki/Self_(programming_language)" title="Self (programming language)">Self</a>, <a href="http://en.m.wikipedia.org/wiki/ECMAScript" title="ECMAScript">ECMAScript</a>/<a href="JavaScript" title="JavaScript">JavaScript</a>, and <a href="http://en.m.wikipedia.org/wiki/Newspeak_(programming_language)" title="Newspeak (programming language)">Newspeak</a> have taken the ideas of Smalltalk in new directions.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from March 2012">citation needed</span></a></i>]</sup></p>
<h2> <span class="mw-headline" id="Object-oriented_programming">Object-oriented programming</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="Object-oriented_programming" title="Object-oriented programming">Object-oriented programming</a>
</div>
<p>As in other object-oriented languages, the central concept in Smalltalk-80 (but not in Smalltalk-72) is that of an <i>object</i>. An object is always an <i>instance</i> of a <i>class</i>. Classes are "blueprints" that describe the properties and behavior of their instances. For example, a GUI's window class might declare that windows have properties such as the label, the position and whether the window is visible or not. The class might also declare that instances support operations such as opening, closing, moving and hiding. Each particular window object would have its own values of those properties, and each of them would be able to perform operations defined by its class.</p>
<p>A Smalltalk object can do exactly three things:</p>
<ol>
<li>Hold state (references to other objects).</li>
<li>Receive a message from itself or another object.</li>
<li>In the course of processing a message, send messages to itself or another object.</li>
</ol>
<p>The state an object holds is always private to that object. Other objects can query or change that state only by sending requests (messages) to the object to do so. Any message can be sent to any object: when a message is received, the receiver determines whether that message is appropriate. Alan Kay has commented that despite the attention given to objects, messaging is the most important concept in Smalltalk: "The big idea is 'messaging' -- that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)."<sup id="cite_ref-11" class="reference"><a href="Smalltalk#cite_note-11"><span>[</span>11<span>]</span></a></sup></p>
<p>Smalltalk is a "pure" object-oriented programming language, meaning that, unlike <a href="Java_(programming_language)" title="Java (programming language)">Java</a> and <a href="C++" title="C++">C++</a>, there is no difference between values which are objects and values which are primitive types. In Smalltalk, primitive values such as integers, booleans and characters are also objects, in the sense that they are instances of corresponding classes, and operations on them are invoked by sending messages. A programmer can change the classes that implement primitive values, so that new behavior can be defined for their instancesâfor example, to implement new control structuresâor even so that their existing behavior will be changed. This fact is summarized in the commonly heard phrase "In Smalltalk everything is an object", which may be more accurately expressed as "all values are objects", as variables are not.</p>
<p>Since all values are objects, <a href="http://en.m.wikipedia.org/wiki/Class_(computer_science)" title="Class (computer science)" class="mw-redirect">classes</a> themselves are also objects. Each class is an instance of the <i><a href="http://en.m.wikipedia.org/wiki/Metaclass" title="Metaclass">metaclass</a></i> of that class. Metaclasses in turn are also objects, and are all instances of a class called Metaclass. <a href="Smalltalk#Code_blocks">Code blocks</a> are also objects.</p>
<h2> <span class="mw-headline" id="Reflection">Reflection</span>
</h2>
<p>Smalltalk-80 is a totally <a href="http://en.m.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflective</a> system, implemented in Smalltalk-80 itself. Smalltalk-80 provides both structural and computational reflection. Smalltalk is a structurally reflective system whose structure is defined by Smalltalk-80 objects. The classes and methods that define the system are themselves objects and fully part of the system that they help define. The Smalltalk compiler compiles textual source code into method objects, typically instances of <code>CompiledMethod</code>. These get added to classes by storing them in a class's method dictionary. The part of the class hierarchy that defines classes can add new classes to the system. The system is extended by running Smalltalk-80 code that creates or defines classes and methods. In this way a Smalltalk-80 system is a "living" system, carrying around the ability to extend itself at run time.</p>
<p>Since the classes are themselves objects, they can be asked questions such as "what methods do you implement?" or "what fields/slots/instance variables do you define?". So objects can easily be inspected, copied, (de)<a href="Serialization" title="Serialization">serialized</a> and so on with generic code that applies to any object in the system.</p>
<p>Smalltalk-80 also provides computational reflection, the ability to observe the computational state of the system. In languages derived from the original Smalltalk-80 the current activation of a method is accessible as an object named via a pseudo-variable (one of the six reserved words), <code>thisContext</code>. By sending messages to <code>thisContext</code> a method activation can ask questions like "who sent this message to me". These facilities make it possible to implement <a href="http://en.m.wikipedia.org/wiki/Coroutine" title="Coroutine">co-routines</a> or <a href="http://en.m.wikipedia.org/wiki/Prolog" title="Prolog">Prolog</a>-like back-tracking without modifying the virtual machine. The exception system is implemented using this facility. One of the more interesting uses of this is in the <a href="http://en.m.wikipedia.org/wiki/Seaside_(software)" title="Seaside (software)">Seaside</a> web framework which relieves the programmer of dealing with the complexity of a Web Browser's back button by storing continuations for each edited page and switching between them as the user navigates a web site. Programming the web server using Seaside can then be done using a more conventional programming style.</p>
<p>When an object is sent a message that it does not implement, the virtual machine sends the object the <code>doesNotUnderstand:</code> message with a <a href="http://en.m.wikipedia.org/wiki/Reification_(computer_science)" title="Reification (computer science)">reification</a> of the message as an argument. The message (another object, an instance of <code>Message</code>) contains the selector of the message and an <code>Array</code> of its arguments. In an interactive Smalltalk system the default implementation of <code>doesNotUnderstand:</code> is one that opens an error window (a Notifier) reporting the error to the user. Through this and the reflective facilities the user can examine the context in which the error occurred, redefine the offending code, and continue, all within the system, using Smalltalk-80's reflective facilities.</p>
<p>Another important use of <code>doesNotUnderstand:</code> is <i>intercession</i>. One can create a class that does not define any methods other than <code>doesNotUnderstand:</code> and does not <a href="http://en.m.wikipedia.org/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)" class="mw-redirect">inherit</a> from any other class. The instances of this class effectively understand no messages. So every time a message is sent to these instances they actually get sent <code>doesNotUnderstand:</code>, hence they intercede in the message sending process. Such objects are called proxies. By implementing <code>doesNotUnderstand:</code> appropriately, one can create distributed systems where proxies forward messages across a network to other Smalltalk systems (a facility common in systems like <a href="http://en.m.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture" title="Common Object Request Broker Architecture">CORBA</a>, <a href="http://en.m.wikipedia.org/wiki/Component_Object_Model" title="Component Object Model">COM+</a> and <a href="http://en.m.wikipedia.org/wiki/Java_remote_method_invocation" title="Java remote method invocation">RMI</a> but first pioneered in Smalltalk-80 in the 1980s), and persistent systems where changes in state are written to a <a href="http://en.m.wikipedia.org/wiki/Database" title="Database">database</a> and the like. An example of this latter is Logic Arts' VOSS (Virtual Object Storage System) available for VA Smalltalk under dual <a href="http://en.m.wikipedia.org/wiki/Open_source" title="Open source">open source</a> and commercial licensing.</p>
<h2> <span class="mw-headline" id="Syntax">Syntax</span>
</h2>
<p><b>Smalltalk-80</b> syntax is rather minimalist, based on only a handful of declarations and reserved words. In fact, only six "keywords" are reserved in Smalltalk: <code>true</code>, <code>false</code>, <code>nil</code>, <code>self</code>, <code>super</code>, and <code>thisContext</code>. These are actually called <i>pseudo-variables</i>, identifiers that follow the rules for variable identifiers but denote bindings that the programmer cannot change. The <code>true</code>, <code>false</code>, and <code>nil</code> pseudo-variables are <a href="http://en.m.wikipedia.org/wiki/Singleton_pattern" title="Singleton pattern">singleton</a> instances. <code>self</code> and <code>super</code> refer to the receiver of a message within a method activated in response to that message, but sends to <code>super</code> are looked up in the superclass of the method's defining class rather than the class of the receiver, which allows methods in subclasses to invoke methods of the same name in superclasses. <code>thisContext</code> refers to the current activation record. The only built-in language constructs are message sends, assignment, method return and literal syntax for some objects. From its origins as a language for children of all ages, standard Smalltalk syntax uses punctuation in a manner more like English than mainstream coding languages. The remainder of the language, including control structures for conditional evaluation and iteration, is implemented on top of the built-in constructs by the standard Smalltalk class library. (For performance reasons, implementations may recognize and treat as special some of those messages; however, this is only an optimization and is not hardwired into the language syntax.)</p>
<h3> <span class="mw-headline" id="Literals">Literals</span>
</h3>
<p>The following examples illustrate the most common objects which can be written as literal values in Smalltalk-80 methods.</p>
<p>Numbers. The following list illustrates some of the possibilities.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">42</span>
-<span class="re5">42</span>
<span class="nu0">123</span>.<span class="re5">45</span>
<span class="nu0">1</span>.<span class="re5">2345e2</span>
2r10010010
16rA000
</pre>
</div>
</div>
<p>The last two entries are a binary and a hexadecimal number, respectively. The number before the 'r' is the <a href="http://en.m.wikipedia.org/wiki/Radix" title="Radix">radix</a> or base. The base does not have to be a power of two; for example 36rSMALLTALK is a valid number equal to 80738163270632 decimal.</p>
<p>Characters are written by preceding them with a dollar sign:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
$<span class="re0">A</span>
</pre>
</div>
</div>
<p>Strings are sequences of characters enclosed in single quotes:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="st0">'Hello, world!'</span>
</pre>
</div>
</div>
<p>To include a quote in a string, escape it using a second quote:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="st0">'I said, '</span><span class="st0">'Hello, world!'</span><span class="st0">' to them.'</span>
</pre>
</div>
</div>
<p>Double quotes do not need escaping, since single quotes delimit a string:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="st0">'I said, "Hello, world!" to them.'</span>
</pre>
</div>
</div>
<p>Two equal strings (strings are equal if they contain all the same characters) can be different objects residing in different places in memory. In addition to strings, Smalltalk has a class of character sequence objects called Symbol. Symbols are guaranteed to be uniqueâthere can be no two equal symbols which are different objects. Because of that, symbols are very cheap to compare and are often used for language artifacts such as message selectors (see below).</p>
<p>Symbols are written as # followed by a string literal. For example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="sy0">#</span><span class="st0">'foo'</span>
</pre>
</div>
</div>
<p>If the sequence does not include whitespace or punctuation characters, this can also be written as:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re1">#foo</span>
</pre>
</div>
</div>
<p><br>
Arrays:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re2">#<span class="br0">(</span><span class="re5">1</span> 2 3 4<span class="br0">)</span></span>
</pre>
</div>
</div>
<p>defines an array of four integers.</p>
<p>Many implementations support the following literal syntax for ByteArrays:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="sy0">#</span><span class="br0">[</span><span class="re5">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">]</span>
</pre>
</div>
</div>
<p>defines a ByteArray of four integers.</p>
<p>And last but not least, blocks (<a href="http://en.m.wikipedia.org/wiki/Anonymous_function" title="Anonymous function">anonymous function</a> literals)</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="br0">[</span>... <span class="re0">Some</span> smalltalk code...<span class="br0">]</span>
</pre>
</div>
</div>
<p>Blocks are explained in detail further in the text.</p>
<p>Many Smalltalk dialects implement additional syntaxes for other objects, but the ones above are the essentials supported by all.</p>
<h3> <span class="mw-headline" id="Variable_declarations">Variable declarations</span>
</h3>
<p>The two kinds of variable commonly used in Smalltalk are instance variables and temporary variables. Other variables and related terminology depend on the particular implementation. For example, <a href="http://en.m.wikipedia.org/wiki/VisualWorks" title="VisualWorks">VisualWorks</a> has class shared variables and namespace shared variables, while <a href="http://en.m.wikipedia.org/wiki/Squeak" title="Squeak">Squeak</a> and many other implementations have class variables, pool variables and global variables.</p>
<p>Temporary variable declarations in Smalltalk are variables declared inside a method (see below). They are declared at the top of the method as names separated by spaces and enclosed by vertical bars. For example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
|<span class="re3"> index </span>|
</pre>
</div>
</div>
<p>declares a temporary variable named index. Multiple variables may be declared within one set of bars:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
|<span class="re3"> index vowels </span>|
</pre>
</div>
</div>
<p>declares two variables: index and vowels.</p>
<h3> <span class="mw-headline" id="Assignment">Assignment</span>
</h3>
<p>A variable is assigned a value via the ':=' syntax. So:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re6">vowels</span> <span class="sy0">:=</span> <span class="st0">'aeiou'</span>
</pre>
</div>
</div>
<p>Assigns the string 'aeiou' to the previously declared vowels variable. The string is an object (a sequence of characters between single quotes is the syntax for literal strings), created by the compiler at compile time.</p>
<p>In the original Parc Place image, the glyph of the underscore character (_) appeared as a left-facing arrow. Smalltalk originally accepted this left-arrow as the only assignment operator. Some modern code still contains what appear to be underscores acting as assignments, hearkening back to this original usage. Most modern Smalltalk implementations accept either the underscore or the colon-equals syntax.</p>
<h3> <span class="mw-headline" id="Messages">Messages</span>
</h3>
<p>The message is the most fundamental language construct in Smalltalk. Even control structures are implemented as <a href="http://en.m.wikipedia.org/wiki/Message_passing" title="Message passing">message sends</a>. Smalltalk adopts by default a synchronous, single <a href="http://en.m.wikipedia.org/wiki/Dynamic_dispatch" title="Dynamic dispatch">dynamic message dispatch</a> strategy (as contrasted to a synchronous, <a href="http://en.m.wikipedia.org/wiki/Multiple_dispatch" title="Multiple dispatch">multiple dispatch</a> strategy adopted by some other object-oriented languages).</p>
<p>The following example sends the message 'factorial' to number 42:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">42</span> factorial
</pre>
</div>
</div>
<p>In this situation 42 is called the message <i>receiver</i>, while 'factorial' is the message <i>selector</i>. The receiver responds to the message by returning a value (presumably in this case the <a href="http://en.m.wikipedia.org/wiki/Factorial" title="Factorial">factorial</a> of 42). Among other things, the result of the message can be assigned to a variable:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re6">aRatherBigNumber</span> <span class="sy0">:=</span> <span class="re5">42</span> factorial
</pre>
</div>
</div>
<p>"factorial" above is what is called a <i>unary message</i> because only one object, the receiver, is involved. Messages can carry additional objects as <i>arguments</i>, as follows:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">2</span> raisedTo: <span class="re5">4</span>
</pre>
</div>
</div>
<p>In this expression two objects are involved: 2 as the receiver and 4 as the message argument. The message result, or in Smalltalk parlance, <i>the answer</i> is supposed to be 16. Such messages are called <i>keyword messages</i>. A message can have more arguments, using the following syntax:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="st0">'hello world'</span> indexOf: $o startingAt: <span class="re5">6</span>
</pre>
</div>
</div>
<p>which answers the index of character 'o' in the receiver string, starting the search from index 6. The selector of this message is "indexOf:startingAt:", consisting of two pieces, or <i>keywords</i>.</p>
<p>Such interleaving of keywords and arguments is meant to improve readability of code, since arguments are explained by their preceding keywords. For example, an expression to create a rectangle using a C++ or Java-like syntax might be written as:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="java source-java">
<pre class="de1">
<span class="kw1">new</span> <span class="kw3">Rectangle</span><span class="br0">(</span><span class="nu0">100</span>, <span class="nu0">200</span><span class="br0">)</span><span class="sy0">;</span>
</pre>
</div>
</div>
<p>It's unclear which argument is which. By contrast, in Smalltalk, this code would be written as:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re0">Rectangle</span> width: <span class="re5">100</span> height: <span class="re5">200</span>
</pre>
</div>
</div>
<p>The receiver in this case is "Rectangle", a class, and the answer will be a new instance of the class with the specified width and height.</p>
<p>Finally, most of the special (non-alphabetic) characters can be used as what are called <i>binary messages</i>. These allow mathematical and logical operators to be written in their traditional form:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">3</span> + <span class="re5">4</span>
</pre>
</div>
</div>
<p>which sends the message "+" to the receiver 3 with 4 passed as the argument (the answer of which will be 7). Similarly,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">3</span> &gt; <span class="nu0">4</span>
</pre>
</div>
</div>
<p>is the message "&gt;" sent to 3 with argument 4 (the answer of which will be false).</p>
<p>Notice, that the Smalltalk-80 language itself does not imply the meaning of those operators. The outcome of the above is only defined by how the receiver of the message (in this case a Number instance) responds to messages "+" and "&gt;".</p>
<p>A side effect of this mechanism is operator overloading. A message "&gt;" can also be understood by other objects, allowing the use of expressions of the form "a &gt; b" to compare them.</p>
<h3> <span class="mw-headline" id="Expressions">Expressions</span>
</h3>
<p>An expression can include multiple message sends. In this case expressions are parsed according to a simple order of precedence. Unary messages have the highest precedence, followed by binary messages, followed by keyword messages. For example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">3</span> factorial + <span class="re5">4</span> factorial between: <span class="re5">10</span> and: <span class="re5">100</span>
</pre>
</div>
</div>
<p>is evaluated as follows:</p>
<ol>
<li>3 receives the message "factorial" and answers 6</li>
<li>4 receives the message "factorial" and answers 24</li>
<li>6 receives the message "+" with 24 as the argument and answers 30</li>
<li>30 receives the message "between:and:" with 10 and 100 as arguments and answers true</li>
</ol>
<p>The answer of the last message sent is the result of the entire expression.</p>
<p>Parentheses can alter the order of evaluation when needed. For example,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="br0">(</span><span class="re5">3</span> factorial + <span class="re5">4</span><span class="br0">)</span> factorial between: <span class="re5">10</span> and: <span class="re5">100</span>
</pre>
</div>
</div>
<p>will change the meaning so that the expression first computes "3 factorial + 4" yielding 10. That 10 then receives the second "factorial" message, yielding 3628800. 3628800 then receives "between:and:", answering false.</p>
<p>Note that because the meaning of binary messages is not hardwired into Smalltalk-80 syntax, all of them are considered to have equal precedence and are evaluated simply from left to right. Because of this, the meaning of Smalltalk expressions using binary messages can be different from their "traditional" interpretation:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">3</span> + <span class="re5">4</span> * <span class="re5">5</span>
</pre>
</div>
</div>
<p>is evaluated as "(3 + 4) * 5", producing 35. To obtain the expected answer of 23, parentheses must be used to explicitly define the order of operations:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">3</span> + <span class="br0">(</span><span class="re5">4</span> * <span class="re5">5</span><span class="br0">)</span>
</pre>
</div>
</div>
<p>Unary messages can be <i>chained</i> by writing them one after another:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="nu0">3</span> factorial factorial log
</pre>
</div>
</div>
<p>which sends "factorial" to 3, then "factorial" to the result (6), then "log" to the result (720), producing the result 2.85733.</p>
<p>A series of expressions can be written as in the following (hypothetical) example, each separated by a period. This example first creates a new instance of class Window, stores it in a variable, and then sends two messages to it.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
 |<span class="re3"> window </span>|
  <span class="re6">window</span> <span class="sy0">:=</span> <span class="re0">Window</span> new.
  <span class="re5">window</span> label: <span class="st0">'Hello'</span>.
  <span class="re5">window</span> open
</pre>
</div>
</div>
<p>If a series of messages are sent to the same receiver as in the example above, they can also be written as a <i>cascade</i> with individual messages separated by semicolons:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
  <span class="re0">Window</span> new
    label: <span class="st0">'Hello'</span>;
    open
</pre>
</div>
</div>
<p>This rewrite of the earlier example as a single expression avoids the need to store the new window in a temporary variable. According to the usual precedence rules, the unary message "new" is sent first, and then "label:" and "open" are sent to the answer of "new".</p>
<h3> <span class="mw-headline" id="Code_blocks">Code blocks</span>
</h3>
<p>A block of code (an anonymous function) can be expressed as a literal value (which is an object, since all values are objects.) This is achieved with square brackets:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="br0">[</span> :<span class="re5">params</span> | &lt;message-<span class="re5">expressions</span>&gt; <span class="br0">]</span>
</pre>
</div>
</div>
<p>Where <i>:params</i> is the list of parameters the code can take. This means that the Smalltalk code:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="br0">[</span>:<span class="re5">x</span> | x + <span class="re5">1</span><span class="br0">]</span>
</pre>
</div>
</div>
<p>can be understood as:</p>
<p><img class="tex" alt="f" src="http://upload.wikimedia.org/math/8/f/a/8fa14cdd754f91cc6554c9e71929cce7.png">Â : <img class="tex" alt="f(x) = x + 1" src="http://upload.wikimedia.org/math/e/1/0/e10f5e264a673c436770eeb7b895ec3d.png"></p>
<p>or expressed in lambda terms as:</p>
<p><img class="tex" alt="\lambda x" src="http://upload.wikimedia.org/math/d/0/8/d08b62e799e1ff8f24464dc26a2daebe.png">Â : <img class="tex" alt="x + 1" src="http://upload.wikimedia.org/math/c/f/2/cf267a0bc414e4ea2681d6bd522a8992.png"></p>
<p>and</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="br0">[</span>:<span class="re5">x</span> | x + <span class="re5">1</span><span class="br0">]</span> value: <span class="re5">3</span>
</pre>
</div>
</div>
<p>can be evaluated as</p>
<p><img class="tex" alt="f(3) = 3 + 1" src="http://upload.wikimedia.org/math/c/b/8/cb8a46ccb0c08658c44210999a855918.png"></p>
<p>Or in lambda terms as:</p>
<p><img class="tex" alt="(\lambda xÂ : x + 1) 3 _\beta\rightarrow 4" src="http://upload.wikimedia.org/math/7/7/2/772e506a9ac6994e51c731983190db1e.png"></p>
<p>The resulting block object can form a <a href="http://en.m.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)">closure</a>: it can access the variables of its enclosing lexical scopes at any time. Blocks are <a href="http://en.m.wikipedia.org/wiki/First-class_object" title="First-class object" class="mw-redirect">first-class objects</a>.</p>
<p>Blocks can be executed by sending them the <i>value</i> message (compound variations exist in order to provide parameters to the block e.g. 'value:value:' and 'valueWithArguments:').</p>
<p>The literal representation of blocks was an innovation which on the one hand allowed certain code to be significantly more readable; it allowed algorithms involving iteration to be coded in a clear and concise way. Code that would typically be written with loops in some languages can be written concisely in Smalltalk using blocks, sometimes in a single line. But more importantly blocks allow control structure to be expressed using messages and polymorphism, since blocks defer computation and polymorphism can be used to select alternatives. So if-then-else in Smalltalk is written and implemented as</p>
<blockquote>
<p>expr ifTrue: [statements to evaluate if expr] ifFalse: [statements to evaluate if not expr]<br><br><i>True methods for evaluation</i><br><b>ifTrue:</b> trueAlternativeBlock <b>ifFalse:</b> falseAlternativeBlock<br>
Â Â Â Â ^trueAlternativeBlock value<br><i>False methods for evaluation</i><br><b>ifTrue:</b> trueAlternativeBlock <b>ifFalse:</b> falseAlternativeBlock<br>
Â Â Â Â ^falseAlternativeBlock value</p>
</blockquote>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re6">positiveAmounts</span> <span class="sy0">:=</span> <span class="re5">allAmounts</span> select: <span class="br0">[</span>:<span class="re5">anAmount</span> | anAmount isPositive<span class="br0">]</span>
</pre>
</div>
</div>
<p>Note that this is related to <a href="Functional_programming" title="Functional programming">functional programming</a>, wherein patterns of computation (here selection) are <a href="http://en.m.wikipedia.org/wiki/Abstraction_(computer_science)" title="Abstraction (computer science)">abstracted</a> into <a href="Higher-order_function" title="Higher-order function">higher-order functions</a>. For example, the message <i>select:</i> on a Collection is equivalent to the higher-order function <a href="http://en.m.wikipedia.org/wiki/Filter_(higher-order_function)" title="Filter (higher-order function)">filter</a> on an appropriate <a href="http://en.m.wikipedia.org/wiki/Function_object" title="Function object">functor</a>.</p>
<h2> <span class="mw-headline" id="Control_structures">Control structures</span>
</h2>
<p>Control structures do not have special syntax in Smalltalk. They are instead implemented as messages sent to objects. For example, conditional execution is implemented by sending the message ifTrue: to a Boolean object, passing as an argument the block of code to be executed if and only if the Boolean receiver is true.</p>
<p>The following code demonstrates this:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re6">result</span> <span class="sy0">:=</span> <span class="re5">a</span> &gt; b
    ifTrue:<span class="br0">[</span> <span class="st0">'greater'</span> <span class="br0">]</span>
    ifFalse:<span class="br0">[</span> <span class="st0">'less or equal'</span> <span class="br0">]</span>
</pre>
</div>
</div>
<p>Blocks are also used to implement user-defined control structures, enumerators, visitors, pluggable behavior and many other patterns. For example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
|<span class="re3"> aString vowels </span>|
<span class="re6">aString</span> <span class="sy0">:=</span> <span class="st0">'This is a string'</span>.
<span class="re5">vowels</span> <span class="sy0">:=</span> <span class="re5">aString</span> select: <span class="br0">[</span>:<span class="re5">aCharacter</span> | aCharacter isVowel<span class="br0">]</span>.
</pre>
</div>
</div>
<p>In the last line, the string is sent the message select: with an argument that is a code block literal. The code block literal will be used as a predicate function that should answer true if and only if an element of the String should be included in the Collection of characters that satisfy the test represented by the code block that is the argument to the "select:" message.</p>
<p>A String object responds to the "select:" message by iterating through its members (by sending itself the message "do:"), evaluating the selection block ("aBlock") once with each character it contains as the argument. When evaluated (by being sent the message "value: each"), the selection block (referenced by the parameter "aBlock", and defined by the block literal "[:aCharacter | aCharacter isVowel]"), answers a boolean, which is then sent "ifTrue:". If the boolean is the object true, the character is added to a string to be returned. Because the "select:" method is defined in the abstract class Collection, it can also be used like this:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
|<span class="re3"> rectangles aPoint collisions </span>|
<span class="re6">rectangles</span> <span class="sy0">:=</span> <span class="re0">OrderedCollection</span> 
  with: <span class="br0">(</span><span class="re0">Rectangle</span> left: <span class="re5">0</span> right: <span class="re5">10</span> top: <span class="re5">100</span> bottom: <span class="re5">200</span><span class="br0">)</span>
  with: <span class="br0">(</span><span class="re0">Rectangle</span> left: <span class="re5">10</span> right: <span class="re5">10</span> top: <span class="re5">110</span> bottom: <span class="re5">210</span><span class="br0">)</span>.
<span class="re5">aPoint</span> <span class="sy0">:=</span> <span class="re0">Point</span> x: <span class="re5">20</span> y: <span class="re5">20</span>.
<span class="re5">collisions</span> <span class="sy0">:=</span> <span class="re5">rectangles</span> select: <span class="br0">[</span>:<span class="re5">aRect</span> | aRect containsPoint: <span class="re5">aPoint</span><span class="br0">]</span>.
</pre>
</div>
</div>
<h2> <span class="mw-headline" id="Classes">Classes</span>
</h2>
<p>This is a stock class definition:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re0">Object</span> subclass: <span class="re1">#MessagePublisher</span>
    instanceVariableNames: <span class="st0">''</span>
    classVariableNames: <span class="st0">''</span>
    poolDictionaries: <span class="st0">''</span>
    category: <span class="st0">'Smalltalk Examples'</span>
</pre>
</div>
</div>
<p>Often, most of this definition will be filled in by the environment. Notice that this is actually a message to the "Object"-class to create a subclass called "MessagePublisher". In other words: classes are <a href="http://en.m.wikipedia.org/wiki/First-class_object" title="First-class object" class="mw-redirect">first-class objects</a> in Smalltalk which can receive messages just like any other object and can be created dynamically at execution time.</p>
<h3> <span class="mw-headline" id="Methods">Methods</span>
</h3>
<p>When an object receives a message, a method matching the message name is invoked. The following code defines a method publish, and so defines what will happen when this object receives the 'publish' message.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
publish
    <span class="re0">Transcript</span> show: <span class="st0">'Hello, World!'</span>
</pre>
</div>
</div>
<p>The following method demonstrates receiving multiple arguments and returning a value:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
quadMultiply: <span class="re5">i1</span> and: <span class="re5">i2</span> 
    <span class="coMULTI">"This method multiplies the given numbers by each other and the result by 4."</span>
    |<span class="re3"> mul </span>|
    <span class="re6">mul</span> <span class="sy0">:=</span> <span class="re5">i1</span> * <span class="re5">i2</span>.
    ^mul * <span class="re5">4</span>
</pre>
</div>
</div>
<p>The method's name is <code>#quadMultiply:and:</code>. The return value is specified with the <code>^</code> operator.</p>
<p>Note that objects are responsible for determining dynamically at runtime which method to execute in response to a messageâwhile in many languages this may be (sometimes, or even always) determined statically at compile time.</p>
<h3> <span class="mw-headline" id="Instantiating_classes">Instantiating classes</span>
</h3>
<p>The following code:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re0">MessagePublisher</span> new
</pre>
</div>
</div>
<p>creates (and returns) a new instance of the MessagePublisher class. This is typically assigned to a variable:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re6">publisher</span> <span class="sy0">:=</span> <span class="re0">MessagePublisher</span> new
</pre>
</div>
</div>
<p>However, it is also possible to send a message to a temporary, anonymous object:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re0">MessagePublisher</span> new publish
</pre>
</div>
</div>
<h2> <span class="mw-headline" id="Hello_World_example">Hello World example</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Hello_world_program" title="Hello world program">Hello world program</a>
</div>
<p>In the following code, the message "show:" is sent to the object "Transcript" with the String literal 'Hello, world!' as its argument. Invocation of the "show:" method causes the characters of its argument (the String literal 'Hello, world!') to be displayed in the transcript ("terminal") window.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="smalltalk source-smalltalk">
<pre class="de1">
<span class="re0">Transcript</span> show: <span class="st0">'Hello, world!'</span>.
</pre>
</div>
</div>
<p>Note that a Transcript window would need to be open in order to see the results of this example.</p>
<h2> <span class="mw-headline" id="Image-based_persistence">Image-based persistence</span>
</h2>
<p>Most popular programming systems separate static program code (in the form of class definitions, functions or procedures) from dynamic, or <a href="Run_time_(program_lifecycle_phase)" title="Run time (program lifecycle phase)">run time</a>, program state (such as objects or other forms of program data). They load program code when a program starts, and any prior program state must be recreated explicitly from configuration files or other data sources. Any settings the program (and programmer) does not explicitly save must be set up again for each restart. A traditional program also loses much useful document information each time a program saves a file, quits, and reloads. This loses details such as undo history or cursor position. Image based systems don't force losing all that just because a computer is turned off, or an OS updates.</p>
<p>Many Smalltalk systems, however, do not differentiate between program data (objects) and code (classes). In fact, classes are objects themselves. Therefore most Smalltalk systems store the entire program state (including both Class and non-Class objects) in an <a href="http://en.m.wikipedia.org/wiki/System_image" title="System image">image</a> file. The image can then be loaded by the Smalltalk <a href="http://en.m.wikipedia.org/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> to restore a Smalltalk-like system to a prior state. This was inspired by FLEX,<sup id="cite_ref-12" class="reference"><a href="Smalltalk#cite_note-12"><span>[</span>12<span>]</span></a></sup> a language created by <a href="http://en.m.wikipedia.org/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a> and described in his M.Sc. thesis.</p>
<p>Other languages that model application code as a form of data, such as <a href="http://en.m.wikipedia.org/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a>, often use image-based persistence as well.</p>
<p>Smalltalk images are similar to (restartable) <a href="http://en.m.wikipedia.org/wiki/Core_dump" title="Core dump">core dumps</a> and can provide the same functionality as core dumps, such as delayed or remote debugging with full access to the program state at the time of error.</p>
<h2> <span class="mw-headline" id="Level_of_access">Level of access</span>
</h2>
<p>Everything in Smalltalk-80 is available for modification from within a running program. This means that, for example, the <a href="Integrated_development_environment" title="Integrated development environment">IDE</a> can be changed in a running system without restarting it. In some implementations, the syntax of the language or the <a href="Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a> implementation can also be changed <a href="http://en.m.wikipedia.org/wiki/On_the_fly" title="On the fly">on the fly</a>. Even the statement <code>true become: false</code> is valid in Smalltalk, although executing it is not recommended. When used judiciously, this level of flexibility allows for one of the shortest required times for new code to enter a production system.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources from May 2012">citation needed</span></a></i>]</sup></p>
<h2> <span class="mw-headline" id="Just-in-time_compilation">Just-in-time compilation</span>
</h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.m.wikipedia.org/wiki/Just-in-time_compilation" title="Just-in-time compilation">Just-in-time compilation</a>
</div>
<p>Smalltalk programs are usually compiled to <a href="http://en.m.wikipedia.org/wiki/Bytecode" title="Bytecode">bytecode</a>, which is then interpreted by a <a href="http://en.m.wikipedia.org/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> or dynamically translated into machine-native code.</p>
<h2> <span class="mw-headline" id="List_of_implementations">List of implementations</span>
</h2>
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/Amber_Smalltalk" title="Amber Smalltalk">Amber Smalltalk</a> Smalltalk running atop <a href="JavaScript" title="JavaScript">JavaScript</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Athena" title="Athena">Athena</a>, Smalltalk scripting engine for Java &gt;=1.6</li>
<li><a href="http://en.m.wikipedia.org/wiki/Bistro_programming_language" title="Bistro programming language" class="mw-redirect">Bistro</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Cincom" title="Cincom" class="mw-redirect">Cincom</a> has the following Smalltalk products: <a href="http://en.m.wikipedia.org/wiki/ObjectStudio" title="ObjectStudio" class="mw-redirect">ObjectStudio</a>, <a href="http://en.m.wikipedia.org/wiki/VisualWorks" title="VisualWorks">VisualWorks</a> and <span class="new" title="WebVelocity (page does not exist)">WebVelocity</span>.
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/Visual_Smalltalk_Enterprise" title="Visual Smalltalk Enterprise">Visual Smalltalk Enterprise</a>, and family, including Smalltalk/V</li>
</ul>
</li>
<li>
<span class="new" title="Exept Software (page does not exist)">Exept Software</span>, <span class="new" title="Smalltalk/X (page does not exist)">Smalltalk/X</span>
</li>
<li><a href="http://en.m.wikipedia.org/wiki/F-Script_programming_language" title="F-Script programming language" class="mw-redirect">F-Script</a></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Gemstone_(database)" title="Gemstone (database)">Gemstone</a>, <a href="http://en.m.wikipedia.org/wiki/Database_Management_System" title="Database Management System" class="mw-redirect">GemStone/S</a>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/GNU_Smalltalk" title="GNU Smalltalk">GNU Smalltalk</a>
<ul>
<li>
<span class="new" title="ÃtoilÃ© Pragmatic Smalltalk (page does not exist)">ÃtoilÃ© Pragmatic Smalltalk</span>, Smalltalk for ÃtoilÃ©, a GNUstep-based user environment</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/StepTalk" title="StepTalk">StepTalk</a>, GNUstep scripting framework uses Smalltalk language on an <a href="Objective-C" title="Objective-C">Objective-C</a> runtime</li>
</ul>
</li>
<li>
<span class="new" title="Instantiations (page does not exist)">Instantiations</span>, VA Smalltalk being the follow-on to IBM VisualAge Smalltalk
<ul>
<li>
<a href="IBM_VisualAge" title="IBM VisualAge">VisualAge</a> Smalltalk</li>
</ul>
</li>
<li><a href="http://en.m.wikipedia.org/wiki/Little_Smalltalk" title="Little Smalltalk">Little Smalltalk</a></li>
<li>
<span class="new" title="Object Arts (page does not exist)">Object Arts</span>, <a href="http://en.m.wikipedia.org/wiki/Dolphin_Smalltalk" title="Dolphin Smalltalk">Dolphin Smalltalk</a>
</li>
<li>
<span class="new" title="Object Connect (page does not exist)">Object Connect</span>, <a href="http://en.m.wikipedia.org/wiki/Smalltalk_MT" title="Smalltalk MT">Smalltalk MT</a> Smalltalk for Windows
<ul>
<li>
<span class="new" title="LSW Vision-Smalltalk (page does not exist)">LSW Vision-Smalltalk</span> have partnered with Object Arts</li>
</ul>
</li>
<li>
<span class="new" title="Panda Smalltalk (page does not exist)">Panda Smalltalk</span>, open source engine, written in C, has no dependencies except libc</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Pharo" title="Pharo">Pharo Smalltalk</a>, Pharo Project's open-source multi-platform Smalltalk</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Pocket_Smalltalk" title="Pocket Smalltalk">Pocket Smalltalk</a>, runs on Palm Pilot</li>
<li>
<span class="new" title="Refactory (page does not exist)">Refactory</span>, produces <a href="Smalltalk#Smalltalk">#Smalltalk</a>
</li>
<li><a href="http://en.m.wikipedia.org/wiki/Smalltalk_YX" title="Smalltalk YX">Smalltalk YX</a></li>
<li><span class="new" title="Smalltalk/X (page does not exist)">Smalltalk/X</span></li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Squeak" title="Squeak">Squeak</a>, open source Smalltalk
<ul>
<li>
<span class="new" title="Cog (computing) (page does not exist)">Cog</span>, <a href="http://en.m.wikipedia.org/wiki/Just-in-time_compilation" title="Just-in-time compilation">JIT</a> VM written in Squeak Smalltalk
<ul>
<li>
<span class="new" title="CogDroid (page does not exist)">CogDroid</span>, port of non-JIT variant of Cog VM to Android</li>
</ul>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Etoys_(programming_language)" title="Etoys (programming language)">eToys</a>, eToys visual programming system for learning</li>
<li>
<span class="new" title="ISqueak (page does not exist)">iSqueak</span>, Squeak interpreter port for iOS devices, iPhone/iPad</li>
<li>
<span class="new" title="JSqueak (page does not exist)">JSqueak</span>, Squeak interpreter written in Java
<ul>
<li>
<a href="http://en.m.wikipedia.org/wiki/Potato" title="Potato">Potato</a>, Squeak interpreter written in Java, a direct derivative of <span class="new" title="JSqueak (page does not exist)">JSqueak</span>
</li>
</ul>
</li>
<li>
<span class="new" title="RoarVM (page does not exist)">RoarVM</span>, RoarVM is a multi- and manycore interpreter for Squeak and Pharo</li>
</ul>
</li>
<li>
<a href="http://en.m.wikipedia.org/wiki/Strongtalk" title="Strongtalk">Strongtalk</a>, for Windows, offers optional strong typing</li>
<li>
<span class="new" title="Susie (software) (page does not exist)">Susie</span>, a light-weight scripting engine using Smalltalk as the language, based on Public Domain SmallTalk.</li>
</ul>
<h2> <span class="mw-headline" id="References">References</span>
</h2>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-History-1">
<span class="mw-cite-backlink">^ <a href="Smalltalk#cite_ref-History_1-0"><sup><i><b>a</b></i></sup></a> <a href="Smalltalk#cite_ref-History_1-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation web">Kay, Alan. <a rel="nofollow" class="external text" href="http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html">"The Early History of Smalltalk"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html">http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html</a></span><span class="reference-accessdate">. Retrieved 2007-09-13</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=The+Early+History+of+Smalltalk&amp;rft.atitle=&amp;rft.aulast=Kay&amp;rft.aufirst=Alan&amp;rft.au=Kay%2C%26%2332%3BAlan&amp;rft_id=http%3A%2F%2Fgagne.homedns.org%2F%7Etgagne%2Fcontrib%2FEarlyHistoryST.html&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-2">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-2">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://www.smalltalk.org/versions/ANSIStandardSmalltalk.html">http://www.smalltalk.org/versions/ANSIStandardSmalltalk.html</a></span>
</li>
<li id="cite_note-3">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-3">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.smalltalk.org/versions">"Versions"</a>. Smalltalk.org<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.smalltalk.org/versions">http://www.smalltalk.org/versions</a></span><span class="reference-accessdate">. Retrieved 2007-09-13</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Versions&amp;rft.atitle=&amp;rft.pub=Smalltalk.org&amp;rft_id=http%3A%2F%2Fwww.smalltalk.org%2Fversions&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-4">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-4">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.smalltalk.org/versions/ANSIStandardSmalltalk.html">"ANSI Smalltalk Standard"</a>. Smalltalk.org<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.smalltalk.org/versions/ANSIStandardSmalltalk.html">http://www.smalltalk.org/versions/ANSIStandardSmalltalk.html</a></span><span class="reference-accessdate">. Retrieved 2007-09-13</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=ANSI+Smalltalk+Standard&amp;rft.atitle=&amp;rft.pub=Smalltalk.org&amp;rft_id=http%3A%2F%2Fwww.smalltalk.org%2Fversions%2FANSIStandardSmalltalk.html&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-5">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-5">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://wiki.cs.uiuc.edu/VisualWorks/Smalltalk-80+in+a+box">Hobbes</a></span>
</li>
<li id="cite_note-6">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-6">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.seagullsoftware.com/about/history.html#1999">"History"</a>. Seagull Software<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.seagullsoftware.com/about/history.html#1999">http://www.seagullsoftware.com/about/history.html#1999</a></span><span class="reference-accessdate">. Retrieved 2007-09-13</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=History&amp;rft.atitle=&amp;rft.pub=Seagull+Software&amp;rft_id=http%3A%2F%2Fwww.seagullsoftware.com%2Fabout%2Fhistory.html%231999&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-7">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-7">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.instantiations.com/company/ibm-transition.html">VisualAge Smalltalk Transition FAQ</a></span>
</li>
<li id="cite_note-8">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-8">^</a></b></span> <span class="reference-text">"<i>Smalltalk, Objects, and Design</i>", Chamond Liu, p. 30, iUniverse reprint, 2000, <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/1583484906" class="internal mw-magiclink-isbn">ISBN 1-58348-490-6</a>,</span>
</li>
<li id="cite_note-9">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-9">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.ssharp.org">S#</a></span>
</li>
<li id="cite_note-10">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-10">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.smallscript.com">Smallscript Corp.</a></span>
</li>
<li id="cite_note-11">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-11">^</a></b></span> <span class="reference-text"><span class="citation web">Kay, Alan (October 10, 1998). <a rel="nofollow" class="external text" href="http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html">"Prototypes vs Classes (e-mail on Squeak list)"</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html">http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Prototypes+vs+Classes+%28e-mail+on+Squeak+list%29&amp;rft.atitle=&amp;rft.aulast=Kay&amp;rft.aufirst=Alan&amp;rft.au=Kay%2C%26%2332%3BAlan&amp;rft.date=October+10%2C+1998&amp;rft_id=http%3A%2F%2Flists.squeakfoundation.org%2Fpipermail%2Fsqueak-dev%2F1998-October%2F017019.html&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span></span>
</li>
<li id="cite_note-12">
<span class="mw-cite-backlink"><b><a href="Smalltalk#cite_ref-12">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.mprove.de/diplom/gui/kay68.html">FLEX: A flexible extendable language</a></span>
</li>
</ol>
</div>
<h2> <span class="mw-headline" id="Further_reading">Further reading</span>
</h2>
<ul>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)" title="Adele Goldberg (computer scientist)">Goldberg, Adele</a> (December 1983). <i>Smalltalk-80: The Interactive Programming Environment</i>. Addison-Wesley. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-201-11372-4" title="Special:BookSources/0-201-11372-4">0-201-11372-4</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Smalltalk-80%3A+The+Interactive+Programming+Environment&amp;rft.aulast=Goldberg&amp;rft.aufirst=Adele&amp;rft.au=Goldberg%2C%26%2332%3BAdele&amp;rft.date=December+1983&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-201-11372-4&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)" title="Adele Goldberg (computer scientist)">Adele Goldberg</a> &amp; <a href="http://en.m.wikipedia.org/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a>, ed. (March 1976). <a rel="nofollow" class="external text" href="http://www.bitsavers.org/pdf/xerox/parc/techReports/Smalltalk-72_Instruction_Manual_Mar76.pdf"><i>Smalltalk-72 Instruction Manual</i></a>. Palo Alto, California: <a href="http://en.m.wikipedia.org/wiki/Xerox" title="Xerox">Xerox</a> <a href="http://en.m.wikipedia.org/wiki/Palo_Alto_Research_Center" title="Palo Alto Research Center" class="mw-redirect">Palo Alto Research Center</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.bitsavers.org/pdf/xerox/parc/techReports/Smalltalk-72_Instruction_Manual_Mar76.pdf">http://www.bitsavers.org/pdf/xerox/parc/techReports/Smalltalk-72_Instruction_Manual_Mar76.pdf</a></span><span class="reference-accessdate">. Retrieved 2011-11-11</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Smalltalk-72+Instruction+Manual&amp;rft.date=March+1976&amp;rft.place=Palo+Alto%2C+California&amp;rft.pub=%5B%5BXerox%5D%5D+%5B%5BPalo+Alto+Research+Center%5D%5D&amp;rft_id=http%3A%2F%2Fwww.bitsavers.org%2Fpdf%2Fxerox%2Fparc%2FtechReports%2FSmalltalk-72_Instruction_Manual_Mar76.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)" title="Adele Goldberg (computer scientist)">Goldberg, Adele</a>; Robson, David (May 1983). <a rel="nofollow" class="external text" href="http://stephane.ducasse.free.fr/FreeBooks/BlueBook/Bluebook.pdf"><i>Smalltalk-80: The Language and its Implementation</i></a>. Addison-Wesley. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-201-11371-6" title="Special:BookSources/0-201-11371-6">0-201-11371-6</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://stephane.ducasse.free.fr/FreeBooks/BlueBook/Bluebook.pdf">http://stephane.ducasse.free.fr/FreeBooks/BlueBook/Bluebook.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Smalltalk-80%3A+The+Language+and+its+Implementation&amp;rft.aulast=Goldberg&amp;rft.aufirst=Adele&amp;rft.au=Goldberg%2C%26%2332%3BAdele&amp;rft.au=Robson%2C%26%2332%3BDavid&amp;rft.date=May+1983&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-201-11371-6&amp;rft_id=http%3A%2F%2Fstephane.ducasse.free.fr%2FFreeBooks%2FBlueBook%2FBluebook.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation book"><a href="http://en.m.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)" title="Adele Goldberg (computer scientist)">Goldberg, Adele</a>; Robson, David (11 January 1989). <i>Smalltalk 80: The Language</i>. Addison-Wesley. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-201-13688-0" title="Special:BookSources/0-201-13688-0">0-201-13688-0</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Smalltalk+80%3A+The+Language&amp;rft.aulast=Goldberg&amp;rft.aufirst=Adele&amp;rft.au=Goldberg%2C%26%2332%3BAdele&amp;rft.au=Robson%2C%26%2332%3BDavid&amp;rft.date=11+January+1989&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-201-13688-0&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/Alan_Kay" title="Alan Kay">Kay, Alan C.</a> (March 1993). <a rel="nofollow" class="external text" href="http://www.metaobject.com/papers/Smallhistory.pdf">"The Early History of Smalltalk"</a>. <i>ACM <a href="SIGPLAN" title="SIGPLAN">SIGPLAN</a> Notices</i> (<a href="Association_for_Computing_Machinery" title="Association for Computing Machinery">ACM</a>) <b>28</b> (3): 69â95. <a href="Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F155360.155364">10.1145/155360.155364</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.metaobject.com/papers/Smallhistory.pdf">http://www.metaobject.com/papers/Smallhistory.pdf</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=The+Early+History+of+Smalltalk&amp;rft.jtitle=ACM+%5B%5BSIGPLAN%5D%5D+Notices&amp;rft.aulast=Kay&amp;rft.aufirst=Alan+C.&amp;rft.au=Kay%2C%26%2332%3BAlan+C.&amp;rft.date=March+1993&amp;rft.volume=28&amp;rft.issue=3&amp;rft.pages=69%E2%80%9395&amp;rft.pub=%5B%5BAssociation+for+Computing+Machinery%7CACM%5D%5D&amp;rft_id=info:doi/10.1145%2F155360.155364&amp;rft_id=http%3A%2F%2Fwww.metaobject.com%2Fpapers%2FSmallhistory.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation book">Glen Krasner, ed. (August 1983). <i>Smalltalk-80: Bits of History, Words of Advice</i>. Addison-Wesley. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/0-201-11669-3" title="Special:BookSources/0-201-11669-3">0-201-11669-3</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Smalltalk-80%3A+Bits+of+History%2C+Words+of+Advice&amp;rft.date=August+1983&amp;rft.pub=Addison-Wesley&amp;rft.isbn=0-201-11669-3&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation book">Nierstrasz, Oscar; Ducasse, StÃ©phane; Pollet, Damien; Black, Andrew P. (2009-10-07). <a rel="nofollow" class="external text" href="http://www.squeakbyexample.org"><i>Squeak by Example</i></a>. Kehrsatz, Switzerland: Square Bracket Associates. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/3-9523341-0-3" title="Special:BookSources/3-9523341-0-3">3-9523341-0-3</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://www.squeakbyexample.org">http://www.squeakbyexample.org</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Squeak+by+Example&amp;rft.aulast=Nierstrasz&amp;rft.aufirst=Oscar&amp;rft.au=Nierstrasz%2C%26%2332%3BOscar&amp;rft.au=Ducasse%2C%26%2332%3BSt%C3%A9phane&amp;rft.au=Pollet%2C%26%2332%3BDamien&amp;rft.au=Black%2C%26%2332%3BAndrew+P.&amp;rft.date=2009-10-07&amp;rft.place=Kehrsatz%2C+Switzerland&amp;rft.pub=Square+Bracket+Associates&amp;rft.isbn=3-9523341-0-3&amp;rft_id=http%3A%2F%2Fwww.squeakbyexample.org&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation book">Nierstrasz, Oscar; Ducasse, StÃ©phane; Pollet, Damien; Black, Andrew P. (February 23, 2010). <a rel="nofollow" class="external text" href="http://pharobyexample.org/"><i>Pharo by Example</i></a>. Kehrsatz, Switzerland: Square Bracket Publishing. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-3-9523341-4-0" title="Special:BookSources/978-3-9523341-4-0">978-3-9523341-4-0</a><span class="printonly">. <a rel="nofollow" class="external free" href="http://pharobyexample.org/">http://pharobyexample.org/</a></span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Pharo+by+Example&amp;rft.aulast=Nierstrasz&amp;rft.aufirst=Oscar&amp;rft.au=Nierstrasz%2C%26%2332%3BOscar&amp;rft.au=Ducasse%2C%26%2332%3BSt%C3%A9phane&amp;rft.au=Pollet%2C%26%2332%3BDamien&amp;rft.au=Black%2C%26%2332%3BAndrew+P.&amp;rft.date=February+23%2C+2010&amp;rft.place=Kehrsatz%2C+Switzerland&amp;rft.pub=Square+Bracket+Publishing&amp;rft.isbn=978-3-9523341-4-0&amp;rft_id=http%3A%2F%2Fpharobyexample.org%2F&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation book">Winston, Patrick Henry (September3, 1997). <i>On to Smalltalk</i>. MIT, USA: Addison Wesley. <a href="International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>Â <a href="http://en.m.wikipedia.org/wiki/Special:BookSources/978-0201498271" title="Special:BookSources/978-0201498271">978-0201498271</a>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=On+to+Smalltalk&amp;rft.aulast=Winston&amp;rft.aufirst=Patrick+Henry&amp;rft.au=Winston%2C%26%2332%3BPatrick+Henry&amp;rft.date=September3%2C+1997&amp;rft.place=MIT%2C+USA&amp;rft.pub=Addison+Wesley&amp;rft.isbn=978-0201498271&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
<li>
<span class="citation Journal"><a rel="nofollow" class="external text" href="http://www.em.net/Byte_1981_08/Byte_1981_08_150dpi.pdf">"Special Issue on Smalltalk"</a>. <i><a href="http://en.m.wikipedia.org/wiki/BYTE" title="BYTE" class="mw-redirect">BYTE</a></i> (McGraw-Hill) <b>6</b> (8). August 1981<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.em.net/Byte_1981_08/Byte_1981_08_150dpi.pdf">http://www.em.net/Byte_1981_08/Byte_1981_08_150dpi.pdf</a></span><span class="reference-accessdate">. Retrieved 2011-11-11</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Special+Issue+on+Smalltalk&amp;rft.jtitle=%5B%5BBYTE%5D%5D&amp;rft.date=August+1981&amp;rft.volume=6&amp;rft.issue=8&amp;rft.pub=McGraw-Hill&amp;rft_id=http%3A%2F%2Fwww.em.net%2FByte_1981_08%2FByte_1981_08_150dpi.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
<ul>
<li>
<span class="citation Journal"><a href="http://en.m.wikipedia.org/wiki/Dan_Ingalls" title="Dan Ingalls" class="mw-redirect">Ingalls, Dan</a> (August 1981). <a rel="nofollow" class="external text" href="http://web.archive.org/web/20060616024135/www.ipa.net/~dwighth/smalltalk/byte_aug81/design_principles_behind_smalltalk.html">"Design Principles Behind Smalltalk"</a>. <i><a href="http://en.m.wikipedia.org/wiki/BYTE" title="BYTE" class="mw-redirect">BYTE</a></i> (McGraw-Hill) <b>6</b> (8)<span class="printonly">. <a rel="nofollow" class="external free" href="http://web.archive.org/web/20060616024135/www.ipa.net/~dwighth/smalltalk/byte_aug81/design_principles_behind_smalltalk.html">http://web.archive.org/web/20060616024135/www.ipa.net/~dwighth/smalltalk/byte_aug81/design_principles_behind_smalltalk.html</a></span><span class="reference-accessdate">. Retrieved 2011-11-11</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Design+Principles+Behind+Smalltalk&amp;rft.jtitle=%5B%5BBYTE%5D%5D&amp;rft.aulast=Ingalls&amp;rft.aufirst=Dan&amp;rft.au=Ingalls%2C%26%2332%3BDan&amp;rft.date=August+1981&amp;rft.volume=6&amp;rft.issue=8&amp;rft.pub=McGraw-Hill&amp;rft_id=http%3A%2F%2Fweb.archive.org%2Fweb%2F20060616024135%2Fwww.ipa.net%2F%7Edwighth%2Fsmalltalk%2Fbyte_aug81%2Fdesign_principles_behind_smalltalk.html&amp;rfr_id=info:sid/en.wikipedia.org:Smalltalk"><span style="display: none;">Â </span></span>
</li>
</ul>
</li>
</ul>
<h2> <span class="mw-headline" id="External_links">External links</span>
</h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;"><tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x"></td>
<td class="mbox-text plainlist" style="">Wikibooks has a book on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Programming:Smalltalk" class="extiw" title="wikibooks:Programming:Smalltalk">Programming:Smalltalk</a></b></i>
</td>
</tr></table>
<ul>
<li>
<a rel="nofollow" class="external text" href="http://www.world.st/">The World of Smalltalk</a>, Smalltalk books and videos, implementations, frameworks and tools, blogs and mailing lists</li>
<li>
<a rel="nofollow" class="external text" href="http://planet.smalltalk.org/">Planet Smalltalk</a>, an <a href="http://en.m.wikipedia.org/wiki/Planet_(software)" title="Planet (software)">aggregator</a> of Smalltalk blog posts</li>
<li>
<a rel="nofollow" class="external text" href="http://stephane.ducasse.free.fr/FreeBooks.html">Downloadable books on Smalltalk</a>, permission obtained to make these books freely available, over 25 full texts scanned from print</li>
<li>
<a rel="nofollow" class="external text" href="http://www.dmoz.org/Computers/Programming/Languages/Smalltalk/">Smalltalk</a> at the <a href="http://en.m.wikipedia.org/wiki/Open_Directory_Project" title="Open Directory Project">Open Directory Project</a>
</li>
<li>
<a rel="nofollow" class="external text" href="http://www.esug.org">ESUG (European Smalltalk Users Group)</a>, non-profit organization with commercial and academic members, has various promotion activities including a yearly event since 1993</li>
<li>
<a rel="nofollow" class="external text" href="http://stic.st">STIC (Smalltalk Industry Council)</a>, promoting Smalltalk on behalf of the Smalltalk community</li>
<li>
<a rel="nofollow" class="external text" href="http://www.fast.org.ar">La Fundacion Argentina de Smalltalk (FAST)</a>, Organizer of annual Smalltalk conference in Argentina</li>
<li>
<a rel="nofollow" class="external text" href="http://www.clubsmalltalk.org/">ClubSmalltalk</a>, a Latin American group with a website in English to promote the Smalltalk technology</li>
<li>
<a rel="nofollow" class="external text" href="http://www.smalltalk.org/">Smalltalk.org</a>, advocacy site</li>
</ul>

						<div class="section" id="mw-mf-language-section">
				<h2 id="section_language" class="section_heading">Read in another language</h2>
				<div id="content_language" class="content_block">
					<p>This article is available in 32 languages</p>
					<ul id="mw-mf-language-selection"><li><a href="http://ar.m.wikipedia.org/wiki/%D8%B3%D9%85%D9%88%D9%84_%D8%AA%D9%88%D9%83" lang="ar" hreflang="ar">Ø§ÙØ¹Ø±Ø¨ÙØ©</a></li><li><a href="http://an.m.wikipedia.org/wiki/Smalltalk" lang="an" hreflang="an">aragonÃ©s</a></li><li><a href="http://bg.m.wikipedia.org/wiki/Smalltalk" lang="bg" hreflang="bg">Ð±ÑÐ»Ð³Ð°ÑÑÐºÐ¸</a></li><li><a href="http://ca.m.wikipedia.org/wiki/Smalltalk" lang="ca" hreflang="ca">catalÃ </a></li><li><a href="http://cs.m.wikipedia.org/wiki/Smalltalk" lang="cs" hreflang="cs">Äesky</a></li><li><a href="http://de.m.wikipedia.org/wiki/Smalltalk_(Programmiersprache)" lang="de" hreflang="de">Deutsch</a></li><li><a href="http://et.m.wikipedia.org/wiki/Smalltalk" lang="et" hreflang="et">eesti</a></li><li><a href="http://el.m.wikipedia.org/wiki/Smalltalk" lang="el" hreflang="el">ÎÎ»Î»Î·Î½Î¹ÎºÎ¬</a></li><li><a href="http://es.m.wikipedia.org/wiki/Smalltalk" lang="es" hreflang="es">espaÃ±ol</a></li><li><a href="http://fa.m.wikipedia.org/wiki/%D8%A7%D8%B3%D9%85%D8%A7%D9%84%E2%80%8C%D8%AA%D8%A7%DA%A9" lang="fa" hreflang="fa">ÙØ§Ø±Ø³Û</a></li><li><a href="http://fr.m.wikipedia.org/wiki/Smalltalk" lang="fr" hreflang="fr">franÃ§ais</a></li><li><a href="http://ko.m.wikipedia.org/wiki/%EC%8A%A4%EB%AA%B0%ED%86%A0%ED%81%AC" lang="ko" hreflang="ko">íêµ­ì´</a></li><li><a href="http://id.m.wikipedia.org/wiki/Smalltalk" lang="id" hreflang="id">Bahasa Indonesia</a></li><li><a href="http://it.m.wikipedia.org/wiki/Smalltalk" lang="it" hreflang="it">italiano</a></li><li><a href="http://he.m.wikipedia.org/wiki/Smalltalk" lang="he" hreflang="he">×¢××¨××ª</a></li><li><a href="http://lv.m.wikipedia.org/wiki/Smalltalk" lang="lv" hreflang="lv">latvieÅ¡u</a></li><li><a href="http://nl.m.wikipedia.org/wiki/Smalltalk" lang="nl" hreflang="nl">Nederlands</a></li><li><a href="http://ja.m.wikipedia.org/wiki/Smalltalk" lang="ja" hreflang="ja">æ¥æ¬èª</a></li><li><a href="http://no.m.wikipedia.org/wiki/Smalltalk" lang="no" hreflang="no">norsk (bokmÃ¥l)â</a></li><li><a href="http://pl.m.wikipedia.org/wiki/Smalltalk" lang="pl" hreflang="pl">polski</a></li><li><a href="http://pt.m.wikipedia.org/wiki/Smalltalk" lang="pt" hreflang="pt">portuguÃªs</a></li><li><a href="http://ru.m.wikipedia.org/wiki/Smalltalk" lang="ru" hreflang="ru">ÑÑÑÑÐºÐ¸Ð¹</a></li><li><a href="http://sk.m.wikipedia.org/wiki/Smalltalk" lang="sk" hreflang="sk">slovenÄina</a></li><li><a href="http://sl.m.wikipedia.org/wiki/Smalltalk" lang="sl" hreflang="sl">slovenÅ¡Äina</a></li><li><a href="http://fi.m.wikipedia.org/wiki/Smalltalk" lang="fi" hreflang="fi">suomi</a></li><li><a href="http://sv.m.wikipedia.org/wiki/Smalltalk" lang="sv" hreflang="sv">svenska</a></li><li><a href="http://th.m.wikipedia.org/wiki/%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B8%AA%E0%B8%A1%E0%B8%AD%E0%B8%A5%E0%B8%A5%E0%B9%8C%E0%B8%97%E0%B8%AD%E0%B8%A5%E0%B9%8C%E0%B8%81" lang="th" hreflang="th">à¹à¸à¸¢</a></li><li><a href="http://tg.m.wikipedia.org/wiki/Smalltalk" lang="tg" hreflang="tg">ÑÐ¾Ò·Ð¸ÐºÓ£</a></li><li><a href="http://tr.m.wikipedia.org/wiki/Smalltalk" lang="tr" hreflang="tr">TÃ¼rkÃ§e</a></li><li><a href="http://uk.m.wikipedia.org/wiki/Smalltalk" lang="uk" hreflang="uk">ÑÐºÑÐ°ÑÐ½ÑÑÐºÐ°</a></li><li><a href="http://vi.m.wikipedia.org/wiki/Smalltalk" lang="vi" hreflang="vi">Tiáº¿ng Viá»t</a></li><li><a href="http://zh.m.wikipedia.org/wiki/Smalltalk" lang="zh" hreflang="zh">ä¸­æ</a></li></ul>
				</div>
			</div>			</div><!-- close #content_wrapper -->
			<div id="footer">
			<h2 class="section_heading" id="section_footer">
		<img src="http://bits.wikimedia.org/static-1.21wmf3/extensions/MobileFrontend/stylesheets/common/images/logo-copyright-en.png" class="license" alt="Wikipedia Â®" />	</h2>
	<div class="content_block" id="content_footer">
		<ul class="settings">
			<li>
				<span class="left separator"><a id="mw-mf-display-toggle" href="http://en.wikipedia.org/w/index.php?title=Smalltalk&amp;mobileaction=toggle_view_desktop">Desktop</a></span><span class="right">Mobile</span>
			</li>
			<li class="notice">
				Article by <a href="http://en.m.wikipedia.org/w/index.php?title=Smalltalk&amp;action=history">contributors</a> like you<br>
				Content available under <a href="Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License?useformat=mobile">CC BY-SA 3.0</a>				<span>| <a href="http://wikimediafoundation.org/wiki/Terms_of_use?useformat=mobile">Terms of Use</a></span>
			</li>
		</ul>
		<ul class="links">
						<li>
			<a href='http://en.m.wikipedia.org/w/index.php?title=Special:MobileFeedback&amp;returnto=Smalltalk&amp;feedbacksource=MobileFrontend'>
				Contact Wikipedia			</a>
			</li><li>
						<a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy</a></li><li>
			<a href="Wikipedia:About" title="Wikipedia:About">About</a></li><li>
			<a href="Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
		</ul>
	</div><!-- close footer.div / #content_footer -->
	</div><!-- close #footer -->
					</div><!-- close #mw-mf-page-center -->
		</div><!-- close #mw-mf-viewport -->
		
					</body>
	</html>